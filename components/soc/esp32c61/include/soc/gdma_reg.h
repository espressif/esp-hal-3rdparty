/**
 * SPDX-FileCopyrightText: 2024 Espressif Systems (Shanghai) CO LTD
 *
 *  SPDX-License-Identifier: Apache-2.0
 */
#pragma once

#include <stdint.h>
#include "soc/soc.h"
#ifdef __cplusplus
extern "C" {
#endif

/** GDMA_IN_INT_RAW_CH0_REG register
 *  Raw interrupt status of RX channel 0
 */
#define GDMA_IN_INT_RAW_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x0)
/** GDMA_IN_DONE_CH0_INT_RAW : R/WTC/SS; bitpos: [0]; default: 0;
 *  The raw interrupt status of GDMA_IN_DONE_CH0_INT.
 */
#define GDMA_IN_DONE_CH0_INT_RAW    (BIT(0))
#define GDMA_IN_DONE_CH0_INT_RAW_M  (GDMA_IN_DONE_CH0_INT_RAW_V << GDMA_IN_DONE_CH0_INT_RAW_S)
#define GDMA_IN_DONE_CH0_INT_RAW_V  0x00000001U
#define GDMA_IN_DONE_CH0_INT_RAW_S  0
/** GDMA_IN_SUC_EOF_CH0_INT_RAW : R/WTC/SS; bitpos: [1]; default: 0;
 *  The raw interrupt status of GDMA_IN_SUC_EOF_CH0_INT.
 */
#define GDMA_IN_SUC_EOF_CH0_INT_RAW    (BIT(1))
#define GDMA_IN_SUC_EOF_CH0_INT_RAW_M  (GDMA_IN_SUC_EOF_CH0_INT_RAW_V << GDMA_IN_SUC_EOF_CH0_INT_RAW_S)
#define GDMA_IN_SUC_EOF_CH0_INT_RAW_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH0_INT_RAW_S  1
/** GDMA_IN_ERR_EOF_CH0_INT_RAW : R/WTC/SS; bitpos: [2]; default: 0;
 *  The raw interrupt status of GDMA_IN_ERR_EOF_CH0_INT.
 */
#define GDMA_IN_ERR_EOF_CH0_INT_RAW    (BIT(2))
#define GDMA_IN_ERR_EOF_CH0_INT_RAW_M  (GDMA_IN_ERR_EOF_CH0_INT_RAW_V << GDMA_IN_ERR_EOF_CH0_INT_RAW_S)
#define GDMA_IN_ERR_EOF_CH0_INT_RAW_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH0_INT_RAW_S  2
/** GDMA_IN_DSCR_ERR_CH0_INT_RAW : R/WTC/SS; bitpos: [3]; default: 0;
 *  The raw interrupt status of GDMA_IN_DSCR_ERR_CH0_INT.
 */
#define GDMA_IN_DSCR_ERR_CH0_INT_RAW    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH0_INT_RAW_M  (GDMA_IN_DSCR_ERR_CH0_INT_RAW_V << GDMA_IN_DSCR_ERR_CH0_INT_RAW_S)
#define GDMA_IN_DSCR_ERR_CH0_INT_RAW_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH0_INT_RAW_S  3
/** GDMA_IN_DSCR_EMPTY_CH0_INT_RAW : R/WTC/SS; bitpos: [4]; default: 0;
 *  The raw interrupt status of GDMA_IN_DSCR_EMPTY_CH0_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH0_INT_RAW    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_M  (GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_V << GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_S)
#define GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_S  4
/** GDMA_INFIFO_OVF_CH0_INT_RAW : R/WTC/SS; bitpos: [5]; default: 0;
 *  The raw interrupt status of GDMA_INFIFO_OVF_CH0_INT.
 */
#define GDMA_INFIFO_OVF_CH0_INT_RAW    (BIT(5))
#define GDMA_INFIFO_OVF_CH0_INT_RAW_M  (GDMA_INFIFO_OVF_CH0_INT_RAW_V << GDMA_INFIFO_OVF_CH0_INT_RAW_S)
#define GDMA_INFIFO_OVF_CH0_INT_RAW_V  0x00000001U
#define GDMA_INFIFO_OVF_CH0_INT_RAW_S  5
/** GDMA_INFIFO_UDF_CH0_INT_RAW : R/WTC/SS; bitpos: [6]; default: 0;
 *  The raw interrupt status of GDMA_INFIFO_UDF_CH0_INT.
 */
#define GDMA_INFIFO_UDF_CH0_INT_RAW    (BIT(6))
#define GDMA_INFIFO_UDF_CH0_INT_RAW_M  (GDMA_INFIFO_UDF_CH0_INT_RAW_V << GDMA_INFIFO_UDF_CH0_INT_RAW_S)
#define GDMA_INFIFO_UDF_CH0_INT_RAW_V  0x00000001U
#define GDMA_INFIFO_UDF_CH0_INT_RAW_S  6

/** GDMA_IN_INT_ST_CH0_REG register
 *  Masked interrupt status of RX channel 0
 */
#define GDMA_IN_INT_ST_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x4)
/** GDMA_IN_DONE_CH0_INT_ST : RO; bitpos: [0]; default: 0;
 *  The masked interrupt status of GDMA_IN_DONE_CH0_INT.
 */
#define GDMA_IN_DONE_CH0_INT_ST    (BIT(0))
#define GDMA_IN_DONE_CH0_INT_ST_M  (GDMA_IN_DONE_CH0_INT_ST_V << GDMA_IN_DONE_CH0_INT_ST_S)
#define GDMA_IN_DONE_CH0_INT_ST_V  0x00000001U
#define GDMA_IN_DONE_CH0_INT_ST_S  0
/** GDMA_IN_SUC_EOF_CH0_INT_ST : RO; bitpos: [1]; default: 0;
 *  The masked interrupt status of GDMA_IN_SUC_EOF_CH0_INT.
 */
#define GDMA_IN_SUC_EOF_CH0_INT_ST    (BIT(1))
#define GDMA_IN_SUC_EOF_CH0_INT_ST_M  (GDMA_IN_SUC_EOF_CH0_INT_ST_V << GDMA_IN_SUC_EOF_CH0_INT_ST_S)
#define GDMA_IN_SUC_EOF_CH0_INT_ST_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH0_INT_ST_S  1
/** GDMA_IN_ERR_EOF_CH0_INT_ST : RO; bitpos: [2]; default: 0;
 *  The masked interrupt status of GDMA_IN_ERR_EOF_CH0_INT.
 */
#define GDMA_IN_ERR_EOF_CH0_INT_ST    (BIT(2))
#define GDMA_IN_ERR_EOF_CH0_INT_ST_M  (GDMA_IN_ERR_EOF_CH0_INT_ST_V << GDMA_IN_ERR_EOF_CH0_INT_ST_S)
#define GDMA_IN_ERR_EOF_CH0_INT_ST_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH0_INT_ST_S  2
/** GDMA_IN_DSCR_ERR_CH0_INT_ST : RO; bitpos: [3]; default: 0;
 *  The masked interrupt status of GDMA_IN_DSCR_ERR_CH0_INT.
 */
#define GDMA_IN_DSCR_ERR_CH0_INT_ST    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH0_INT_ST_M  (GDMA_IN_DSCR_ERR_CH0_INT_ST_V << GDMA_IN_DSCR_ERR_CH0_INT_ST_S)
#define GDMA_IN_DSCR_ERR_CH0_INT_ST_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH0_INT_ST_S  3
/** GDMA_IN_DSCR_EMPTY_CH0_INT_ST : RO; bitpos: [4]; default: 0;
 *  The masked interrupt status of GDMA_IN_DSCR_EMPTY_CH0_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ST    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ST_M  (GDMA_IN_DSCR_EMPTY_CH0_INT_ST_V << GDMA_IN_DSCR_EMPTY_CH0_INT_ST_S)
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ST_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ST_S  4
/** GDMA_INFIFO_OVF_CH0_INT_ST : RO; bitpos: [5]; default: 0;
 *  The masked interrupt status of GDMA_INFIFO_OVF_CH0_INT.
 */
#define GDMA_INFIFO_OVF_CH0_INT_ST    (BIT(5))
#define GDMA_INFIFO_OVF_CH0_INT_ST_M  (GDMA_INFIFO_OVF_CH0_INT_ST_V << GDMA_INFIFO_OVF_CH0_INT_ST_S)
#define GDMA_INFIFO_OVF_CH0_INT_ST_V  0x00000001U
#define GDMA_INFIFO_OVF_CH0_INT_ST_S  5
/** GDMA_INFIFO_UDF_CH0_INT_ST : RO; bitpos: [6]; default: 0;
 *  The masked interrupt status of GDMA_INFIFO_UDF_CH0_INT.
 */
#define GDMA_INFIFO_UDF_CH0_INT_ST    (BIT(6))
#define GDMA_INFIFO_UDF_CH0_INT_ST_M  (GDMA_INFIFO_UDF_CH0_INT_ST_V << GDMA_INFIFO_UDF_CH0_INT_ST_S)
#define GDMA_INFIFO_UDF_CH0_INT_ST_V  0x00000001U
#define GDMA_INFIFO_UDF_CH0_INT_ST_S  6

/** GDMA_IN_INT_ENA_CH0_REG register
 *  Interrupt enable bits of RX channel 0
 */
#define GDMA_IN_INT_ENA_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x8)
/** GDMA_IN_DONE_CH0_INT_ENA : R/W; bitpos: [0]; default: 0;
 *  Write 1 to enable GDMA_IN_DONE_CH0_INT.
 */
#define GDMA_IN_DONE_CH0_INT_ENA    (BIT(0))
#define GDMA_IN_DONE_CH0_INT_ENA_M  (GDMA_IN_DONE_CH0_INT_ENA_V << GDMA_IN_DONE_CH0_INT_ENA_S)
#define GDMA_IN_DONE_CH0_INT_ENA_V  0x00000001U
#define GDMA_IN_DONE_CH0_INT_ENA_S  0
/** GDMA_IN_SUC_EOF_CH0_INT_ENA : R/W; bitpos: [1]; default: 0;
 *  Write 1 to enable GDMA_IN_SUC_EOF_CH0_INT.
 */
#define GDMA_IN_SUC_EOF_CH0_INT_ENA    (BIT(1))
#define GDMA_IN_SUC_EOF_CH0_INT_ENA_M  (GDMA_IN_SUC_EOF_CH0_INT_ENA_V << GDMA_IN_SUC_EOF_CH0_INT_ENA_S)
#define GDMA_IN_SUC_EOF_CH0_INT_ENA_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH0_INT_ENA_S  1
/** GDMA_IN_ERR_EOF_CH0_INT_ENA : R/W; bitpos: [2]; default: 0;
 *  Write 1 to enable GDMA_IN_ERR_EOF_CH0_INT.
 */
#define GDMA_IN_ERR_EOF_CH0_INT_ENA    (BIT(2))
#define GDMA_IN_ERR_EOF_CH0_INT_ENA_M  (GDMA_IN_ERR_EOF_CH0_INT_ENA_V << GDMA_IN_ERR_EOF_CH0_INT_ENA_S)
#define GDMA_IN_ERR_EOF_CH0_INT_ENA_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH0_INT_ENA_S  2
/** GDMA_IN_DSCR_ERR_CH0_INT_ENA : R/W; bitpos: [3]; default: 0;
 *  Write 1 to enable GDMA_IN_DSCR_ERR_CH0_INT.
 */
#define GDMA_IN_DSCR_ERR_CH0_INT_ENA    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH0_INT_ENA_M  (GDMA_IN_DSCR_ERR_CH0_INT_ENA_V << GDMA_IN_DSCR_ERR_CH0_INT_ENA_S)
#define GDMA_IN_DSCR_ERR_CH0_INT_ENA_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH0_INT_ENA_S  3
/** GDMA_IN_DSCR_EMPTY_CH0_INT_ENA : R/W; bitpos: [4]; default: 0;
 *  Write 1 to enable GDMA_IN_DSCR_EMPTY_CH0_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ENA    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_M  (GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_V << GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_S)
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_S  4
/** GDMA_INFIFO_OVF_CH0_INT_ENA : R/W; bitpos: [5]; default: 0;
 *  Write 1 to enable GDMA_INFIFO_OVF_CH0_INT.
 */
#define GDMA_INFIFO_OVF_CH0_INT_ENA    (BIT(5))
#define GDMA_INFIFO_OVF_CH0_INT_ENA_M  (GDMA_INFIFO_OVF_CH0_INT_ENA_V << GDMA_INFIFO_OVF_CH0_INT_ENA_S)
#define GDMA_INFIFO_OVF_CH0_INT_ENA_V  0x00000001U
#define GDMA_INFIFO_OVF_CH0_INT_ENA_S  5
/** GDMA_INFIFO_UDF_CH0_INT_ENA : R/W; bitpos: [6]; default: 0;
 *  Write 1 to enable GDMA_INFIFO_UDF_CH0_INT.
 */
#define GDMA_INFIFO_UDF_CH0_INT_ENA    (BIT(6))
#define GDMA_INFIFO_UDF_CH0_INT_ENA_M  (GDMA_INFIFO_UDF_CH0_INT_ENA_V << GDMA_INFIFO_UDF_CH0_INT_ENA_S)
#define GDMA_INFIFO_UDF_CH0_INT_ENA_V  0x00000001U
#define GDMA_INFIFO_UDF_CH0_INT_ENA_S  6

/** GDMA_IN_INT_CLR_CH0_REG register
 *  Interrupt clear bits of RX channel 0
 */
#define GDMA_IN_INT_CLR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xc)
/** GDMA_IN_DONE_CH0_INT_CLR : WT; bitpos: [0]; default: 0;
 *  Write 1 to clear GDMA_IN_DONE_CH0_INT.
 */
#define GDMA_IN_DONE_CH0_INT_CLR    (BIT(0))
#define GDMA_IN_DONE_CH0_INT_CLR_M  (GDMA_IN_DONE_CH0_INT_CLR_V << GDMA_IN_DONE_CH0_INT_CLR_S)
#define GDMA_IN_DONE_CH0_INT_CLR_V  0x00000001U
#define GDMA_IN_DONE_CH0_INT_CLR_S  0
/** GDMA_IN_SUC_EOF_CH0_INT_CLR : WT; bitpos: [1]; default: 0;
 *  Write 1 to clear GDMA_IN_SUC_EOF_CH0_INT.
 */
#define GDMA_IN_SUC_EOF_CH0_INT_CLR    (BIT(1))
#define GDMA_IN_SUC_EOF_CH0_INT_CLR_M  (GDMA_IN_SUC_EOF_CH0_INT_CLR_V << GDMA_IN_SUC_EOF_CH0_INT_CLR_S)
#define GDMA_IN_SUC_EOF_CH0_INT_CLR_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH0_INT_CLR_S  1
/** GDMA_IN_ERR_EOF_CH0_INT_CLR : WT; bitpos: [2]; default: 0;
 *  Write 1 to clear GDMA_IN_ERR_EOF_CH0_INT.
 */
#define GDMA_IN_ERR_EOF_CH0_INT_CLR    (BIT(2))
#define GDMA_IN_ERR_EOF_CH0_INT_CLR_M  (GDMA_IN_ERR_EOF_CH0_INT_CLR_V << GDMA_IN_ERR_EOF_CH0_INT_CLR_S)
#define GDMA_IN_ERR_EOF_CH0_INT_CLR_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH0_INT_CLR_S  2
/** GDMA_IN_DSCR_ERR_CH0_INT_CLR : WT; bitpos: [3]; default: 0;
 *  Write 1 to clear GDMA_IN_DSCR_ERR_CH0_INT.
 */
#define GDMA_IN_DSCR_ERR_CH0_INT_CLR    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH0_INT_CLR_M  (GDMA_IN_DSCR_ERR_CH0_INT_CLR_V << GDMA_IN_DSCR_ERR_CH0_INT_CLR_S)
#define GDMA_IN_DSCR_ERR_CH0_INT_CLR_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH0_INT_CLR_S  3
/** GDMA_IN_DSCR_EMPTY_CH0_INT_CLR : WT; bitpos: [4]; default: 0;
 *  Write 1 to clear GDMA_IN_DSCR_EMPTY_CH0_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH0_INT_CLR    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_M  (GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_V << GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_S)
#define GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_S  4
/** GDMA_INFIFO_OVF_CH0_INT_CLR : WT; bitpos: [5]; default: 0;
 *  Write 1 to clear GDMA_INFIFO_OVF_CH0_INT.
 */
#define GDMA_INFIFO_OVF_CH0_INT_CLR    (BIT(5))
#define GDMA_INFIFO_OVF_CH0_INT_CLR_M  (GDMA_INFIFO_OVF_CH0_INT_CLR_V << GDMA_INFIFO_OVF_CH0_INT_CLR_S)
#define GDMA_INFIFO_OVF_CH0_INT_CLR_V  0x00000001U
#define GDMA_INFIFO_OVF_CH0_INT_CLR_S  5
/** GDMA_INFIFO_UDF_CH0_INT_CLR : WT; bitpos: [6]; default: 0;
 *  Write 1 to clear GDMA_INFIFO_UDF_CH0_INT.
 */
#define GDMA_INFIFO_UDF_CH0_INT_CLR    (BIT(6))
#define GDMA_INFIFO_UDF_CH0_INT_CLR_M  (GDMA_INFIFO_UDF_CH0_INT_CLR_V << GDMA_INFIFO_UDF_CH0_INT_CLR_S)
#define GDMA_INFIFO_UDF_CH0_INT_CLR_V  0x00000001U
#define GDMA_INFIFO_UDF_CH0_INT_CLR_S  6

/** GDMA_IN_INT_RAW_CH1_REG register
 *  Raw interrupt status of RX channel 0
 */
#define GDMA_IN_INT_RAW_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x10)
/** GDMA_IN_DONE_CH1_INT_RAW : R/WTC/SS; bitpos: [0]; default: 0;
 *  The raw interrupt status of GDMA_IN_DONE_CH1_INT.
 */
#define GDMA_IN_DONE_CH1_INT_RAW    (BIT(0))
#define GDMA_IN_DONE_CH1_INT_RAW_M  (GDMA_IN_DONE_CH1_INT_RAW_V << GDMA_IN_DONE_CH1_INT_RAW_S)
#define GDMA_IN_DONE_CH1_INT_RAW_V  0x00000001U
#define GDMA_IN_DONE_CH1_INT_RAW_S  0
/** GDMA_IN_SUC_EOF_CH1_INT_RAW : R/WTC/SS; bitpos: [1]; default: 0;
 *  The raw interrupt status of GDMA_IN_SUC_EOF_CH1_INT.
 */
#define GDMA_IN_SUC_EOF_CH1_INT_RAW    (BIT(1))
#define GDMA_IN_SUC_EOF_CH1_INT_RAW_M  (GDMA_IN_SUC_EOF_CH1_INT_RAW_V << GDMA_IN_SUC_EOF_CH1_INT_RAW_S)
#define GDMA_IN_SUC_EOF_CH1_INT_RAW_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH1_INT_RAW_S  1
/** GDMA_IN_ERR_EOF_CH1_INT_RAW : R/WTC/SS; bitpos: [2]; default: 0;
 *  The raw interrupt status of GDMA_IN_ERR_EOF_CH1_INT.
 */
#define GDMA_IN_ERR_EOF_CH1_INT_RAW    (BIT(2))
#define GDMA_IN_ERR_EOF_CH1_INT_RAW_M  (GDMA_IN_ERR_EOF_CH1_INT_RAW_V << GDMA_IN_ERR_EOF_CH1_INT_RAW_S)
#define GDMA_IN_ERR_EOF_CH1_INT_RAW_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH1_INT_RAW_S  2
/** GDMA_IN_DSCR_ERR_CH1_INT_RAW : R/WTC/SS; bitpos: [3]; default: 0;
 *  The raw interrupt status of GDMA_IN_DSCR_ERR_CH1_INT.
 */
#define GDMA_IN_DSCR_ERR_CH1_INT_RAW    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH1_INT_RAW_M  (GDMA_IN_DSCR_ERR_CH1_INT_RAW_V << GDMA_IN_DSCR_ERR_CH1_INT_RAW_S)
#define GDMA_IN_DSCR_ERR_CH1_INT_RAW_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH1_INT_RAW_S  3
/** GDMA_IN_DSCR_EMPTY_CH1_INT_RAW : R/WTC/SS; bitpos: [4]; default: 0;
 *  The raw interrupt status of GDMA_IN_DSCR_EMPTY_CH1_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH1_INT_RAW    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_M  (GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_V << GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_S)
#define GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_S  4
/** GDMA_INFIFO_OVF_CH1_INT_RAW : R/WTC/SS; bitpos: [5]; default: 0;
 *  The raw interrupt status of GDMA_INFIFO_OVF_CH1_INT.
 */
#define GDMA_INFIFO_OVF_CH1_INT_RAW    (BIT(5))
#define GDMA_INFIFO_OVF_CH1_INT_RAW_M  (GDMA_INFIFO_OVF_CH1_INT_RAW_V << GDMA_INFIFO_OVF_CH1_INT_RAW_S)
#define GDMA_INFIFO_OVF_CH1_INT_RAW_V  0x00000001U
#define GDMA_INFIFO_OVF_CH1_INT_RAW_S  5
/** GDMA_INFIFO_UDF_CH1_INT_RAW : R/WTC/SS; bitpos: [6]; default: 0;
 *  The raw interrupt status of GDMA_INFIFO_UDF_CH1_INT.
 */
#define GDMA_INFIFO_UDF_CH1_INT_RAW    (BIT(6))
#define GDMA_INFIFO_UDF_CH1_INT_RAW_M  (GDMA_INFIFO_UDF_CH1_INT_RAW_V << GDMA_INFIFO_UDF_CH1_INT_RAW_S)
#define GDMA_INFIFO_UDF_CH1_INT_RAW_V  0x00000001U
#define GDMA_INFIFO_UDF_CH1_INT_RAW_S  6

/** GDMA_IN_INT_ST_CH1_REG register
 *  Masked interrupt status of RX channel 0
 */
#define GDMA_IN_INT_ST_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x14)
/** GDMA_IN_DONE_CH1_INT_ST : RO; bitpos: [0]; default: 0;
 *  The masked interrupt status of GDMA_IN_DONE_CH1_INT.
 */
#define GDMA_IN_DONE_CH1_INT_ST    (BIT(0))
#define GDMA_IN_DONE_CH1_INT_ST_M  (GDMA_IN_DONE_CH1_INT_ST_V << GDMA_IN_DONE_CH1_INT_ST_S)
#define GDMA_IN_DONE_CH1_INT_ST_V  0x00000001U
#define GDMA_IN_DONE_CH1_INT_ST_S  0
/** GDMA_IN_SUC_EOF_CH1_INT_ST : RO; bitpos: [1]; default: 0;
 *  The masked interrupt status of GDMA_IN_SUC_EOF_CH1_INT.
 */
#define GDMA_IN_SUC_EOF_CH1_INT_ST    (BIT(1))
#define GDMA_IN_SUC_EOF_CH1_INT_ST_M  (GDMA_IN_SUC_EOF_CH1_INT_ST_V << GDMA_IN_SUC_EOF_CH1_INT_ST_S)
#define GDMA_IN_SUC_EOF_CH1_INT_ST_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH1_INT_ST_S  1
/** GDMA_IN_ERR_EOF_CH1_INT_ST : RO; bitpos: [2]; default: 0;
 *  The masked interrupt status of GDMA_IN_ERR_EOF_CH1_INT.
 */
#define GDMA_IN_ERR_EOF_CH1_INT_ST    (BIT(2))
#define GDMA_IN_ERR_EOF_CH1_INT_ST_M  (GDMA_IN_ERR_EOF_CH1_INT_ST_V << GDMA_IN_ERR_EOF_CH1_INT_ST_S)
#define GDMA_IN_ERR_EOF_CH1_INT_ST_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH1_INT_ST_S  2
/** GDMA_IN_DSCR_ERR_CH1_INT_ST : RO; bitpos: [3]; default: 0;
 *  The masked interrupt status of GDMA_IN_DSCR_ERR_CH1_INT.
 */
#define GDMA_IN_DSCR_ERR_CH1_INT_ST    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH1_INT_ST_M  (GDMA_IN_DSCR_ERR_CH1_INT_ST_V << GDMA_IN_DSCR_ERR_CH1_INT_ST_S)
#define GDMA_IN_DSCR_ERR_CH1_INT_ST_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH1_INT_ST_S  3
/** GDMA_IN_DSCR_EMPTY_CH1_INT_ST : RO; bitpos: [4]; default: 0;
 *  The masked interrupt status of GDMA_IN_DSCR_EMPTY_CH1_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ST    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ST_M  (GDMA_IN_DSCR_EMPTY_CH1_INT_ST_V << GDMA_IN_DSCR_EMPTY_CH1_INT_ST_S)
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ST_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ST_S  4
/** GDMA_INFIFO_OVF_CH1_INT_ST : RO; bitpos: [5]; default: 0;
 *  The masked interrupt status of GDMA_INFIFO_OVF_CH1_INT.
 */
#define GDMA_INFIFO_OVF_CH1_INT_ST    (BIT(5))
#define GDMA_INFIFO_OVF_CH1_INT_ST_M  (GDMA_INFIFO_OVF_CH1_INT_ST_V << GDMA_INFIFO_OVF_CH1_INT_ST_S)
#define GDMA_INFIFO_OVF_CH1_INT_ST_V  0x00000001U
#define GDMA_INFIFO_OVF_CH1_INT_ST_S  5
/** GDMA_INFIFO_UDF_CH1_INT_ST : RO; bitpos: [6]; default: 0;
 *  The masked interrupt status of GDMA_INFIFO_UDF_CH1_INT.
 */
#define GDMA_INFIFO_UDF_CH1_INT_ST    (BIT(6))
#define GDMA_INFIFO_UDF_CH1_INT_ST_M  (GDMA_INFIFO_UDF_CH1_INT_ST_V << GDMA_INFIFO_UDF_CH1_INT_ST_S)
#define GDMA_INFIFO_UDF_CH1_INT_ST_V  0x00000001U
#define GDMA_INFIFO_UDF_CH1_INT_ST_S  6

/** GDMA_IN_INT_ENA_CH1_REG register
 *  Interrupt enable bits of RX channel 0
 */
#define GDMA_IN_INT_ENA_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x18)
/** GDMA_IN_DONE_CH1_INT_ENA : R/W; bitpos: [0]; default: 0;
 *  Write 1 to enable GDMA_IN_DONE_CH1_INT.
 */
#define GDMA_IN_DONE_CH1_INT_ENA    (BIT(0))
#define GDMA_IN_DONE_CH1_INT_ENA_M  (GDMA_IN_DONE_CH1_INT_ENA_V << GDMA_IN_DONE_CH1_INT_ENA_S)
#define GDMA_IN_DONE_CH1_INT_ENA_V  0x00000001U
#define GDMA_IN_DONE_CH1_INT_ENA_S  0
/** GDMA_IN_SUC_EOF_CH1_INT_ENA : R/W; bitpos: [1]; default: 0;
 *  Write 1 to enable GDMA_IN_SUC_EOF_CH1_INT.
 */
#define GDMA_IN_SUC_EOF_CH1_INT_ENA    (BIT(1))
#define GDMA_IN_SUC_EOF_CH1_INT_ENA_M  (GDMA_IN_SUC_EOF_CH1_INT_ENA_V << GDMA_IN_SUC_EOF_CH1_INT_ENA_S)
#define GDMA_IN_SUC_EOF_CH1_INT_ENA_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH1_INT_ENA_S  1
/** GDMA_IN_ERR_EOF_CH1_INT_ENA : R/W; bitpos: [2]; default: 0;
 *  Write 1 to enable GDMA_IN_ERR_EOF_CH1_INT.
 */
#define GDMA_IN_ERR_EOF_CH1_INT_ENA    (BIT(2))
#define GDMA_IN_ERR_EOF_CH1_INT_ENA_M  (GDMA_IN_ERR_EOF_CH1_INT_ENA_V << GDMA_IN_ERR_EOF_CH1_INT_ENA_S)
#define GDMA_IN_ERR_EOF_CH1_INT_ENA_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH1_INT_ENA_S  2
/** GDMA_IN_DSCR_ERR_CH1_INT_ENA : R/W; bitpos: [3]; default: 0;
 *  Write 1 to enable GDMA_IN_DSCR_ERR_CH1_INT.
 */
#define GDMA_IN_DSCR_ERR_CH1_INT_ENA    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH1_INT_ENA_M  (GDMA_IN_DSCR_ERR_CH1_INT_ENA_V << GDMA_IN_DSCR_ERR_CH1_INT_ENA_S)
#define GDMA_IN_DSCR_ERR_CH1_INT_ENA_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH1_INT_ENA_S  3
/** GDMA_IN_DSCR_EMPTY_CH1_INT_ENA : R/W; bitpos: [4]; default: 0;
 *  Write 1 to enable GDMA_IN_DSCR_EMPTY_CH1_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ENA    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_M  (GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_V << GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_S)
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_S  4
/** GDMA_INFIFO_OVF_CH1_INT_ENA : R/W; bitpos: [5]; default: 0;
 *  Write 1 to enable GDMA_INFIFO_OVF_CH1_INT.
 */
#define GDMA_INFIFO_OVF_CH1_INT_ENA    (BIT(5))
#define GDMA_INFIFO_OVF_CH1_INT_ENA_M  (GDMA_INFIFO_OVF_CH1_INT_ENA_V << GDMA_INFIFO_OVF_CH1_INT_ENA_S)
#define GDMA_INFIFO_OVF_CH1_INT_ENA_V  0x00000001U
#define GDMA_INFIFO_OVF_CH1_INT_ENA_S  5
/** GDMA_INFIFO_UDF_CH1_INT_ENA : R/W; bitpos: [6]; default: 0;
 *  Write 1 to enable GDMA_INFIFO_UDF_CH1_INT.
 */
#define GDMA_INFIFO_UDF_CH1_INT_ENA    (BIT(6))
#define GDMA_INFIFO_UDF_CH1_INT_ENA_M  (GDMA_INFIFO_UDF_CH1_INT_ENA_V << GDMA_INFIFO_UDF_CH1_INT_ENA_S)
#define GDMA_INFIFO_UDF_CH1_INT_ENA_V  0x00000001U
#define GDMA_INFIFO_UDF_CH1_INT_ENA_S  6

/** GDMA_IN_INT_CLR_CH1_REG register
 *  Interrupt clear bits of RX channel 0
 */
#define GDMA_IN_INT_CLR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1c)
/** GDMA_IN_DONE_CH1_INT_CLR : WT; bitpos: [0]; default: 0;
 *  Write 1 to clear GDMA_IN_DONE_CH1_INT.
 */
#define GDMA_IN_DONE_CH1_INT_CLR    (BIT(0))
#define GDMA_IN_DONE_CH1_INT_CLR_M  (GDMA_IN_DONE_CH1_INT_CLR_V << GDMA_IN_DONE_CH1_INT_CLR_S)
#define GDMA_IN_DONE_CH1_INT_CLR_V  0x00000001U
#define GDMA_IN_DONE_CH1_INT_CLR_S  0
/** GDMA_IN_SUC_EOF_CH1_INT_CLR : WT; bitpos: [1]; default: 0;
 *  Write 1 to clear GDMA_IN_SUC_EOF_CH1_INT.
 */
#define GDMA_IN_SUC_EOF_CH1_INT_CLR    (BIT(1))
#define GDMA_IN_SUC_EOF_CH1_INT_CLR_M  (GDMA_IN_SUC_EOF_CH1_INT_CLR_V << GDMA_IN_SUC_EOF_CH1_INT_CLR_S)
#define GDMA_IN_SUC_EOF_CH1_INT_CLR_V  0x00000001U
#define GDMA_IN_SUC_EOF_CH1_INT_CLR_S  1
/** GDMA_IN_ERR_EOF_CH1_INT_CLR : WT; bitpos: [2]; default: 0;
 *  Write 1 to clear GDMA_IN_ERR_EOF_CH1_INT.
 */
#define GDMA_IN_ERR_EOF_CH1_INT_CLR    (BIT(2))
#define GDMA_IN_ERR_EOF_CH1_INT_CLR_M  (GDMA_IN_ERR_EOF_CH1_INT_CLR_V << GDMA_IN_ERR_EOF_CH1_INT_CLR_S)
#define GDMA_IN_ERR_EOF_CH1_INT_CLR_V  0x00000001U
#define GDMA_IN_ERR_EOF_CH1_INT_CLR_S  2
/** GDMA_IN_DSCR_ERR_CH1_INT_CLR : WT; bitpos: [3]; default: 0;
 *  Write 1 to clear GDMA_IN_DSCR_ERR_CH1_INT.
 */
#define GDMA_IN_DSCR_ERR_CH1_INT_CLR    (BIT(3))
#define GDMA_IN_DSCR_ERR_CH1_INT_CLR_M  (GDMA_IN_DSCR_ERR_CH1_INT_CLR_V << GDMA_IN_DSCR_ERR_CH1_INT_CLR_S)
#define GDMA_IN_DSCR_ERR_CH1_INT_CLR_V  0x00000001U
#define GDMA_IN_DSCR_ERR_CH1_INT_CLR_S  3
/** GDMA_IN_DSCR_EMPTY_CH1_INT_CLR : WT; bitpos: [4]; default: 0;
 *  Write 1 to clear GDMA_IN_DSCR_EMPTY_CH1_INT.
 */
#define GDMA_IN_DSCR_EMPTY_CH1_INT_CLR    (BIT(4))
#define GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_M  (GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_V << GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_S)
#define GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_V  0x00000001U
#define GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_S  4
/** GDMA_INFIFO_OVF_CH1_INT_CLR : WT; bitpos: [5]; default: 0;
 *  Write 1 to clear GDMA_INFIFO_OVF_CH1_INT.
 */
#define GDMA_INFIFO_OVF_CH1_INT_CLR    (BIT(5))
#define GDMA_INFIFO_OVF_CH1_INT_CLR_M  (GDMA_INFIFO_OVF_CH1_INT_CLR_V << GDMA_INFIFO_OVF_CH1_INT_CLR_S)
#define GDMA_INFIFO_OVF_CH1_INT_CLR_V  0x00000001U
#define GDMA_INFIFO_OVF_CH1_INT_CLR_S  5
/** GDMA_INFIFO_UDF_CH1_INT_CLR : WT; bitpos: [6]; default: 0;
 *  Write 1 to clear GDMA_INFIFO_UDF_CH1_INT.
 */
#define GDMA_INFIFO_UDF_CH1_INT_CLR    (BIT(6))
#define GDMA_INFIFO_UDF_CH1_INT_CLR_M  (GDMA_INFIFO_UDF_CH1_INT_CLR_V << GDMA_INFIFO_UDF_CH1_INT_CLR_S)
#define GDMA_INFIFO_UDF_CH1_INT_CLR_V  0x00000001U
#define GDMA_INFIFO_UDF_CH1_INT_CLR_S  6

/** GDMA_OUT_INT_RAW_CH0_REG register
 *  Raw interrupt status of TX channel 0
 */
#define GDMA_OUT_INT_RAW_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x30)
/** GDMA_OUT_DONE_CH0_INT_RAW : R/WTC/SS; bitpos: [0]; default: 0;
 *  The raw interrupt status of GDMA_OUT_DONE_CH0_INT.
 */
#define GDMA_OUT_DONE_CH0_INT_RAW    (BIT(0))
#define GDMA_OUT_DONE_CH0_INT_RAW_M  (GDMA_OUT_DONE_CH0_INT_RAW_V << GDMA_OUT_DONE_CH0_INT_RAW_S)
#define GDMA_OUT_DONE_CH0_INT_RAW_V  0x00000001U
#define GDMA_OUT_DONE_CH0_INT_RAW_S  0
/** GDMA_OUT_EOF_CH0_INT_RAW : R/WTC/SS; bitpos: [1]; default: 0;
 *  The raw interrupt status of GDMA_OUT_EOF_CH0_INT.
 */
#define GDMA_OUT_EOF_CH0_INT_RAW    (BIT(1))
#define GDMA_OUT_EOF_CH0_INT_RAW_M  (GDMA_OUT_EOF_CH0_INT_RAW_V << GDMA_OUT_EOF_CH0_INT_RAW_S)
#define GDMA_OUT_EOF_CH0_INT_RAW_V  0x00000001U
#define GDMA_OUT_EOF_CH0_INT_RAW_S  1
/** GDMA_OUT_DSCR_ERR_CH0_INT_RAW : R/WTC/SS; bitpos: [2]; default: 0;
 *  The raw interrupt status of GDMA_OUT_DSCR_ERR_CH0_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH0_INT_RAW    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH0_INT_RAW_M  (GDMA_OUT_DSCR_ERR_CH0_INT_RAW_V << GDMA_OUT_DSCR_ERR_CH0_INT_RAW_S)
#define GDMA_OUT_DSCR_ERR_CH0_INT_RAW_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH0_INT_RAW_S  2
/** GDMA_OUT_TOTAL_EOF_CH0_INT_RAW : R/WTC/SS; bitpos: [3]; default: 0;
 *  The raw interrupt status of GDMA_OUT_TOTAL_EOF_CH0_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH0_INT_RAW    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_M  (GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_V << GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_S)
#define GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_S  3
/** GDMA_OUTFIFO_OVF_CH0_INT_RAW : R/WTC/SS; bitpos: [4]; default: 0;
 *  The raw interrupt status of GDMA_OUTFIFO_OVF_CH0_INT.
 */
#define GDMA_OUTFIFO_OVF_CH0_INT_RAW    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH0_INT_RAW_M  (GDMA_OUTFIFO_OVF_CH0_INT_RAW_V << GDMA_OUTFIFO_OVF_CH0_INT_RAW_S)
#define GDMA_OUTFIFO_OVF_CH0_INT_RAW_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH0_INT_RAW_S  4
/** GDMA_OUTFIFO_UDF_CH0_INT_RAW : R/WTC/SS; bitpos: [5]; default: 0;
 *  The raw interrupt status of GDMA_OUTFIFO_UDF_CH0_INT.
 */
#define GDMA_OUTFIFO_UDF_CH0_INT_RAW    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH0_INT_RAW_M  (GDMA_OUTFIFO_UDF_CH0_INT_RAW_V << GDMA_OUTFIFO_UDF_CH0_INT_RAW_S)
#define GDMA_OUTFIFO_UDF_CH0_INT_RAW_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH0_INT_RAW_S  5

/** GDMA_OUT_INT_ST_CH0_REG register
 *  Masked interrupt status of TX channel 0
 */
#define GDMA_OUT_INT_ST_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x34)
/** GDMA_OUT_DONE_CH0_INT_ST : RO; bitpos: [0]; default: 0;
 *  The masked interrupt status of GDMA_OUT_DONE_CH0_INT.
 */
#define GDMA_OUT_DONE_CH0_INT_ST    (BIT(0))
#define GDMA_OUT_DONE_CH0_INT_ST_M  (GDMA_OUT_DONE_CH0_INT_ST_V << GDMA_OUT_DONE_CH0_INT_ST_S)
#define GDMA_OUT_DONE_CH0_INT_ST_V  0x00000001U
#define GDMA_OUT_DONE_CH0_INT_ST_S  0
/** GDMA_OUT_EOF_CH0_INT_ST : RO; bitpos: [1]; default: 0;
 *  The masked interrupt status of GDMA_OUT_EOF_CH0_INT.
 */
#define GDMA_OUT_EOF_CH0_INT_ST    (BIT(1))
#define GDMA_OUT_EOF_CH0_INT_ST_M  (GDMA_OUT_EOF_CH0_INT_ST_V << GDMA_OUT_EOF_CH0_INT_ST_S)
#define GDMA_OUT_EOF_CH0_INT_ST_V  0x00000001U
#define GDMA_OUT_EOF_CH0_INT_ST_S  1
/** GDMA_OUT_DSCR_ERR_CH0_INT_ST : RO; bitpos: [2]; default: 0;
 *  The masked interrupt status of GDMA_OUT_DSCR_ERR_CH0_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH0_INT_ST    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH0_INT_ST_M  (GDMA_OUT_DSCR_ERR_CH0_INT_ST_V << GDMA_OUT_DSCR_ERR_CH0_INT_ST_S)
#define GDMA_OUT_DSCR_ERR_CH0_INT_ST_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH0_INT_ST_S  2
/** GDMA_OUT_TOTAL_EOF_CH0_INT_ST : RO; bitpos: [3]; default: 0;
 *  The masked interrupt status of GDMA_OUT_TOTAL_EOF_CH0_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ST    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ST_M  (GDMA_OUT_TOTAL_EOF_CH0_INT_ST_V << GDMA_OUT_TOTAL_EOF_CH0_INT_ST_S)
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ST_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ST_S  3
/** GDMA_OUTFIFO_OVF_CH0_INT_ST : RO; bitpos: [4]; default: 0;
 *  The masked interrupt status of GDMA_OUTFIFO_OVF_CH0_INT.
 */
#define GDMA_OUTFIFO_OVF_CH0_INT_ST    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH0_INT_ST_M  (GDMA_OUTFIFO_OVF_CH0_INT_ST_V << GDMA_OUTFIFO_OVF_CH0_INT_ST_S)
#define GDMA_OUTFIFO_OVF_CH0_INT_ST_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH0_INT_ST_S  4
/** GDMA_OUTFIFO_UDF_CH0_INT_ST : RO; bitpos: [5]; default: 0;
 *  The masked interrupt status of GDMA_OUTFIFO_UDF_CH0_INT.
 */
#define GDMA_OUTFIFO_UDF_CH0_INT_ST    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH0_INT_ST_M  (GDMA_OUTFIFO_UDF_CH0_INT_ST_V << GDMA_OUTFIFO_UDF_CH0_INT_ST_S)
#define GDMA_OUTFIFO_UDF_CH0_INT_ST_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH0_INT_ST_S  5

/** GDMA_OUT_INT_ENA_CH0_REG register
 *  Interrupt enable bits of TX channel 0
 */
#define GDMA_OUT_INT_ENA_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x38)
/** GDMA_OUT_DONE_CH0_INT_ENA : R/W; bitpos: [0]; default: 0;
 *  Write 1 to enable GDMA_OUT_DONE_CH0_INT.
 */
#define GDMA_OUT_DONE_CH0_INT_ENA    (BIT(0))
#define GDMA_OUT_DONE_CH0_INT_ENA_M  (GDMA_OUT_DONE_CH0_INT_ENA_V << GDMA_OUT_DONE_CH0_INT_ENA_S)
#define GDMA_OUT_DONE_CH0_INT_ENA_V  0x00000001U
#define GDMA_OUT_DONE_CH0_INT_ENA_S  0
/** GDMA_OUT_EOF_CH0_INT_ENA : R/W; bitpos: [1]; default: 0;
 *  Write 1 to enable GDMA_OUT_EOF_CH0_INT.
 */
#define GDMA_OUT_EOF_CH0_INT_ENA    (BIT(1))
#define GDMA_OUT_EOF_CH0_INT_ENA_M  (GDMA_OUT_EOF_CH0_INT_ENA_V << GDMA_OUT_EOF_CH0_INT_ENA_S)
#define GDMA_OUT_EOF_CH0_INT_ENA_V  0x00000001U
#define GDMA_OUT_EOF_CH0_INT_ENA_S  1
/** GDMA_OUT_DSCR_ERR_CH0_INT_ENA : R/W; bitpos: [2]; default: 0;
 *  Write 1 to enable GDMA_OUT_DSCR_ERR_CH0_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH0_INT_ENA    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH0_INT_ENA_M  (GDMA_OUT_DSCR_ERR_CH0_INT_ENA_V << GDMA_OUT_DSCR_ERR_CH0_INT_ENA_S)
#define GDMA_OUT_DSCR_ERR_CH0_INT_ENA_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH0_INT_ENA_S  2
/** GDMA_OUT_TOTAL_EOF_CH0_INT_ENA : R/W; bitpos: [3]; default: 0;
 *  Write 1 to enable GDMA_OUT_TOTAL_EOF_CH0_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ENA    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_M  (GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_V << GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_S)
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_S  3
/** GDMA_OUTFIFO_OVF_CH0_INT_ENA : R/W; bitpos: [4]; default: 0;
 *  Write 1 to enable GDMA_OUTFIFO_OVF_CH0_INT.
 */
#define GDMA_OUTFIFO_OVF_CH0_INT_ENA    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH0_INT_ENA_M  (GDMA_OUTFIFO_OVF_CH0_INT_ENA_V << GDMA_OUTFIFO_OVF_CH0_INT_ENA_S)
#define GDMA_OUTFIFO_OVF_CH0_INT_ENA_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH0_INT_ENA_S  4
/** GDMA_OUTFIFO_UDF_CH0_INT_ENA : R/W; bitpos: [5]; default: 0;
 *  Write 1 to enable GDMA_OUTFIFO_UDF_CH0_INT.
 */
#define GDMA_OUTFIFO_UDF_CH0_INT_ENA    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH0_INT_ENA_M  (GDMA_OUTFIFO_UDF_CH0_INT_ENA_V << GDMA_OUTFIFO_UDF_CH0_INT_ENA_S)
#define GDMA_OUTFIFO_UDF_CH0_INT_ENA_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH0_INT_ENA_S  5

/** GDMA_OUT_INT_CLR_CH0_REG register
 *  Interrupt clear bits of TX channel 0
 */
#define GDMA_OUT_INT_CLR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x3c)
/** GDMA_OUT_DONE_CH0_INT_CLR : WT; bitpos: [0]; default: 0;
 *  Write 1 to clear GDMA_OUT_DONE_CH0_INT.
 */
#define GDMA_OUT_DONE_CH0_INT_CLR    (BIT(0))
#define GDMA_OUT_DONE_CH0_INT_CLR_M  (GDMA_OUT_DONE_CH0_INT_CLR_V << GDMA_OUT_DONE_CH0_INT_CLR_S)
#define GDMA_OUT_DONE_CH0_INT_CLR_V  0x00000001U
#define GDMA_OUT_DONE_CH0_INT_CLR_S  0
/** GDMA_OUT_EOF_CH0_INT_CLR : WT; bitpos: [1]; default: 0;
 *  Write 1 to clear GDMA_OUT_EOF_CH0_INT.
 */
#define GDMA_OUT_EOF_CH0_INT_CLR    (BIT(1))
#define GDMA_OUT_EOF_CH0_INT_CLR_M  (GDMA_OUT_EOF_CH0_INT_CLR_V << GDMA_OUT_EOF_CH0_INT_CLR_S)
#define GDMA_OUT_EOF_CH0_INT_CLR_V  0x00000001U
#define GDMA_OUT_EOF_CH0_INT_CLR_S  1
/** GDMA_OUT_DSCR_ERR_CH0_INT_CLR : WT; bitpos: [2]; default: 0;
 *  Write 1 to clear GDMA_OUT_DSCR_ERR_CH0_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH0_INT_CLR    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH0_INT_CLR_M  (GDMA_OUT_DSCR_ERR_CH0_INT_CLR_V << GDMA_OUT_DSCR_ERR_CH0_INT_CLR_S)
#define GDMA_OUT_DSCR_ERR_CH0_INT_CLR_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH0_INT_CLR_S  2
/** GDMA_OUT_TOTAL_EOF_CH0_INT_CLR : WT; bitpos: [3]; default: 0;
 *  Write 1 to clear GDMA_OUT_TOTAL_EOF_CH0_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH0_INT_CLR    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_M  (GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_V << GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_S)
#define GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_S  3
/** GDMA_OUTFIFO_OVF_CH0_INT_CLR : WT; bitpos: [4]; default: 0;
 *  Write 1 to clear GDMA_OUTFIFO_OVF_CH0_INT.
 */
#define GDMA_OUTFIFO_OVF_CH0_INT_CLR    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH0_INT_CLR_M  (GDMA_OUTFIFO_OVF_CH0_INT_CLR_V << GDMA_OUTFIFO_OVF_CH0_INT_CLR_S)
#define GDMA_OUTFIFO_OVF_CH0_INT_CLR_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH0_INT_CLR_S  4
/** GDMA_OUTFIFO_UDF_CH0_INT_CLR : WT; bitpos: [5]; default: 0;
 *  Write 1 to clear GDMA_OUTFIFO_UDF_CH0_INT.
 */
#define GDMA_OUTFIFO_UDF_CH0_INT_CLR    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH0_INT_CLR_M  (GDMA_OUTFIFO_UDF_CH0_INT_CLR_V << GDMA_OUTFIFO_UDF_CH0_INT_CLR_S)
#define GDMA_OUTFIFO_UDF_CH0_INT_CLR_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH0_INT_CLR_S  5

/** GDMA_OUT_INT_RAW_CH1_REG register
 *  Raw interrupt status of TX channel 0
 */
#define GDMA_OUT_INT_RAW_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x40)
/** GDMA_OUT_DONE_CH1_INT_RAW : R/WTC/SS; bitpos: [0]; default: 0;
 *  The raw interrupt status of GDMA_OUT_DONE_CH1_INT.
 */
#define GDMA_OUT_DONE_CH1_INT_RAW    (BIT(0))
#define GDMA_OUT_DONE_CH1_INT_RAW_M  (GDMA_OUT_DONE_CH1_INT_RAW_V << GDMA_OUT_DONE_CH1_INT_RAW_S)
#define GDMA_OUT_DONE_CH1_INT_RAW_V  0x00000001U
#define GDMA_OUT_DONE_CH1_INT_RAW_S  0
/** GDMA_OUT_EOF_CH1_INT_RAW : R/WTC/SS; bitpos: [1]; default: 0;
 *  The raw interrupt status of GDMA_OUT_EOF_CH1_INT.
 */
#define GDMA_OUT_EOF_CH1_INT_RAW    (BIT(1))
#define GDMA_OUT_EOF_CH1_INT_RAW_M  (GDMA_OUT_EOF_CH1_INT_RAW_V << GDMA_OUT_EOF_CH1_INT_RAW_S)
#define GDMA_OUT_EOF_CH1_INT_RAW_V  0x00000001U
#define GDMA_OUT_EOF_CH1_INT_RAW_S  1
/** GDMA_OUT_DSCR_ERR_CH1_INT_RAW : R/WTC/SS; bitpos: [2]; default: 0;
 *  The raw interrupt status of GDMA_OUT_DSCR_ERR_CH1_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH1_INT_RAW    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH1_INT_RAW_M  (GDMA_OUT_DSCR_ERR_CH1_INT_RAW_V << GDMA_OUT_DSCR_ERR_CH1_INT_RAW_S)
#define GDMA_OUT_DSCR_ERR_CH1_INT_RAW_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH1_INT_RAW_S  2
/** GDMA_OUT_TOTAL_EOF_CH1_INT_RAW : R/WTC/SS; bitpos: [3]; default: 0;
 *  The raw interrupt status of GDMA_OUT_TOTAL_EOF_CH1_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH1_INT_RAW    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_M  (GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_V << GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_S)
#define GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_S  3
/** GDMA_OUTFIFO_OVF_CH1_INT_RAW : R/WTC/SS; bitpos: [4]; default: 0;
 *  The raw interrupt status of GDMA_OUTFIFO_OVF_CH1_INT.
 */
#define GDMA_OUTFIFO_OVF_CH1_INT_RAW    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH1_INT_RAW_M  (GDMA_OUTFIFO_OVF_CH1_INT_RAW_V << GDMA_OUTFIFO_OVF_CH1_INT_RAW_S)
#define GDMA_OUTFIFO_OVF_CH1_INT_RAW_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH1_INT_RAW_S  4
/** GDMA_OUTFIFO_UDF_CH1_INT_RAW : R/WTC/SS; bitpos: [5]; default: 0;
 *  The raw interrupt status of GDMA_OUTFIFO_UDF_CH1_INT.
 */
#define GDMA_OUTFIFO_UDF_CH1_INT_RAW    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH1_INT_RAW_M  (GDMA_OUTFIFO_UDF_CH1_INT_RAW_V << GDMA_OUTFIFO_UDF_CH1_INT_RAW_S)
#define GDMA_OUTFIFO_UDF_CH1_INT_RAW_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH1_INT_RAW_S  5

/** GDMA_OUT_INT_ST_CH1_REG register
 *  Masked interrupt status of TX channel 0
 */
#define GDMA_OUT_INT_ST_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x44)
/** GDMA_OUT_DONE_CH1_INT_ST : RO; bitpos: [0]; default: 0;
 *  The masked interrupt status of GDMA_OUT_DONE_CH1_INT.
 */
#define GDMA_OUT_DONE_CH1_INT_ST    (BIT(0))
#define GDMA_OUT_DONE_CH1_INT_ST_M  (GDMA_OUT_DONE_CH1_INT_ST_V << GDMA_OUT_DONE_CH1_INT_ST_S)
#define GDMA_OUT_DONE_CH1_INT_ST_V  0x00000001U
#define GDMA_OUT_DONE_CH1_INT_ST_S  0
/** GDMA_OUT_EOF_CH1_INT_ST : RO; bitpos: [1]; default: 0;
 *  The masked interrupt status of GDMA_OUT_EOF_CH1_INT.
 */
#define GDMA_OUT_EOF_CH1_INT_ST    (BIT(1))
#define GDMA_OUT_EOF_CH1_INT_ST_M  (GDMA_OUT_EOF_CH1_INT_ST_V << GDMA_OUT_EOF_CH1_INT_ST_S)
#define GDMA_OUT_EOF_CH1_INT_ST_V  0x00000001U
#define GDMA_OUT_EOF_CH1_INT_ST_S  1
/** GDMA_OUT_DSCR_ERR_CH1_INT_ST : RO; bitpos: [2]; default: 0;
 *  The masked interrupt status of GDMA_OUT_DSCR_ERR_CH1_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH1_INT_ST    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH1_INT_ST_M  (GDMA_OUT_DSCR_ERR_CH1_INT_ST_V << GDMA_OUT_DSCR_ERR_CH1_INT_ST_S)
#define GDMA_OUT_DSCR_ERR_CH1_INT_ST_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH1_INT_ST_S  2
/** GDMA_OUT_TOTAL_EOF_CH1_INT_ST : RO; bitpos: [3]; default: 0;
 *  The masked interrupt status of GDMA_OUT_TOTAL_EOF_CH1_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ST    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ST_M  (GDMA_OUT_TOTAL_EOF_CH1_INT_ST_V << GDMA_OUT_TOTAL_EOF_CH1_INT_ST_S)
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ST_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ST_S  3
/** GDMA_OUTFIFO_OVF_CH1_INT_ST : RO; bitpos: [4]; default: 0;
 *  The masked interrupt status of GDMA_OUTFIFO_OVF_CH1_INT.
 */
#define GDMA_OUTFIFO_OVF_CH1_INT_ST    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH1_INT_ST_M  (GDMA_OUTFIFO_OVF_CH1_INT_ST_V << GDMA_OUTFIFO_OVF_CH1_INT_ST_S)
#define GDMA_OUTFIFO_OVF_CH1_INT_ST_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH1_INT_ST_S  4
/** GDMA_OUTFIFO_UDF_CH1_INT_ST : RO; bitpos: [5]; default: 0;
 *  The masked interrupt status of GDMA_OUTFIFO_UDF_CH1_INT.
 */
#define GDMA_OUTFIFO_UDF_CH1_INT_ST    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH1_INT_ST_M  (GDMA_OUTFIFO_UDF_CH1_INT_ST_V << GDMA_OUTFIFO_UDF_CH1_INT_ST_S)
#define GDMA_OUTFIFO_UDF_CH1_INT_ST_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH1_INT_ST_S  5

/** GDMA_OUT_INT_ENA_CH1_REG register
 *  Interrupt enable bits of TX channel 0
 */
#define GDMA_OUT_INT_ENA_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x48)
/** GDMA_OUT_DONE_CH1_INT_ENA : R/W; bitpos: [0]; default: 0;
 *  Write 1 to enable GDMA_OUT_DONE_CH1_INT.
 */
#define GDMA_OUT_DONE_CH1_INT_ENA    (BIT(0))
#define GDMA_OUT_DONE_CH1_INT_ENA_M  (GDMA_OUT_DONE_CH1_INT_ENA_V << GDMA_OUT_DONE_CH1_INT_ENA_S)
#define GDMA_OUT_DONE_CH1_INT_ENA_V  0x00000001U
#define GDMA_OUT_DONE_CH1_INT_ENA_S  0
/** GDMA_OUT_EOF_CH1_INT_ENA : R/W; bitpos: [1]; default: 0;
 *  Write 1 to enable GDMA_OUT_EOF_CH1_INT.
 */
#define GDMA_OUT_EOF_CH1_INT_ENA    (BIT(1))
#define GDMA_OUT_EOF_CH1_INT_ENA_M  (GDMA_OUT_EOF_CH1_INT_ENA_V << GDMA_OUT_EOF_CH1_INT_ENA_S)
#define GDMA_OUT_EOF_CH1_INT_ENA_V  0x00000001U
#define GDMA_OUT_EOF_CH1_INT_ENA_S  1
/** GDMA_OUT_DSCR_ERR_CH1_INT_ENA : R/W; bitpos: [2]; default: 0;
 *  Write 1 to enable GDMA_OUT_DSCR_ERR_CH1_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH1_INT_ENA    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH1_INT_ENA_M  (GDMA_OUT_DSCR_ERR_CH1_INT_ENA_V << GDMA_OUT_DSCR_ERR_CH1_INT_ENA_S)
#define GDMA_OUT_DSCR_ERR_CH1_INT_ENA_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH1_INT_ENA_S  2
/** GDMA_OUT_TOTAL_EOF_CH1_INT_ENA : R/W; bitpos: [3]; default: 0;
 *  Write 1 to enable GDMA_OUT_TOTAL_EOF_CH1_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ENA    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_M  (GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_V << GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_S)
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_S  3
/** GDMA_OUTFIFO_OVF_CH1_INT_ENA : R/W; bitpos: [4]; default: 0;
 *  Write 1 to enable GDMA_OUTFIFO_OVF_CH1_INT.
 */
#define GDMA_OUTFIFO_OVF_CH1_INT_ENA    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH1_INT_ENA_M  (GDMA_OUTFIFO_OVF_CH1_INT_ENA_V << GDMA_OUTFIFO_OVF_CH1_INT_ENA_S)
#define GDMA_OUTFIFO_OVF_CH1_INT_ENA_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH1_INT_ENA_S  4
/** GDMA_OUTFIFO_UDF_CH1_INT_ENA : R/W; bitpos: [5]; default: 0;
 *  Write 1 to enable GDMA_OUTFIFO_UDF_CH1_INT.
 */
#define GDMA_OUTFIFO_UDF_CH1_INT_ENA    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH1_INT_ENA_M  (GDMA_OUTFIFO_UDF_CH1_INT_ENA_V << GDMA_OUTFIFO_UDF_CH1_INT_ENA_S)
#define GDMA_OUTFIFO_UDF_CH1_INT_ENA_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH1_INT_ENA_S  5

/** GDMA_OUT_INT_CLR_CH1_REG register
 *  Interrupt clear bits of TX channel 0
 */
#define GDMA_OUT_INT_CLR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x4c)
/** GDMA_OUT_DONE_CH1_INT_CLR : WT; bitpos: [0]; default: 0;
 *  Write 1 to clear GDMA_OUT_DONE_CH1_INT.
 */
#define GDMA_OUT_DONE_CH1_INT_CLR    (BIT(0))
#define GDMA_OUT_DONE_CH1_INT_CLR_M  (GDMA_OUT_DONE_CH1_INT_CLR_V << GDMA_OUT_DONE_CH1_INT_CLR_S)
#define GDMA_OUT_DONE_CH1_INT_CLR_V  0x00000001U
#define GDMA_OUT_DONE_CH1_INT_CLR_S  0
/** GDMA_OUT_EOF_CH1_INT_CLR : WT; bitpos: [1]; default: 0;
 *  Write 1 to clear GDMA_OUT_EOF_CH1_INT.
 */
#define GDMA_OUT_EOF_CH1_INT_CLR    (BIT(1))
#define GDMA_OUT_EOF_CH1_INT_CLR_M  (GDMA_OUT_EOF_CH1_INT_CLR_V << GDMA_OUT_EOF_CH1_INT_CLR_S)
#define GDMA_OUT_EOF_CH1_INT_CLR_V  0x00000001U
#define GDMA_OUT_EOF_CH1_INT_CLR_S  1
/** GDMA_OUT_DSCR_ERR_CH1_INT_CLR : WT; bitpos: [2]; default: 0;
 *  Write 1 to clear GDMA_OUT_DSCR_ERR_CH1_INT.
 */
#define GDMA_OUT_DSCR_ERR_CH1_INT_CLR    (BIT(2))
#define GDMA_OUT_DSCR_ERR_CH1_INT_CLR_M  (GDMA_OUT_DSCR_ERR_CH1_INT_CLR_V << GDMA_OUT_DSCR_ERR_CH1_INT_CLR_S)
#define GDMA_OUT_DSCR_ERR_CH1_INT_CLR_V  0x00000001U
#define GDMA_OUT_DSCR_ERR_CH1_INT_CLR_S  2
/** GDMA_OUT_TOTAL_EOF_CH1_INT_CLR : WT; bitpos: [3]; default: 0;
 *  Write 1 to clear GDMA_OUT_TOTAL_EOF_CH1_INT.
 */
#define GDMA_OUT_TOTAL_EOF_CH1_INT_CLR    (BIT(3))
#define GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_M  (GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_V << GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_S)
#define GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_V  0x00000001U
#define GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_S  3
/** GDMA_OUTFIFO_OVF_CH1_INT_CLR : WT; bitpos: [4]; default: 0;
 *  Write 1 to clear GDMA_OUTFIFO_OVF_CH1_INT.
 */
#define GDMA_OUTFIFO_OVF_CH1_INT_CLR    (BIT(4))
#define GDMA_OUTFIFO_OVF_CH1_INT_CLR_M  (GDMA_OUTFIFO_OVF_CH1_INT_CLR_V << GDMA_OUTFIFO_OVF_CH1_INT_CLR_S)
#define GDMA_OUTFIFO_OVF_CH1_INT_CLR_V  0x00000001U
#define GDMA_OUTFIFO_OVF_CH1_INT_CLR_S  4
/** GDMA_OUTFIFO_UDF_CH1_INT_CLR : WT; bitpos: [5]; default: 0;
 *  Write 1 to clear GDMA_OUTFIFO_UDF_CH1_INT.
 */
#define GDMA_OUTFIFO_UDF_CH1_INT_CLR    (BIT(5))
#define GDMA_OUTFIFO_UDF_CH1_INT_CLR_M  (GDMA_OUTFIFO_UDF_CH1_INT_CLR_V << GDMA_OUTFIFO_UDF_CH1_INT_CLR_S)
#define GDMA_OUTFIFO_UDF_CH1_INT_CLR_V  0x00000001U
#define GDMA_OUTFIFO_UDF_CH1_INT_CLR_S  5

/** GDMA_AHB_TEST_REG register
 *  reserved
 */
#define GDMA_AHB_TEST_REG (DR_REG_AHB_GDMA_BASE + 0x60)
/** GDMA_AHB_TESTMODE : R/W; bitpos: [2:0]; default: 0;
 *  reserved
 */
#define GDMA_AHB_TESTMODE    0x00000007U
#define GDMA_AHB_TESTMODE_M  (GDMA_AHB_TESTMODE_V << GDMA_AHB_TESTMODE_S)
#define GDMA_AHB_TESTMODE_V  0x00000007U
#define GDMA_AHB_TESTMODE_S  0
/** GDMA_AHB_TESTADDR : R/W; bitpos: [5:4]; default: 0;
 *  reserved
 */
#define GDMA_AHB_TESTADDR    0x00000003U
#define GDMA_AHB_TESTADDR_M  (GDMA_AHB_TESTADDR_V << GDMA_AHB_TESTADDR_S)
#define GDMA_AHB_TESTADDR_V  0x00000003U
#define GDMA_AHB_TESTADDR_S  4

/** GDMA_MISC_CONF_REG register
 *  Miscellaneous register
 */
#define GDMA_MISC_CONF_REG (DR_REG_AHB_GDMA_BASE + 0x64)
/** GDMA_AHBM_RST_INTER : R/W; bitpos: [0]; default: 0;
 *  Write 1 and then 0 to reset the internal AHB FSM.
 */
#define GDMA_AHBM_RST_INTER    (BIT(0))
#define GDMA_AHBM_RST_INTER_M  (GDMA_AHBM_RST_INTER_V << GDMA_AHBM_RST_INTER_S)
#define GDMA_AHBM_RST_INTER_V  0x00000001U
#define GDMA_AHBM_RST_INTER_S  0
/** GDMA_ARB_PRI_DIS : R/W; bitpos: [2]; default: 0;
 *  Configures whether or not to disable the fixed-priority channel arbitration.\\0:
 *  Enable\\1: Disable\\
 */
#define GDMA_ARB_PRI_DIS    (BIT(2))
#define GDMA_ARB_PRI_DIS_M  (GDMA_ARB_PRI_DIS_V << GDMA_ARB_PRI_DIS_S)
#define GDMA_ARB_PRI_DIS_V  0x00000001U
#define GDMA_ARB_PRI_DIS_S  2
/** GDMA_CLK_EN : R/W; bitpos: [3]; default: 0;
 *  Configures clock gating.\\0: Support clock only when the application writes
 *  registers.\\ 1: Always force the clock on for registers.\\
 */
#define GDMA_CLK_EN    (BIT(3))
#define GDMA_CLK_EN_M  (GDMA_CLK_EN_V << GDMA_CLK_EN_S)
#define GDMA_CLK_EN_V  0x00000001U
#define GDMA_CLK_EN_S  3

/** GDMA_DATE_REG register
 *  Version control register
 */
#define GDMA_DATE_REG (DR_REG_AHB_GDMA_BASE + 0x68)
/** GDMA_DATE : R/W; bitpos: [31:0]; default: 36770448;
 *  Version control register.
 */
#define GDMA_DATE    0xFFFFFFFFU
#define GDMA_DATE_M  (GDMA_DATE_V << GDMA_DATE_S)
#define GDMA_DATE_V  0xFFFFFFFFU
#define GDMA_DATE_S  0

/** GDMA_IN_CONF0_CH0_REG register
 *  Configuration register 0 of RX channel 0
 */
#define GDMA_IN_CONF0_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x70)
/** GDMA_IN_RST_CH0 : R/W; bitpos: [0]; default: 0;
 *  Write 1 and then 0 to reset AHB_DMA channel 0 RX FSM and RX FIFO pointer.
 */
#define GDMA_IN_RST_CH0    (BIT(0))
#define GDMA_IN_RST_CH0_M  (GDMA_IN_RST_CH0_V << GDMA_IN_RST_CH0_S)
#define GDMA_IN_RST_CH0_V  0x00000001U
#define GDMA_IN_RST_CH0_S  0
/** GDMA_IN_LOOP_TEST_CH0 : R/W; bitpos: [1]; default: 0;
 *  Reserved.
 */
#define GDMA_IN_LOOP_TEST_CH0    (BIT(1))
#define GDMA_IN_LOOP_TEST_CH0_M  (GDMA_IN_LOOP_TEST_CH0_V << GDMA_IN_LOOP_TEST_CH0_S)
#define GDMA_IN_LOOP_TEST_CH0_V  0x00000001U
#define GDMA_IN_LOOP_TEST_CH0_S  1
/** GDMA_INDSCR_BURST_EN_CH0 : R/W; bitpos: [2]; default: 0;
 *  Configures whether or not to enable INCR burst transfer for RX channel 0 to read
 *  descriptors.\\0: Disable\\1: Enable\\
 */
#define GDMA_INDSCR_BURST_EN_CH0    (BIT(2))
#define GDMA_INDSCR_BURST_EN_CH0_M  (GDMA_INDSCR_BURST_EN_CH0_V << GDMA_INDSCR_BURST_EN_CH0_S)
#define GDMA_INDSCR_BURST_EN_CH0_V  0x00000001U
#define GDMA_INDSCR_BURST_EN_CH0_S  2
/** GDMA_MEM_TRANS_EN_CH0 : R/W; bitpos: [4]; default: 0;
 *  Configures whether or not to enable memory-to-memory data transfer.\\0: Disable\\1:
 *  Enable\\
 */
#define GDMA_MEM_TRANS_EN_CH0    (BIT(4))
#define GDMA_MEM_TRANS_EN_CH0_M  (GDMA_MEM_TRANS_EN_CH0_V << GDMA_MEM_TRANS_EN_CH0_S)
#define GDMA_MEM_TRANS_EN_CH0_V  0x00000001U
#define GDMA_MEM_TRANS_EN_CH0_S  4
/** GDMA_IN_ETM_EN_CH0 : R/W; bitpos: [5]; default: 0;
 *  Configures whether or not to enable ETM control for RX channel0.\\0: Disable\\1:
 *  Enable\\
 */
#define GDMA_IN_ETM_EN_CH0    (BIT(5))
#define GDMA_IN_ETM_EN_CH0_M  (GDMA_IN_ETM_EN_CH0_V << GDMA_IN_ETM_EN_CH0_S)
#define GDMA_IN_ETM_EN_CH0_V  0x00000001U
#define GDMA_IN_ETM_EN_CH0_S  5
/** GDMA_IN_DATA_BURST_MODE_SEL_CH0 : R/W; bitpos: [7:6]; default: 0;
 *  Configures max burst size for Rx channel0.\\2'b00: single\\ 2'b01: incr4\\ 2'b10:
 *  incr8\\ 2'b11: incr16\\
 */
#define GDMA_IN_DATA_BURST_MODE_SEL_CH0    0x00000003U
#define GDMA_IN_DATA_BURST_MODE_SEL_CH0_M  (GDMA_IN_DATA_BURST_MODE_SEL_CH0_V << GDMA_IN_DATA_BURST_MODE_SEL_CH0_S)
#define GDMA_IN_DATA_BURST_MODE_SEL_CH0_V  0x00000003U
#define GDMA_IN_DATA_BURST_MODE_SEL_CH0_S  6

/** GDMA_IN_CONF1_CH0_REG register
 *  Configuration register 1 of RX channel 0
 */
#define GDMA_IN_CONF1_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x74)
/** GDMA_IN_CHECK_OWNER_CH0 : R/W; bitpos: [12]; default: 0;
 *  Configures whether or not to enable owner bit check for RX channel 0.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_IN_CHECK_OWNER_CH0    (BIT(12))
#define GDMA_IN_CHECK_OWNER_CH0_M  (GDMA_IN_CHECK_OWNER_CH0_V << GDMA_IN_CHECK_OWNER_CH0_S)
#define GDMA_IN_CHECK_OWNER_CH0_V  0x00000001U
#define GDMA_IN_CHECK_OWNER_CH0_S  12

/** GDMA_INFIFO_STATUS_CH0_REG register
 *  Receive FIFO status of RX channel 0
 */
#define GDMA_INFIFO_STATUS_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x78)
/** GDMA_INFIFO_FULL_CH0 : RO; bitpos: [0]; default: 1;
 *  Represents whether or not L1 RX FIFO is full.\\0: Not Full\\1: Full\\
 */
#define GDMA_INFIFO_FULL_CH0    (BIT(0))
#define GDMA_INFIFO_FULL_CH0_M  (GDMA_INFIFO_FULL_CH0_V << GDMA_INFIFO_FULL_CH0_S)
#define GDMA_INFIFO_FULL_CH0_V  0x00000001U
#define GDMA_INFIFO_FULL_CH0_S  0
/** GDMA_INFIFO_EMPTY_CH0 : RO; bitpos: [1]; default: 1;
 *  Represents whether or not  L1 RX FIFO is empty.\\0: Not empty\\1: Empty\\
 */
#define GDMA_INFIFO_EMPTY_CH0    (BIT(1))
#define GDMA_INFIFO_EMPTY_CH0_M  (GDMA_INFIFO_EMPTY_CH0_V << GDMA_INFIFO_EMPTY_CH0_S)
#define GDMA_INFIFO_EMPTY_CH0_V  0x00000001U
#define GDMA_INFIFO_EMPTY_CH0_S  1
/** GDMA_INFIFO_CNT_CH0 : RO; bitpos: [14:8]; default: 0;
 *  Represents the number of data bytes in L1 RX FIFO for RX channel 0.
 */
#define GDMA_INFIFO_CNT_CH0    0x0000007FU
#define GDMA_INFIFO_CNT_CH0_M  (GDMA_INFIFO_CNT_CH0_V << GDMA_INFIFO_CNT_CH0_S)
#define GDMA_INFIFO_CNT_CH0_V  0x0000007FU
#define GDMA_INFIFO_CNT_CH0_S  8
/** GDMA_IN_REMAIN_UNDER_1B_CH0 : RO; bitpos: [23]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_1B_CH0    (BIT(23))
#define GDMA_IN_REMAIN_UNDER_1B_CH0_M  (GDMA_IN_REMAIN_UNDER_1B_CH0_V << GDMA_IN_REMAIN_UNDER_1B_CH0_S)
#define GDMA_IN_REMAIN_UNDER_1B_CH0_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_1B_CH0_S  23
/** GDMA_IN_REMAIN_UNDER_2B_CH0 : RO; bitpos: [24]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_2B_CH0    (BIT(24))
#define GDMA_IN_REMAIN_UNDER_2B_CH0_M  (GDMA_IN_REMAIN_UNDER_2B_CH0_V << GDMA_IN_REMAIN_UNDER_2B_CH0_S)
#define GDMA_IN_REMAIN_UNDER_2B_CH0_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_2B_CH0_S  24
/** GDMA_IN_REMAIN_UNDER_3B_CH0 : RO; bitpos: [25]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_3B_CH0    (BIT(25))
#define GDMA_IN_REMAIN_UNDER_3B_CH0_M  (GDMA_IN_REMAIN_UNDER_3B_CH0_V << GDMA_IN_REMAIN_UNDER_3B_CH0_S)
#define GDMA_IN_REMAIN_UNDER_3B_CH0_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_3B_CH0_S  25
/** GDMA_IN_REMAIN_UNDER_4B_CH0 : RO; bitpos: [26]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_4B_CH0    (BIT(26))
#define GDMA_IN_REMAIN_UNDER_4B_CH0_M  (GDMA_IN_REMAIN_UNDER_4B_CH0_V << GDMA_IN_REMAIN_UNDER_4B_CH0_S)
#define GDMA_IN_REMAIN_UNDER_4B_CH0_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_4B_CH0_S  26
/** GDMA_IN_BUF_HUNGRY_CH0 : RO; bitpos: [27]; default: 0;
 *  reserved
 */
#define GDMA_IN_BUF_HUNGRY_CH0    (BIT(27))
#define GDMA_IN_BUF_HUNGRY_CH0_M  (GDMA_IN_BUF_HUNGRY_CH0_V << GDMA_IN_BUF_HUNGRY_CH0_S)
#define GDMA_IN_BUF_HUNGRY_CH0_V  0x00000001U
#define GDMA_IN_BUF_HUNGRY_CH0_S  27

/** GDMA_IN_POP_CH0_REG register
 *  Pop control register of RX channel 0
 */
#define GDMA_IN_POP_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x7c)
/** GDMA_INFIFO_RDATA_CH0 : RO; bitpos: [11:0]; default: 2048;
 *  Represents the data popped from AHB_DMA FIFO.
 */
#define GDMA_INFIFO_RDATA_CH0    0x00000FFFU
#define GDMA_INFIFO_RDATA_CH0_M  (GDMA_INFIFO_RDATA_CH0_V << GDMA_INFIFO_RDATA_CH0_S)
#define GDMA_INFIFO_RDATA_CH0_V  0x00000FFFU
#define GDMA_INFIFO_RDATA_CH0_S  0
/** GDMA_INFIFO_POP_CH0 : WT; bitpos: [12]; default: 0;
 *  Configures whether or not to pop data from AHB_DMA FIFO.\\0: Invalid. No effect\\1:
 *  Pop\\
 */
#define GDMA_INFIFO_POP_CH0    (BIT(12))
#define GDMA_INFIFO_POP_CH0_M  (GDMA_INFIFO_POP_CH0_V << GDMA_INFIFO_POP_CH0_S)
#define GDMA_INFIFO_POP_CH0_V  0x00000001U
#define GDMA_INFIFO_POP_CH0_S  12

/** GDMA_IN_LINK_CH0_REG register
 *  Linked list descriptor configuration and control register of RX channel 0
 */
#define GDMA_IN_LINK_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x80)
/** GDMA_INLINK_AUTO_RET_CH0 : R/W; bitpos: [0]; default: 1;
 *  Configures whether or not to return to current receive descriptor's address when
 *  there are some errors in current receiving data.\\0: Not return\\1: Return\\
 */
#define GDMA_INLINK_AUTO_RET_CH0    (BIT(0))
#define GDMA_INLINK_AUTO_RET_CH0_M  (GDMA_INLINK_AUTO_RET_CH0_V << GDMA_INLINK_AUTO_RET_CH0_S)
#define GDMA_INLINK_AUTO_RET_CH0_V  0x00000001U
#define GDMA_INLINK_AUTO_RET_CH0_S  0
/** GDMA_INLINK_STOP_CH0 : WT; bitpos: [1]; default: 0;
 *  Configures whether or not to stop AHB_DMA's RX channel 0 from receiving data.\\0:
 *  Invalid. No effect\\1: Stop\\
 */
#define GDMA_INLINK_STOP_CH0    (BIT(1))
#define GDMA_INLINK_STOP_CH0_M  (GDMA_INLINK_STOP_CH0_V << GDMA_INLINK_STOP_CH0_S)
#define GDMA_INLINK_STOP_CH0_V  0x00000001U
#define GDMA_INLINK_STOP_CH0_S  1
/** GDMA_INLINK_START_CH0 : WT; bitpos: [2]; default: 0;
 *  Configures whether or not to enable AHB_DMA's RX channel 0 for data transfer.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_INLINK_START_CH0    (BIT(2))
#define GDMA_INLINK_START_CH0_M  (GDMA_INLINK_START_CH0_V << GDMA_INLINK_START_CH0_S)
#define GDMA_INLINK_START_CH0_V  0x00000001U
#define GDMA_INLINK_START_CH0_S  2
/** GDMA_INLINK_RESTART_CH0 : WT; bitpos: [3]; default: 0;
 *  Configures whether or not to restart RX channel 0 for AHB_DMA transfer.\\0:
 *  Invalid. No effect\\1: Restart\\
 */
#define GDMA_INLINK_RESTART_CH0    (BIT(3))
#define GDMA_INLINK_RESTART_CH0_M  (GDMA_INLINK_RESTART_CH0_V << GDMA_INLINK_RESTART_CH0_S)
#define GDMA_INLINK_RESTART_CH0_V  0x00000001U
#define GDMA_INLINK_RESTART_CH0_S  3
/** GDMA_INLINK_PARK_CH0 : RO; bitpos: [4]; default: 1;
 *  Represents the status of the receive descriptor's FSM.\\0: Running\\1: Idle\\
 */
#define GDMA_INLINK_PARK_CH0    (BIT(4))
#define GDMA_INLINK_PARK_CH0_M  (GDMA_INLINK_PARK_CH0_V << GDMA_INLINK_PARK_CH0_S)
#define GDMA_INLINK_PARK_CH0_V  0x00000001U
#define GDMA_INLINK_PARK_CH0_S  4

/** GDMA_IN_STATE_CH0_REG register
 *  Receive status of RX channel 0
 */
#define GDMA_IN_STATE_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x84)
/** GDMA_INLINK_DSCR_ADDR_CH0 : RO; bitpos: [17:0]; default: 0;
 *  Represents the address of the lower 18 bits of the next receive descriptor to be
 *  processed.
 */
#define GDMA_INLINK_DSCR_ADDR_CH0    0x0003FFFFU
#define GDMA_INLINK_DSCR_ADDR_CH0_M  (GDMA_INLINK_DSCR_ADDR_CH0_V << GDMA_INLINK_DSCR_ADDR_CH0_S)
#define GDMA_INLINK_DSCR_ADDR_CH0_V  0x0003FFFFU
#define GDMA_INLINK_DSCR_ADDR_CH0_S  0
/** GDMA_IN_DSCR_STATE_CH0 : RO; bitpos: [19:18]; default: 0;
 *  reserved
 */
#define GDMA_IN_DSCR_STATE_CH0    0x00000003U
#define GDMA_IN_DSCR_STATE_CH0_M  (GDMA_IN_DSCR_STATE_CH0_V << GDMA_IN_DSCR_STATE_CH0_S)
#define GDMA_IN_DSCR_STATE_CH0_V  0x00000003U
#define GDMA_IN_DSCR_STATE_CH0_S  18
/** GDMA_IN_STATE_CH0 : RO; bitpos: [22:20]; default: 0;
 *  reserved
 */
#define GDMA_IN_STATE_CH0    0x00000007U
#define GDMA_IN_STATE_CH0_M  (GDMA_IN_STATE_CH0_V << GDMA_IN_STATE_CH0_S)
#define GDMA_IN_STATE_CH0_V  0x00000007U
#define GDMA_IN_STATE_CH0_S  20

/** GDMA_IN_SUC_EOF_DES_ADDR_CH0_REG register
 *  Receive descriptor address when EOF occurs on RX channel 0
 */
#define GDMA_IN_SUC_EOF_DES_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x88)
/** GDMA_IN_SUC_EOF_DES_ADDR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the receive descriptor when the EOF bit in this
 *  descriptor is 1.
 */
#define GDMA_IN_SUC_EOF_DES_ADDR_CH0    0xFFFFFFFFU
#define GDMA_IN_SUC_EOF_DES_ADDR_CH0_M  (GDMA_IN_SUC_EOF_DES_ADDR_CH0_V << GDMA_IN_SUC_EOF_DES_ADDR_CH0_S)
#define GDMA_IN_SUC_EOF_DES_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_IN_SUC_EOF_DES_ADDR_CH0_S  0

/** GDMA_IN_ERR_EOF_DES_ADDR_CH0_REG register
 *  Receive descriptor address when errors occur of RX channel 0
 */
#define GDMA_IN_ERR_EOF_DES_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x8c)
/** GDMA_IN_ERR_EOF_DES_ADDR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the receive descriptor when there are some errors in the
 *  currently received data.
 */
#define GDMA_IN_ERR_EOF_DES_ADDR_CH0    0xFFFFFFFFU
#define GDMA_IN_ERR_EOF_DES_ADDR_CH0_M  (GDMA_IN_ERR_EOF_DES_ADDR_CH0_V << GDMA_IN_ERR_EOF_DES_ADDR_CH0_S)
#define GDMA_IN_ERR_EOF_DES_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_IN_ERR_EOF_DES_ADDR_CH0_S  0

/** GDMA_IN_DSCR_CH0_REG register
 *  Current receive descriptor address of RX channel 0
 */
#define GDMA_IN_DSCR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x90)
/** GDMA_INLINK_DSCR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the next receive descriptor x+1 pointed by the current
 *  receive descriptor that has already been fetched.
 */
#define GDMA_INLINK_DSCR_CH0    0xFFFFFFFFU
#define GDMA_INLINK_DSCR_CH0_M  (GDMA_INLINK_DSCR_CH0_V << GDMA_INLINK_DSCR_CH0_S)
#define GDMA_INLINK_DSCR_CH0_V  0xFFFFFFFFU
#define GDMA_INLINK_DSCR_CH0_S  0

/** GDMA_IN_DSCR_BF0_CH0_REG register
 *  The last receive descriptor address of RX channel 0
 */
#define GDMA_IN_DSCR_BF0_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x94)
/** GDMA_INLINK_DSCR_BF0_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the current receive descriptor x that has already been
 *  fetched.
 */
#define GDMA_INLINK_DSCR_BF0_CH0    0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF0_CH0_M  (GDMA_INLINK_DSCR_BF0_CH0_V << GDMA_INLINK_DSCR_BF0_CH0_S)
#define GDMA_INLINK_DSCR_BF0_CH0_V  0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF0_CH0_S  0

/** GDMA_IN_DSCR_BF1_CH0_REG register
 *  The second-to-last receive descriptor address of RX channel 0
 */
#define GDMA_IN_DSCR_BF1_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x98)
/** GDMA_INLINK_DSCR_BF1_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the previous receive descriptor x-1 that has already been
 *  fetched.
 */
#define GDMA_INLINK_DSCR_BF1_CH0    0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF1_CH0_M  (GDMA_INLINK_DSCR_BF1_CH0_V << GDMA_INLINK_DSCR_BF1_CH0_S)
#define GDMA_INLINK_DSCR_BF1_CH0_V  0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF1_CH0_S  0

/** GDMA_IN_PRI_CH0_REG register
 *  Priority register of RX channel 0
 */
#define GDMA_IN_PRI_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x9c)
/** GDMA_RX_PRI_CH0 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the priority of RX channel 0.The larger of the value, the higher of the
 *  priority.
 */
#define GDMA_RX_PRI_CH0    0x0000000FU
#define GDMA_RX_PRI_CH0_M  (GDMA_RX_PRI_CH0_V << GDMA_RX_PRI_CH0_S)
#define GDMA_RX_PRI_CH0_V  0x0000000FU
#define GDMA_RX_PRI_CH0_S  0

/** GDMA_IN_PERI_SEL_CH0_REG register
 *  Peripheral selection register of RX channel 0
 */
#define GDMA_IN_PERI_SEL_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xa0)
/** GDMA_PERI_IN_SEL_CH0 : R/W; bitpos: [5:0]; default: 63;
 *  Configures the peripheral connected to RX channel 0.\\ 0: Dummy\\ 1: SPI2\\ 2:
 *  UHCI0\\ 3: I2S0\\ 4: Dummy\\ 5: Dummy\\ 6: AES\\ 7: SHA\\ 8: ADC_DAC\\ 9: PARL_IO\\
 *  10: Dummy\\ 11~15: Dummy\\
 */
#define GDMA_PERI_IN_SEL_CH0    0x0000003FU
#define GDMA_PERI_IN_SEL_CH0_M  (GDMA_PERI_IN_SEL_CH0_V << GDMA_PERI_IN_SEL_CH0_S)
#define GDMA_PERI_IN_SEL_CH0_V  0x0000003FU
#define GDMA_PERI_IN_SEL_CH0_S  0

/** GDMA_IN_DONE_DES_ADDR_CH0_REG register
 *  RX_done Inlink descriptor address of RX channel 0
 */
#define GDMA_IN_DONE_DES_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xb0)
/** GDMA_IN_DONE_DES_ADDR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the inlink descriptor when  this descriptor is completed .
 */
#define GDMA_IN_DONE_DES_ADDR_CH0    0xFFFFFFFFU
#define GDMA_IN_DONE_DES_ADDR_CH0_M  (GDMA_IN_DONE_DES_ADDR_CH0_V << GDMA_IN_DONE_DES_ADDR_CH0_S)
#define GDMA_IN_DONE_DES_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_IN_DONE_DES_ADDR_CH0_S  0

/** GDMA_OUT_CONF0_CH0_REG register
 *  Configuration register 0 of TX channel 0
 */
#define GDMA_OUT_CONF0_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xd0)
/** GDMA_OUT_RST_CH0 : R/W; bitpos: [0]; default: 0;
 *  Configures the reset state of AHB_DMA channel 0 TX FSM and TX FIFO pointer.\\0:
 *  Release reset\\1: Reset\\
 */
#define GDMA_OUT_RST_CH0    (BIT(0))
#define GDMA_OUT_RST_CH0_M  (GDMA_OUT_RST_CH0_V << GDMA_OUT_RST_CH0_S)
#define GDMA_OUT_RST_CH0_V  0x00000001U
#define GDMA_OUT_RST_CH0_S  0
/** GDMA_OUT_LOOP_TEST_CH0 : R/W; bitpos: [1]; default: 0;
 *  Reserved.
 */
#define GDMA_OUT_LOOP_TEST_CH0    (BIT(1))
#define GDMA_OUT_LOOP_TEST_CH0_M  (GDMA_OUT_LOOP_TEST_CH0_V << GDMA_OUT_LOOP_TEST_CH0_S)
#define GDMA_OUT_LOOP_TEST_CH0_V  0x00000001U
#define GDMA_OUT_LOOP_TEST_CH0_S  1
/** GDMA_OUT_AUTO_WRBACK_CH0 : R/W; bitpos: [2]; default: 0;
 *  Configures whether or not to enable automatic outlink write-back when all the data
 *  in TX FIFO has been transmitted.\\0: Disable\\1: Enable\\
 */
#define GDMA_OUT_AUTO_WRBACK_CH0    (BIT(2))
#define GDMA_OUT_AUTO_WRBACK_CH0_M  (GDMA_OUT_AUTO_WRBACK_CH0_V << GDMA_OUT_AUTO_WRBACK_CH0_S)
#define GDMA_OUT_AUTO_WRBACK_CH0_V  0x00000001U
#define GDMA_OUT_AUTO_WRBACK_CH0_S  2
/** GDMA_OUT_EOF_MODE_CH0 : R/W; bitpos: [3]; default: 1;
 *  Configures when to generate EOF flag.\\0: EOF flag for TX channel 0 is generated
 *  when data to be transmitted has been pushed into FIFO in AHB_DMA.\\ 1: EOF flag for
 *  TX channel 0 is generated when data to be transmitted has been popped from FIFO in
 *  AHB_DMA.\\
 */
#define GDMA_OUT_EOF_MODE_CH0    (BIT(3))
#define GDMA_OUT_EOF_MODE_CH0_M  (GDMA_OUT_EOF_MODE_CH0_V << GDMA_OUT_EOF_MODE_CH0_S)
#define GDMA_OUT_EOF_MODE_CH0_V  0x00000001U
#define GDMA_OUT_EOF_MODE_CH0_S  3
/** GDMA_OUTDSCR_BURST_EN_CH0 : R/W; bitpos: [4]; default: 0;
 *  Configures whether or not to enable INCR burst transfer for TX channel 0 reading
 *  descriptors.\\0: Disable\\1: Enable\\
 */
#define GDMA_OUTDSCR_BURST_EN_CH0    (BIT(4))
#define GDMA_OUTDSCR_BURST_EN_CH0_M  (GDMA_OUTDSCR_BURST_EN_CH0_V << GDMA_OUTDSCR_BURST_EN_CH0_S)
#define GDMA_OUTDSCR_BURST_EN_CH0_V  0x00000001U
#define GDMA_OUTDSCR_BURST_EN_CH0_S  4
/** GDMA_OUT_ETM_EN_CH0 : R/W; bitpos: [6]; default: 0;
 *  Configures whether or not to enable ETM control for TX channel 0.\\0: Disable\\1:
 *  Enable\\
 */
#define GDMA_OUT_ETM_EN_CH0    (BIT(6))
#define GDMA_OUT_ETM_EN_CH0_M  (GDMA_OUT_ETM_EN_CH0_V << GDMA_OUT_ETM_EN_CH0_S)
#define GDMA_OUT_ETM_EN_CH0_V  0x00000001U
#define GDMA_OUT_ETM_EN_CH0_S  6
/** GDMA_OUT_DATA_BURST_MODE_SEL_CH0 : R/W; bitpos: [9:8]; default: 0;
 *  Configures max burst size for TX channel0.\\2'b00: single\\ 2'b01: incr4\\ 2'b10:
 *  incr8\\ 2'b11: incr16\\
 */
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH0    0x00000003U
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH0_M  (GDMA_OUT_DATA_BURST_MODE_SEL_CH0_V << GDMA_OUT_DATA_BURST_MODE_SEL_CH0_S)
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH0_V  0x00000003U
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH0_S  8

/** GDMA_OUT_CONF1_CH0_REG register
 *  Configuration register 1 of TX channel 0
 */
#define GDMA_OUT_CONF1_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xd4)
/** GDMA_OUT_CHECK_OWNER_CH0 : R/W; bitpos: [12]; default: 0;
 *  Configures whether or not to enable owner bit check for TX channel 0.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_OUT_CHECK_OWNER_CH0    (BIT(12))
#define GDMA_OUT_CHECK_OWNER_CH0_M  (GDMA_OUT_CHECK_OWNER_CH0_V << GDMA_OUT_CHECK_OWNER_CH0_S)
#define GDMA_OUT_CHECK_OWNER_CH0_V  0x00000001U
#define GDMA_OUT_CHECK_OWNER_CH0_S  12

/** GDMA_OUTFIFO_STATUS_CH0_REG register
 *  Transmit FIFO status of TX channel 0
 */
#define GDMA_OUTFIFO_STATUS_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xd8)
/** GDMA_OUTFIFO_FULL_CH0 : RO; bitpos: [0]; default: 0;
 *  Represents whether or not L1 TX FIFO is full.\\0: Not Full\\1: Full\\
 */
#define GDMA_OUTFIFO_FULL_CH0    (BIT(0))
#define GDMA_OUTFIFO_FULL_CH0_M  (GDMA_OUTFIFO_FULL_CH0_V << GDMA_OUTFIFO_FULL_CH0_S)
#define GDMA_OUTFIFO_FULL_CH0_V  0x00000001U
#define GDMA_OUTFIFO_FULL_CH0_S  0
/** GDMA_OUTFIFO_EMPTY_CH0 : RO; bitpos: [1]; default: 1;
 *  Represents whether or not L1 TX FIFO is empty.\\0: Not empty\\1: Empty\\
 */
#define GDMA_OUTFIFO_EMPTY_CH0    (BIT(1))
#define GDMA_OUTFIFO_EMPTY_CH0_M  (GDMA_OUTFIFO_EMPTY_CH0_V << GDMA_OUTFIFO_EMPTY_CH0_S)
#define GDMA_OUTFIFO_EMPTY_CH0_V  0x00000001U
#define GDMA_OUTFIFO_EMPTY_CH0_S  1
/** GDMA_OUTFIFO_CNT_CH0 : RO; bitpos: [14:8]; default: 0;
 *  Represents the number of data bytes in L1 TX FIFO for TX channel 0.
 */
#define GDMA_OUTFIFO_CNT_CH0    0x0000007FU
#define GDMA_OUTFIFO_CNT_CH0_M  (GDMA_OUTFIFO_CNT_CH0_V << GDMA_OUTFIFO_CNT_CH0_S)
#define GDMA_OUTFIFO_CNT_CH0_V  0x0000007FU
#define GDMA_OUTFIFO_CNT_CH0_S  8
/** GDMA_OUT_REMAIN_UNDER_1B_CH0 : RO; bitpos: [23]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_1B_CH0    (BIT(23))
#define GDMA_OUT_REMAIN_UNDER_1B_CH0_M  (GDMA_OUT_REMAIN_UNDER_1B_CH0_V << GDMA_OUT_REMAIN_UNDER_1B_CH0_S)
#define GDMA_OUT_REMAIN_UNDER_1B_CH0_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_1B_CH0_S  23
/** GDMA_OUT_REMAIN_UNDER_2B_CH0 : RO; bitpos: [24]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_2B_CH0    (BIT(24))
#define GDMA_OUT_REMAIN_UNDER_2B_CH0_M  (GDMA_OUT_REMAIN_UNDER_2B_CH0_V << GDMA_OUT_REMAIN_UNDER_2B_CH0_S)
#define GDMA_OUT_REMAIN_UNDER_2B_CH0_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_2B_CH0_S  24
/** GDMA_OUT_REMAIN_UNDER_3B_CH0 : RO; bitpos: [25]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_3B_CH0    (BIT(25))
#define GDMA_OUT_REMAIN_UNDER_3B_CH0_M  (GDMA_OUT_REMAIN_UNDER_3B_CH0_V << GDMA_OUT_REMAIN_UNDER_3B_CH0_S)
#define GDMA_OUT_REMAIN_UNDER_3B_CH0_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_3B_CH0_S  25
/** GDMA_OUT_REMAIN_UNDER_4B_CH0 : RO; bitpos: [26]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_4B_CH0    (BIT(26))
#define GDMA_OUT_REMAIN_UNDER_4B_CH0_M  (GDMA_OUT_REMAIN_UNDER_4B_CH0_V << GDMA_OUT_REMAIN_UNDER_4B_CH0_S)
#define GDMA_OUT_REMAIN_UNDER_4B_CH0_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_4B_CH0_S  26

/** GDMA_OUT_PUSH_CH0_REG register
 *  Push control register of TX channel 0
 */
#define GDMA_OUT_PUSH_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xdc)
/** GDMA_OUTFIFO_WDATA_CH0 : R/W; bitpos: [8:0]; default: 0;
 *  Configures the data that need to be pushed into AHB_DMA FIFO.
 */
#define GDMA_OUTFIFO_WDATA_CH0    0x000001FFU
#define GDMA_OUTFIFO_WDATA_CH0_M  (GDMA_OUTFIFO_WDATA_CH0_V << GDMA_OUTFIFO_WDATA_CH0_S)
#define GDMA_OUTFIFO_WDATA_CH0_V  0x000001FFU
#define GDMA_OUTFIFO_WDATA_CH0_S  0
/** GDMA_OUTFIFO_PUSH_CH0 : WT; bitpos: [9]; default: 0;
 *  Configures whether or not to push data into AHB_DMA FIFO.\\0: Invalid. No
 *  effect\\1: Push\\
 */
#define GDMA_OUTFIFO_PUSH_CH0    (BIT(9))
#define GDMA_OUTFIFO_PUSH_CH0_M  (GDMA_OUTFIFO_PUSH_CH0_V << GDMA_OUTFIFO_PUSH_CH0_S)
#define GDMA_OUTFIFO_PUSH_CH0_V  0x00000001U
#define GDMA_OUTFIFO_PUSH_CH0_S  9

/** GDMA_OUT_LINK_CH0_REG register
 *  Linked list descriptor configuration and control register of TX channel 0
 */
#define GDMA_OUT_LINK_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xe0)
/** GDMA_OUTLINK_STOP_CH0 : WT; bitpos: [0]; default: 0;
 *  Configures whether or not to stop AHB_DMA's TX channel 0 from transmitting
 *  data.\\0: Invalid. No effect\\1: Stop\\
 */
#define GDMA_OUTLINK_STOP_CH0    (BIT(0))
#define GDMA_OUTLINK_STOP_CH0_M  (GDMA_OUTLINK_STOP_CH0_V << GDMA_OUTLINK_STOP_CH0_S)
#define GDMA_OUTLINK_STOP_CH0_V  0x00000001U
#define GDMA_OUTLINK_STOP_CH0_S  0
/** GDMA_OUTLINK_START_CH0 : WT; bitpos: [1]; default: 0;
 *  Configures whether or not to enable AHB_DMA's TX channel 0 for data transfer.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_OUTLINK_START_CH0    (BIT(1))
#define GDMA_OUTLINK_START_CH0_M  (GDMA_OUTLINK_START_CH0_V << GDMA_OUTLINK_START_CH0_S)
#define GDMA_OUTLINK_START_CH0_V  0x00000001U
#define GDMA_OUTLINK_START_CH0_S  1
/** GDMA_OUTLINK_RESTART_CH0 : WT; bitpos: [2]; default: 0;
 *  Configures whether or not to restart TX channel 0 for AHB_DMA transfer.\\0:
 *  Invalid. No effect\\1: Restart\\
 */
#define GDMA_OUTLINK_RESTART_CH0    (BIT(2))
#define GDMA_OUTLINK_RESTART_CH0_M  (GDMA_OUTLINK_RESTART_CH0_V << GDMA_OUTLINK_RESTART_CH0_S)
#define GDMA_OUTLINK_RESTART_CH0_V  0x00000001U
#define GDMA_OUTLINK_RESTART_CH0_S  2
/** GDMA_OUTLINK_PARK_CH0 : RO; bitpos: [3]; default: 1;
 *  Represents the status of the transmit descriptor's FSM.\\0: Running\\1: Idle\\
 */
#define GDMA_OUTLINK_PARK_CH0    (BIT(3))
#define GDMA_OUTLINK_PARK_CH0_M  (GDMA_OUTLINK_PARK_CH0_V << GDMA_OUTLINK_PARK_CH0_S)
#define GDMA_OUTLINK_PARK_CH0_V  0x00000001U
#define GDMA_OUTLINK_PARK_CH0_S  3

/** GDMA_OUT_STATE_CH0_REG register
 *  Transmit status of TX channel 0
 */
#define GDMA_OUT_STATE_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xe4)
/** GDMA_OUTLINK_DSCR_ADDR_CH0 : RO; bitpos: [17:0]; default: 0;
 *  Represents the lower 18 bits of the address of the next transmit descriptor to be
 *  processed.
 */
#define GDMA_OUTLINK_DSCR_ADDR_CH0    0x0003FFFFU
#define GDMA_OUTLINK_DSCR_ADDR_CH0_M  (GDMA_OUTLINK_DSCR_ADDR_CH0_V << GDMA_OUTLINK_DSCR_ADDR_CH0_S)
#define GDMA_OUTLINK_DSCR_ADDR_CH0_V  0x0003FFFFU
#define GDMA_OUTLINK_DSCR_ADDR_CH0_S  0
/** GDMA_OUT_DSCR_STATE_CH0 : RO; bitpos: [19:18]; default: 0;
 *  reserved
 */
#define GDMA_OUT_DSCR_STATE_CH0    0x00000003U
#define GDMA_OUT_DSCR_STATE_CH0_M  (GDMA_OUT_DSCR_STATE_CH0_V << GDMA_OUT_DSCR_STATE_CH0_S)
#define GDMA_OUT_DSCR_STATE_CH0_V  0x00000003U
#define GDMA_OUT_DSCR_STATE_CH0_S  18
/** GDMA_OUT_STATE_CH0 : RO; bitpos: [22:20]; default: 0;
 *  reserved
 */
#define GDMA_OUT_STATE_CH0    0x00000007U
#define GDMA_OUT_STATE_CH0_M  (GDMA_OUT_STATE_CH0_V << GDMA_OUT_STATE_CH0_S)
#define GDMA_OUT_STATE_CH0_V  0x00000007U
#define GDMA_OUT_STATE_CH0_S  20

/** GDMA_OUT_EOF_DES_ADDR_CH0_REG register
 *  Transmit descriptor address when EOF occurs on TX channel 0
 */
#define GDMA_OUT_EOF_DES_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xe8)
/** GDMA_OUT_EOF_DES_ADDR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the transmit descriptor when the EOF bit in this
 *  descriptor is 1.
 */
#define GDMA_OUT_EOF_DES_ADDR_CH0    0xFFFFFFFFU
#define GDMA_OUT_EOF_DES_ADDR_CH0_M  (GDMA_OUT_EOF_DES_ADDR_CH0_V << GDMA_OUT_EOF_DES_ADDR_CH0_S)
#define GDMA_OUT_EOF_DES_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_OUT_EOF_DES_ADDR_CH0_S  0

/** GDMA_OUT_EOF_BFR_DES_ADDR_CH0_REG register
 *  The last transmit descriptor address when EOF occurs on TX channel 0
 */
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xec)
/** GDMA_OUT_EOF_BFR_DES_ADDR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the transmit descriptor before the last transmit
 *  descriptor.
 */
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH0    0xFFFFFFFFU
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH0_M  (GDMA_OUT_EOF_BFR_DES_ADDR_CH0_V << GDMA_OUT_EOF_BFR_DES_ADDR_CH0_S)
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH0_S  0

/** GDMA_OUT_DSCR_CH0_REG register
 *  Current transmit descriptor address of TX channel 0
 */
#define GDMA_OUT_DSCR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xf0)
/** GDMA_OUTLINK_DSCR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the next transmit descriptor y+1 pointed by the current
 *  transmit descriptor that has already been fetched.
 */
#define GDMA_OUTLINK_DSCR_CH0    0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_CH0_M  (GDMA_OUTLINK_DSCR_CH0_V << GDMA_OUTLINK_DSCR_CH0_S)
#define GDMA_OUTLINK_DSCR_CH0_V  0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_CH0_S  0

/** GDMA_OUT_DSCR_BF0_CH0_REG register
 *  The last transmit descriptor address of TX channel 0
 */
#define GDMA_OUT_DSCR_BF0_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xf4)
/** GDMA_OUTLINK_DSCR_BF0_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the current transmit descriptor y that has already been
 *  fetched.
 */
#define GDMA_OUTLINK_DSCR_BF0_CH0    0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF0_CH0_M  (GDMA_OUTLINK_DSCR_BF0_CH0_V << GDMA_OUTLINK_DSCR_BF0_CH0_S)
#define GDMA_OUTLINK_DSCR_BF0_CH0_V  0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF0_CH0_S  0

/** GDMA_OUT_DSCR_BF1_CH0_REG register
 *  The second-to-last transmit descriptor address of TX channel 0
 */
#define GDMA_OUT_DSCR_BF1_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xf8)
/** GDMA_OUTLINK_DSCR_BF1_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the previous transmit descriptor y-1 that has already
 *  been fetched.
 */
#define GDMA_OUTLINK_DSCR_BF1_CH0    0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF1_CH0_M  (GDMA_OUTLINK_DSCR_BF1_CH0_V << GDMA_OUTLINK_DSCR_BF1_CH0_S)
#define GDMA_OUTLINK_DSCR_BF1_CH0_V  0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF1_CH0_S  0

/** GDMA_OUT_PRI_CH0_REG register
 *  Priority register of TX channel 0
 */
#define GDMA_OUT_PRI_CH0_REG (DR_REG_AHB_GDMA_BASE + 0xfc)
/** GDMA_TX_PRI_CH0 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the priority of TX channel 0.The larger of the value, the higher of the
 *  priority.
 */
#define GDMA_TX_PRI_CH0    0x0000000FU
#define GDMA_TX_PRI_CH0_M  (GDMA_TX_PRI_CH0_V << GDMA_TX_PRI_CH0_S)
#define GDMA_TX_PRI_CH0_V  0x0000000FU
#define GDMA_TX_PRI_CH0_S  0

/** GDMA_OUT_PERI_SEL_CH0_REG register
 *  Peripheral selection register of TX channel 0
 */
#define GDMA_OUT_PERI_SEL_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x100)
/** GDMA_PERI_OUT_SEL_CH0 : R/W; bitpos: [5:0]; default: 63;
 *  Configures the peripheral connected to TX channel 0.\\ 0: Dummy\\ 1: SPI2\\ 2:
 *  UHCI0\\ 3: I2S0\\ 4: Dummy\\ 5: Dummy\\ 6: AES\\ 7: SHA\\ 8: ADC_DAC\\ 9: PARL_IO\\
 *  10: Dummy\\ 11~15: Dummy\\
 */
#define GDMA_PERI_OUT_SEL_CH0    0x0000003FU
#define GDMA_PERI_OUT_SEL_CH0_M  (GDMA_PERI_OUT_SEL_CH0_V << GDMA_PERI_OUT_SEL_CH0_S)
#define GDMA_PERI_OUT_SEL_CH0_V  0x0000003FU
#define GDMA_PERI_OUT_SEL_CH0_S  0

/** GDMA_OUT_DONE_DES_ADDR_CH0_REG register
 *  TX done outlink descriptor address of TX channel 0
 */
#define GDMA_OUT_DONE_DES_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x110)
/** GDMA_OUT_DONE_DES_ADDR_CH0 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the outlink descriptor when this descriptor is completed.
 */
#define GDMA_OUT_DONE_DES_ADDR_CH0    0xFFFFFFFFU
#define GDMA_OUT_DONE_DES_ADDR_CH0_M  (GDMA_OUT_DONE_DES_ADDR_CH0_V << GDMA_OUT_DONE_DES_ADDR_CH0_S)
#define GDMA_OUT_DONE_DES_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_OUT_DONE_DES_ADDR_CH0_S  0

/** GDMA_IN_CONF0_CH1_REG register
 *  Configuration register 0 of RX channel 0
 */
#define GDMA_IN_CONF0_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x130)
/** GDMA_IN_RST_CH1 : R/W; bitpos: [0]; default: 0;
 *  Write 1 and then 0 to reset AHB_DMA channel 0 RX FSM and RX FIFO pointer.
 */
#define GDMA_IN_RST_CH1    (BIT(0))
#define GDMA_IN_RST_CH1_M  (GDMA_IN_RST_CH1_V << GDMA_IN_RST_CH1_S)
#define GDMA_IN_RST_CH1_V  0x00000001U
#define GDMA_IN_RST_CH1_S  0
/** GDMA_IN_LOOP_TEST_CH1 : R/W; bitpos: [1]; default: 0;
 *  Reserved.
 */
#define GDMA_IN_LOOP_TEST_CH1    (BIT(1))
#define GDMA_IN_LOOP_TEST_CH1_M  (GDMA_IN_LOOP_TEST_CH1_V << GDMA_IN_LOOP_TEST_CH1_S)
#define GDMA_IN_LOOP_TEST_CH1_V  0x00000001U
#define GDMA_IN_LOOP_TEST_CH1_S  1
/** GDMA_INDSCR_BURST_EN_CH1 : R/W; bitpos: [2]; default: 0;
 *  Configures whether or not to enable INCR burst transfer for RX channel 1 to read
 *  descriptors.\\0: Disable\\1: Enable\\
 */
#define GDMA_INDSCR_BURST_EN_CH1    (BIT(2))
#define GDMA_INDSCR_BURST_EN_CH1_M  (GDMA_INDSCR_BURST_EN_CH1_V << GDMA_INDSCR_BURST_EN_CH1_S)
#define GDMA_INDSCR_BURST_EN_CH1_V  0x00000001U
#define GDMA_INDSCR_BURST_EN_CH1_S  2
/** GDMA_MEM_TRANS_EN_CH1 : R/W; bitpos: [4]; default: 0;
 *  Configures whether or not to enable memory-to-memory data transfer.\\0: Disable\\1:
 *  Enable\\
 */
#define GDMA_MEM_TRANS_EN_CH1    (BIT(4))
#define GDMA_MEM_TRANS_EN_CH1_M  (GDMA_MEM_TRANS_EN_CH1_V << GDMA_MEM_TRANS_EN_CH1_S)
#define GDMA_MEM_TRANS_EN_CH1_V  0x00000001U
#define GDMA_MEM_TRANS_EN_CH1_S  4
/** GDMA_IN_ETM_EN_CH1 : R/W; bitpos: [5]; default: 0;
 *  Configures whether or not to enable ETM control for RX channel1.\\0: Disable\\1:
 *  Enable\\
 */
#define GDMA_IN_ETM_EN_CH1    (BIT(5))
#define GDMA_IN_ETM_EN_CH1_M  (GDMA_IN_ETM_EN_CH1_V << GDMA_IN_ETM_EN_CH1_S)
#define GDMA_IN_ETM_EN_CH1_V  0x00000001U
#define GDMA_IN_ETM_EN_CH1_S  5
/** GDMA_IN_DATA_BURST_MODE_SEL_CH1 : R/W; bitpos: [7:6]; default: 0;
 *  Configures max burst size for Rx channel1.\\2'b00: single\\ 2'b01: incr4\\ 2'b10:
 *  incr8\\ 2'b11: incr16\\
 */
#define GDMA_IN_DATA_BURST_MODE_SEL_CH1    0x00000003U
#define GDMA_IN_DATA_BURST_MODE_SEL_CH1_M  (GDMA_IN_DATA_BURST_MODE_SEL_CH1_V << GDMA_IN_DATA_BURST_MODE_SEL_CH1_S)
#define GDMA_IN_DATA_BURST_MODE_SEL_CH1_V  0x00000003U
#define GDMA_IN_DATA_BURST_MODE_SEL_CH1_S  6

/** GDMA_IN_CONF1_CH1_REG register
 *  Configuration register 1 of RX channel 0
 */
#define GDMA_IN_CONF1_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x134)
/** GDMA_IN_CHECK_OWNER_CH1 : R/W; bitpos: [12]; default: 0;
 *  Configures whether or not to enable owner bit check for RX channel 1.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_IN_CHECK_OWNER_CH1    (BIT(12))
#define GDMA_IN_CHECK_OWNER_CH1_M  (GDMA_IN_CHECK_OWNER_CH1_V << GDMA_IN_CHECK_OWNER_CH1_S)
#define GDMA_IN_CHECK_OWNER_CH1_V  0x00000001U
#define GDMA_IN_CHECK_OWNER_CH1_S  12

/** GDMA_INFIFO_STATUS_CH1_REG register
 *  Receive FIFO status of RX channel 0
 */
#define GDMA_INFIFO_STATUS_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x138)
/** GDMA_INFIFO_FULL_CH1 : RO; bitpos: [0]; default: 1;
 *  Represents whether or not L1 RX FIFO is full.\\0: Not Full\\1: Full\\
 */
#define GDMA_INFIFO_FULL_CH1    (BIT(0))
#define GDMA_INFIFO_FULL_CH1_M  (GDMA_INFIFO_FULL_CH1_V << GDMA_INFIFO_FULL_CH1_S)
#define GDMA_INFIFO_FULL_CH1_V  0x00000001U
#define GDMA_INFIFO_FULL_CH1_S  0
/** GDMA_INFIFO_EMPTY_CH1 : RO; bitpos: [1]; default: 1;
 *  Represents whether or not  L1 RX FIFO is empty.\\0: Not empty\\1: Empty\\
 */
#define GDMA_INFIFO_EMPTY_CH1    (BIT(1))
#define GDMA_INFIFO_EMPTY_CH1_M  (GDMA_INFIFO_EMPTY_CH1_V << GDMA_INFIFO_EMPTY_CH1_S)
#define GDMA_INFIFO_EMPTY_CH1_V  0x00000001U
#define GDMA_INFIFO_EMPTY_CH1_S  1
/** GDMA_INFIFO_CNT_CH1 : RO; bitpos: [14:8]; default: 0;
 *  Represents the number of data bytes in L1 RX FIFO for RX channel 1.
 */
#define GDMA_INFIFO_CNT_CH1    0x0000007FU
#define GDMA_INFIFO_CNT_CH1_M  (GDMA_INFIFO_CNT_CH1_V << GDMA_INFIFO_CNT_CH1_S)
#define GDMA_INFIFO_CNT_CH1_V  0x0000007FU
#define GDMA_INFIFO_CNT_CH1_S  8
/** GDMA_IN_REMAIN_UNDER_1B_CH1 : RO; bitpos: [23]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_1B_CH1    (BIT(23))
#define GDMA_IN_REMAIN_UNDER_1B_CH1_M  (GDMA_IN_REMAIN_UNDER_1B_CH1_V << GDMA_IN_REMAIN_UNDER_1B_CH1_S)
#define GDMA_IN_REMAIN_UNDER_1B_CH1_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_1B_CH1_S  23
/** GDMA_IN_REMAIN_UNDER_2B_CH1 : RO; bitpos: [24]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_2B_CH1    (BIT(24))
#define GDMA_IN_REMAIN_UNDER_2B_CH1_M  (GDMA_IN_REMAIN_UNDER_2B_CH1_V << GDMA_IN_REMAIN_UNDER_2B_CH1_S)
#define GDMA_IN_REMAIN_UNDER_2B_CH1_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_2B_CH1_S  24
/** GDMA_IN_REMAIN_UNDER_3B_CH1 : RO; bitpos: [25]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_3B_CH1    (BIT(25))
#define GDMA_IN_REMAIN_UNDER_3B_CH1_M  (GDMA_IN_REMAIN_UNDER_3B_CH1_V << GDMA_IN_REMAIN_UNDER_3B_CH1_S)
#define GDMA_IN_REMAIN_UNDER_3B_CH1_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_3B_CH1_S  25
/** GDMA_IN_REMAIN_UNDER_4B_CH1 : RO; bitpos: [26]; default: 1;
 *  reserved
 */
#define GDMA_IN_REMAIN_UNDER_4B_CH1    (BIT(26))
#define GDMA_IN_REMAIN_UNDER_4B_CH1_M  (GDMA_IN_REMAIN_UNDER_4B_CH1_V << GDMA_IN_REMAIN_UNDER_4B_CH1_S)
#define GDMA_IN_REMAIN_UNDER_4B_CH1_V  0x00000001U
#define GDMA_IN_REMAIN_UNDER_4B_CH1_S  26
/** GDMA_IN_BUF_HUNGRY_CH1 : RO; bitpos: [27]; default: 0;
 *  reserved
 */
#define GDMA_IN_BUF_HUNGRY_CH1    (BIT(27))
#define GDMA_IN_BUF_HUNGRY_CH1_M  (GDMA_IN_BUF_HUNGRY_CH1_V << GDMA_IN_BUF_HUNGRY_CH1_S)
#define GDMA_IN_BUF_HUNGRY_CH1_V  0x00000001U
#define GDMA_IN_BUF_HUNGRY_CH1_S  27

/** GDMA_IN_POP_CH1_REG register
 *  Pop control register of RX channel 0
 */
#define GDMA_IN_POP_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x13c)
/** GDMA_INFIFO_RDATA_CH1 : RO; bitpos: [11:0]; default: 2048;
 *  Represents the data popped from AHB_DMA FIFO.
 */
#define GDMA_INFIFO_RDATA_CH1    0x00000FFFU
#define GDMA_INFIFO_RDATA_CH1_M  (GDMA_INFIFO_RDATA_CH1_V << GDMA_INFIFO_RDATA_CH1_S)
#define GDMA_INFIFO_RDATA_CH1_V  0x00000FFFU
#define GDMA_INFIFO_RDATA_CH1_S  0
/** GDMA_INFIFO_POP_CH1 : WT; bitpos: [12]; default: 0;
 *  Configures whether or not to pop data from AHB_DMA FIFO.\\0: Invalid. No effect\\1:
 *  Pop\\
 */
#define GDMA_INFIFO_POP_CH1    (BIT(12))
#define GDMA_INFIFO_POP_CH1_M  (GDMA_INFIFO_POP_CH1_V << GDMA_INFIFO_POP_CH1_S)
#define GDMA_INFIFO_POP_CH1_V  0x00000001U
#define GDMA_INFIFO_POP_CH1_S  12

/** GDMA_IN_LINK_CH1_REG register
 *  Linked list descriptor configuration and control register of RX channel 0
 */
#define GDMA_IN_LINK_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x140)
/** GDMA_INLINK_AUTO_RET_CH1 : R/W; bitpos: [0]; default: 1;
 *  Configures whether or not to return to current receive descriptor's address when
 *  there are some errors in current receiving data.\\0: Not return\\1: Return\\
 */
#define GDMA_INLINK_AUTO_RET_CH1    (BIT(0))
#define GDMA_INLINK_AUTO_RET_CH1_M  (GDMA_INLINK_AUTO_RET_CH1_V << GDMA_INLINK_AUTO_RET_CH1_S)
#define GDMA_INLINK_AUTO_RET_CH1_V  0x00000001U
#define GDMA_INLINK_AUTO_RET_CH1_S  0
/** GDMA_INLINK_STOP_CH1 : WT; bitpos: [1]; default: 0;
 *  Configures whether or not to stop AHB_DMA's RX channel 1 from receiving data.\\0:
 *  Invalid. No effect\\1: Stop\\
 */
#define GDMA_INLINK_STOP_CH1    (BIT(1))
#define GDMA_INLINK_STOP_CH1_M  (GDMA_INLINK_STOP_CH1_V << GDMA_INLINK_STOP_CH1_S)
#define GDMA_INLINK_STOP_CH1_V  0x00000001U
#define GDMA_INLINK_STOP_CH1_S  1
/** GDMA_INLINK_START_CH1 : WT; bitpos: [2]; default: 0;
 *  Configures whether or not to enable AHB_DMA's RX channel 1 for data transfer.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_INLINK_START_CH1    (BIT(2))
#define GDMA_INLINK_START_CH1_M  (GDMA_INLINK_START_CH1_V << GDMA_INLINK_START_CH1_S)
#define GDMA_INLINK_START_CH1_V  0x00000001U
#define GDMA_INLINK_START_CH1_S  2
/** GDMA_INLINK_RESTART_CH1 : WT; bitpos: [3]; default: 0;
 *  Configures whether or not to restart RX channel 1 for AHB_DMA transfer.\\0:
 *  Invalid. No effect\\1: Restart\\
 */
#define GDMA_INLINK_RESTART_CH1    (BIT(3))
#define GDMA_INLINK_RESTART_CH1_M  (GDMA_INLINK_RESTART_CH1_V << GDMA_INLINK_RESTART_CH1_S)
#define GDMA_INLINK_RESTART_CH1_V  0x00000001U
#define GDMA_INLINK_RESTART_CH1_S  3
/** GDMA_INLINK_PARK_CH1 : RO; bitpos: [4]; default: 1;
 *  Represents the status of the receive descriptor's FSM.\\0: Running\\1: Idle\\
 */
#define GDMA_INLINK_PARK_CH1    (BIT(4))
#define GDMA_INLINK_PARK_CH1_M  (GDMA_INLINK_PARK_CH1_V << GDMA_INLINK_PARK_CH1_S)
#define GDMA_INLINK_PARK_CH1_V  0x00000001U
#define GDMA_INLINK_PARK_CH1_S  4

/** GDMA_IN_STATE_CH1_REG register
 *  Receive status of RX channel 0
 */
#define GDMA_IN_STATE_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x144)
/** GDMA_INLINK_DSCR_ADDR_CH1 : RO; bitpos: [17:0]; default: 0;
 *  Represents the address of the lower 18 bits of the next receive descriptor to be
 *  processed.
 */
#define GDMA_INLINK_DSCR_ADDR_CH1    0x0003FFFFU
#define GDMA_INLINK_DSCR_ADDR_CH1_M  (GDMA_INLINK_DSCR_ADDR_CH1_V << GDMA_INLINK_DSCR_ADDR_CH1_S)
#define GDMA_INLINK_DSCR_ADDR_CH1_V  0x0003FFFFU
#define GDMA_INLINK_DSCR_ADDR_CH1_S  0
/** GDMA_IN_DSCR_STATE_CH1 : RO; bitpos: [19:18]; default: 0;
 *  reserved
 */
#define GDMA_IN_DSCR_STATE_CH1    0x00000003U
#define GDMA_IN_DSCR_STATE_CH1_M  (GDMA_IN_DSCR_STATE_CH1_V << GDMA_IN_DSCR_STATE_CH1_S)
#define GDMA_IN_DSCR_STATE_CH1_V  0x00000003U
#define GDMA_IN_DSCR_STATE_CH1_S  18
/** GDMA_IN_STATE_CH1 : RO; bitpos: [22:20]; default: 0;
 *  reserved
 */
#define GDMA_IN_STATE_CH1    0x00000007U
#define GDMA_IN_STATE_CH1_M  (GDMA_IN_STATE_CH1_V << GDMA_IN_STATE_CH1_S)
#define GDMA_IN_STATE_CH1_V  0x00000007U
#define GDMA_IN_STATE_CH1_S  20

/** GDMA_IN_SUC_EOF_DES_ADDR_CH1_REG register
 *  Receive descriptor address when EOF occurs on RX channel 0
 */
#define GDMA_IN_SUC_EOF_DES_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x148)
/** GDMA_IN_SUC_EOF_DES_ADDR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the receive descriptor when the EOF bit in this
 *  descriptor is 1.
 */
#define GDMA_IN_SUC_EOF_DES_ADDR_CH1    0xFFFFFFFFU
#define GDMA_IN_SUC_EOF_DES_ADDR_CH1_M  (GDMA_IN_SUC_EOF_DES_ADDR_CH1_V << GDMA_IN_SUC_EOF_DES_ADDR_CH1_S)
#define GDMA_IN_SUC_EOF_DES_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_IN_SUC_EOF_DES_ADDR_CH1_S  0

/** GDMA_IN_ERR_EOF_DES_ADDR_CH1_REG register
 *  Receive descriptor address when errors occur of RX channel 0
 */
#define GDMA_IN_ERR_EOF_DES_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x14c)
/** GDMA_IN_ERR_EOF_DES_ADDR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the receive descriptor when there are some errors in the
 *  currently received data.
 */
#define GDMA_IN_ERR_EOF_DES_ADDR_CH1    0xFFFFFFFFU
#define GDMA_IN_ERR_EOF_DES_ADDR_CH1_M  (GDMA_IN_ERR_EOF_DES_ADDR_CH1_V << GDMA_IN_ERR_EOF_DES_ADDR_CH1_S)
#define GDMA_IN_ERR_EOF_DES_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_IN_ERR_EOF_DES_ADDR_CH1_S  0

/** GDMA_IN_DSCR_CH1_REG register
 *  Current receive descriptor address of RX channel 0
 */
#define GDMA_IN_DSCR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x150)
/** GDMA_INLINK_DSCR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the next receive descriptor x+1 pointed by the current
 *  receive descriptor that has already been fetched.
 */
#define GDMA_INLINK_DSCR_CH1    0xFFFFFFFFU
#define GDMA_INLINK_DSCR_CH1_M  (GDMA_INLINK_DSCR_CH1_V << GDMA_INLINK_DSCR_CH1_S)
#define GDMA_INLINK_DSCR_CH1_V  0xFFFFFFFFU
#define GDMA_INLINK_DSCR_CH1_S  0

/** GDMA_IN_DSCR_BF0_CH1_REG register
 *  The last receive descriptor address of RX channel 0
 */
#define GDMA_IN_DSCR_BF0_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x154)
/** GDMA_INLINK_DSCR_BF0_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the current receive descriptor x that has already been
 *  fetched.
 */
#define GDMA_INLINK_DSCR_BF0_CH1    0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF0_CH1_M  (GDMA_INLINK_DSCR_BF0_CH1_V << GDMA_INLINK_DSCR_BF0_CH1_S)
#define GDMA_INLINK_DSCR_BF0_CH1_V  0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF0_CH1_S  0

/** GDMA_IN_DSCR_BF1_CH1_REG register
 *  The second-to-last receive descriptor address of RX channel 0
 */
#define GDMA_IN_DSCR_BF1_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x158)
/** GDMA_INLINK_DSCR_BF1_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the previous receive descriptor x-1 that has already been
 *  fetched.
 */
#define GDMA_INLINK_DSCR_BF1_CH1    0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF1_CH1_M  (GDMA_INLINK_DSCR_BF1_CH1_V << GDMA_INLINK_DSCR_BF1_CH1_S)
#define GDMA_INLINK_DSCR_BF1_CH1_V  0xFFFFFFFFU
#define GDMA_INLINK_DSCR_BF1_CH1_S  0

/** GDMA_IN_PRI_CH1_REG register
 *  Priority register of RX channel 0
 */
#define GDMA_IN_PRI_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x15c)
/** GDMA_RX_PRI_CH1 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the priority of RX channel 1.The larger of the value, the higher of the
 *  priority.
 */
#define GDMA_RX_PRI_CH1    0x0000000FU
#define GDMA_RX_PRI_CH1_M  (GDMA_RX_PRI_CH1_V << GDMA_RX_PRI_CH1_S)
#define GDMA_RX_PRI_CH1_V  0x0000000FU
#define GDMA_RX_PRI_CH1_S  0

/** GDMA_IN_PERI_SEL_CH1_REG register
 *  Peripheral selection register of RX channel 0
 */
#define GDMA_IN_PERI_SEL_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x160)
/** GDMA_PERI_IN_SEL_CH1 : R/W; bitpos: [5:0]; default: 63;
 *  Configures the peripheral connected to RX channel 1.\\ 0: Dummy\\ 1: SPI2\\ 2:
 *  UHCI0\\ 3: I2S0\\ 4: Dummy\\ 5: Dummy\\ 6: AES\\ 7: SHA\\ 8: ADC_DAC\\ 9: PARL_IO\\
 *  10: Dummy\\ 11~15: Dummy\\
 */
#define GDMA_PERI_IN_SEL_CH1    0x0000003FU
#define GDMA_PERI_IN_SEL_CH1_M  (GDMA_PERI_IN_SEL_CH1_V << GDMA_PERI_IN_SEL_CH1_S)
#define GDMA_PERI_IN_SEL_CH1_V  0x0000003FU
#define GDMA_PERI_IN_SEL_CH1_S  0

/** GDMA_IN_DONE_DES_ADDR_CH1_REG register
 *  RX_done Inlink descriptor address of RX channel 0
 */
#define GDMA_IN_DONE_DES_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x170)
/** GDMA_IN_DONE_DES_ADDR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the inlink descriptor when  this descriptor is completed .
 */
#define GDMA_IN_DONE_DES_ADDR_CH1    0xFFFFFFFFU
#define GDMA_IN_DONE_DES_ADDR_CH1_M  (GDMA_IN_DONE_DES_ADDR_CH1_V << GDMA_IN_DONE_DES_ADDR_CH1_S)
#define GDMA_IN_DONE_DES_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_IN_DONE_DES_ADDR_CH1_S  0

/** GDMA_OUT_CONF0_CH1_REG register
 *  Configuration register 0 of TX channel 1
 */
#define GDMA_OUT_CONF0_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x190)
/** GDMA_OUT_RST_CH1 : R/W; bitpos: [0]; default: 0;
 *  Configures the reset state of AHB_DMA channel 1 TX FSM and TX FIFO pointer.\\0:
 *  Release reset\\1: Reset\\
 */
#define GDMA_OUT_RST_CH1    (BIT(0))
#define GDMA_OUT_RST_CH1_M  (GDMA_OUT_RST_CH1_V << GDMA_OUT_RST_CH1_S)
#define GDMA_OUT_RST_CH1_V  0x00000001U
#define GDMA_OUT_RST_CH1_S  0
/** GDMA_OUT_LOOP_TEST_CH1 : R/W; bitpos: [1]; default: 0;
 *  Reserved.
 */
#define GDMA_OUT_LOOP_TEST_CH1    (BIT(1))
#define GDMA_OUT_LOOP_TEST_CH1_M  (GDMA_OUT_LOOP_TEST_CH1_V << GDMA_OUT_LOOP_TEST_CH1_S)
#define GDMA_OUT_LOOP_TEST_CH1_V  0x00000001U
#define GDMA_OUT_LOOP_TEST_CH1_S  1
/** GDMA_OUT_AUTO_WRBACK_CH1 : R/W; bitpos: [2]; default: 0;
 *  Configures whether or not to enable automatic outlink write-back when all the data
 *  in TX FIFO has been transmitted.\\0: Disable\\1: Enable\\
 */
#define GDMA_OUT_AUTO_WRBACK_CH1    (BIT(2))
#define GDMA_OUT_AUTO_WRBACK_CH1_M  (GDMA_OUT_AUTO_WRBACK_CH1_V << GDMA_OUT_AUTO_WRBACK_CH1_S)
#define GDMA_OUT_AUTO_WRBACK_CH1_V  0x00000001U
#define GDMA_OUT_AUTO_WRBACK_CH1_S  2
/** GDMA_OUT_EOF_MODE_CH1 : R/W; bitpos: [3]; default: 1;
 *  Configures when to generate EOF flag.\\0: EOF flag for TX channel 1 is generated
 *  when data to be transmitted has been pushed into FIFO in AHB_DMA.\\ 1: EOF flag for
 *  TX channel 1 is generated when data to be transmitted has been popped from FIFO in
 *  AHB_DMA.\\
 */
#define GDMA_OUT_EOF_MODE_CH1    (BIT(3))
#define GDMA_OUT_EOF_MODE_CH1_M  (GDMA_OUT_EOF_MODE_CH1_V << GDMA_OUT_EOF_MODE_CH1_S)
#define GDMA_OUT_EOF_MODE_CH1_V  0x00000001U
#define GDMA_OUT_EOF_MODE_CH1_S  3
/** GDMA_OUTDSCR_BURST_EN_CH1 : R/W; bitpos: [4]; default: 0;
 *  Configures whether or not to enable INCR burst transfer for TX channel 1 reading
 *  descriptors.\\0: Disable\\1: Enable\\
 */
#define GDMA_OUTDSCR_BURST_EN_CH1    (BIT(4))
#define GDMA_OUTDSCR_BURST_EN_CH1_M  (GDMA_OUTDSCR_BURST_EN_CH1_V << GDMA_OUTDSCR_BURST_EN_CH1_S)
#define GDMA_OUTDSCR_BURST_EN_CH1_V  0x00000001U
#define GDMA_OUTDSCR_BURST_EN_CH1_S  4
/** GDMA_OUT_ETM_EN_CH1 : R/W; bitpos: [6]; default: 0;
 *  Configures whether or not to enable ETM control for TX channel 1.\\0: Disable\\1:
 *  Enable\\
 */
#define GDMA_OUT_ETM_EN_CH1    (BIT(6))
#define GDMA_OUT_ETM_EN_CH1_M  (GDMA_OUT_ETM_EN_CH1_V << GDMA_OUT_ETM_EN_CH1_S)
#define GDMA_OUT_ETM_EN_CH1_V  0x00000001U
#define GDMA_OUT_ETM_EN_CH1_S  6
/** GDMA_OUT_DATA_BURST_MODE_SEL_CH1 : R/W; bitpos: [9:8]; default: 0;
 *  Configures max burst size for TX channel1.\\2'b00: single\\ 2'b01: incr4\\ 2'b10:
 *  incr8\\ 2'b11: incr16\\
 */
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH1    0x00000003U
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH1_M  (GDMA_OUT_DATA_BURST_MODE_SEL_CH1_V << GDMA_OUT_DATA_BURST_MODE_SEL_CH1_S)
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH1_V  0x00000003U
#define GDMA_OUT_DATA_BURST_MODE_SEL_CH1_S  8

/** GDMA_OUT_CONF1_CH1_REG register
 *  Configuration register 1 of TX channel 0
 */
#define GDMA_OUT_CONF1_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x194)
/** GDMA_OUT_CHECK_OWNER_CH1 : R/W; bitpos: [12]; default: 0;
 *  Configures whether or not to enable owner bit check for TX channel 1.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_OUT_CHECK_OWNER_CH1    (BIT(12))
#define GDMA_OUT_CHECK_OWNER_CH1_M  (GDMA_OUT_CHECK_OWNER_CH1_V << GDMA_OUT_CHECK_OWNER_CH1_S)
#define GDMA_OUT_CHECK_OWNER_CH1_V  0x00000001U
#define GDMA_OUT_CHECK_OWNER_CH1_S  12

/** GDMA_OUTFIFO_STATUS_CH1_REG register
 *  Transmit FIFO status of TX channel 0
 */
#define GDMA_OUTFIFO_STATUS_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x198)
/** GDMA_OUTFIFO_FULL_CH1 : RO; bitpos: [0]; default: 0;
 *  Represents whether or not L1 TX FIFO is full.\\0: Not Full\\1: Full\\
 */
#define GDMA_OUTFIFO_FULL_CH1    (BIT(0))
#define GDMA_OUTFIFO_FULL_CH1_M  (GDMA_OUTFIFO_FULL_CH1_V << GDMA_OUTFIFO_FULL_CH1_S)
#define GDMA_OUTFIFO_FULL_CH1_V  0x00000001U
#define GDMA_OUTFIFO_FULL_CH1_S  0
/** GDMA_OUTFIFO_EMPTY_CH1 : RO; bitpos: [1]; default: 1;
 *  Represents whether or not L1 TX FIFO is empty.\\0: Not empty\\1: Empty\\
 */
#define GDMA_OUTFIFO_EMPTY_CH1    (BIT(1))
#define GDMA_OUTFIFO_EMPTY_CH1_M  (GDMA_OUTFIFO_EMPTY_CH1_V << GDMA_OUTFIFO_EMPTY_CH1_S)
#define GDMA_OUTFIFO_EMPTY_CH1_V  0x00000001U
#define GDMA_OUTFIFO_EMPTY_CH1_S  1
/** GDMA_OUTFIFO_CNT_CH1 : RO; bitpos: [14:8]; default: 0;
 *  Represents the number of data bytes in L1 TX FIFO for TX channel 1.
 */
#define GDMA_OUTFIFO_CNT_CH1    0x0000007FU
#define GDMA_OUTFIFO_CNT_CH1_M  (GDMA_OUTFIFO_CNT_CH1_V << GDMA_OUTFIFO_CNT_CH1_S)
#define GDMA_OUTFIFO_CNT_CH1_V  0x0000007FU
#define GDMA_OUTFIFO_CNT_CH1_S  8
/** GDMA_OUT_REMAIN_UNDER_1B_CH1 : RO; bitpos: [23]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_1B_CH1    (BIT(23))
#define GDMA_OUT_REMAIN_UNDER_1B_CH1_M  (GDMA_OUT_REMAIN_UNDER_1B_CH1_V << GDMA_OUT_REMAIN_UNDER_1B_CH1_S)
#define GDMA_OUT_REMAIN_UNDER_1B_CH1_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_1B_CH1_S  23
/** GDMA_OUT_REMAIN_UNDER_2B_CH1 : RO; bitpos: [24]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_2B_CH1    (BIT(24))
#define GDMA_OUT_REMAIN_UNDER_2B_CH1_M  (GDMA_OUT_REMAIN_UNDER_2B_CH1_V << GDMA_OUT_REMAIN_UNDER_2B_CH1_S)
#define GDMA_OUT_REMAIN_UNDER_2B_CH1_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_2B_CH1_S  24
/** GDMA_OUT_REMAIN_UNDER_3B_CH1 : RO; bitpos: [25]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_3B_CH1    (BIT(25))
#define GDMA_OUT_REMAIN_UNDER_3B_CH1_M  (GDMA_OUT_REMAIN_UNDER_3B_CH1_V << GDMA_OUT_REMAIN_UNDER_3B_CH1_S)
#define GDMA_OUT_REMAIN_UNDER_3B_CH1_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_3B_CH1_S  25
/** GDMA_OUT_REMAIN_UNDER_4B_CH1 : RO; bitpos: [26]; default: 1;
 *  Reserved.
 */
#define GDMA_OUT_REMAIN_UNDER_4B_CH1    (BIT(26))
#define GDMA_OUT_REMAIN_UNDER_4B_CH1_M  (GDMA_OUT_REMAIN_UNDER_4B_CH1_V << GDMA_OUT_REMAIN_UNDER_4B_CH1_S)
#define GDMA_OUT_REMAIN_UNDER_4B_CH1_V  0x00000001U
#define GDMA_OUT_REMAIN_UNDER_4B_CH1_S  26

/** GDMA_OUT_PUSH_CH1_REG register
 *  Push control register of TX channel 0
 */
#define GDMA_OUT_PUSH_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x19c)
/** GDMA_OUTFIFO_WDATA_CH1 : R/W; bitpos: [8:0]; default: 0;
 *  Configures the data that need to be pushed into AHB_DMA FIFO.
 */
#define GDMA_OUTFIFO_WDATA_CH1    0x000001FFU
#define GDMA_OUTFIFO_WDATA_CH1_M  (GDMA_OUTFIFO_WDATA_CH1_V << GDMA_OUTFIFO_WDATA_CH1_S)
#define GDMA_OUTFIFO_WDATA_CH1_V  0x000001FFU
#define GDMA_OUTFIFO_WDATA_CH1_S  0
/** GDMA_OUTFIFO_PUSH_CH1 : WT; bitpos: [9]; default: 0;
 *  Configures whether or not to push data into AHB_DMA FIFO.\\0: Invalid. No
 *  effect\\1: Push\\
 */
#define GDMA_OUTFIFO_PUSH_CH1    (BIT(9))
#define GDMA_OUTFIFO_PUSH_CH1_M  (GDMA_OUTFIFO_PUSH_CH1_V << GDMA_OUTFIFO_PUSH_CH1_S)
#define GDMA_OUTFIFO_PUSH_CH1_V  0x00000001U
#define GDMA_OUTFIFO_PUSH_CH1_S  9

/** GDMA_OUT_LINK_CH1_REG register
 *  Linked list descriptor configuration and control register of TX channel 0
 */
#define GDMA_OUT_LINK_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1a0)
/** GDMA_OUTLINK_STOP_CH1 : WT; bitpos: [0]; default: 0;
 *  Configures whether or not to stop AHB_DMA's TX channel 1 from transmitting
 *  data.\\0: Invalid. No effect\\1: Stop\\
 */
#define GDMA_OUTLINK_STOP_CH1    (BIT(0))
#define GDMA_OUTLINK_STOP_CH1_M  (GDMA_OUTLINK_STOP_CH1_V << GDMA_OUTLINK_STOP_CH1_S)
#define GDMA_OUTLINK_STOP_CH1_V  0x00000001U
#define GDMA_OUTLINK_STOP_CH1_S  0
/** GDMA_OUTLINK_START_CH1 : WT; bitpos: [1]; default: 0;
 *  Configures whether or not to enable AHB_DMA's TX channel 1 for data transfer.\\0:
 *  Disable\\1: Enable\\
 */
#define GDMA_OUTLINK_START_CH1    (BIT(1))
#define GDMA_OUTLINK_START_CH1_M  (GDMA_OUTLINK_START_CH1_V << GDMA_OUTLINK_START_CH1_S)
#define GDMA_OUTLINK_START_CH1_V  0x00000001U
#define GDMA_OUTLINK_START_CH1_S  1
/** GDMA_OUTLINK_RESTART_CH1 : WT; bitpos: [2]; default: 0;
 *  Configures whether or not to restart TX channel 1 for AHB_DMA transfer.\\0:
 *  Invalid. No effect\\1: Restart\\
 */
#define GDMA_OUTLINK_RESTART_CH1    (BIT(2))
#define GDMA_OUTLINK_RESTART_CH1_M  (GDMA_OUTLINK_RESTART_CH1_V << GDMA_OUTLINK_RESTART_CH1_S)
#define GDMA_OUTLINK_RESTART_CH1_V  0x00000001U
#define GDMA_OUTLINK_RESTART_CH1_S  2
/** GDMA_OUTLINK_PARK_CH1 : RO; bitpos: [3]; default: 1;
 *  Represents the status of the transmit descriptor's FSM.\\0: Running\\1: Idle\\
 */
#define GDMA_OUTLINK_PARK_CH1    (BIT(3))
#define GDMA_OUTLINK_PARK_CH1_M  (GDMA_OUTLINK_PARK_CH1_V << GDMA_OUTLINK_PARK_CH1_S)
#define GDMA_OUTLINK_PARK_CH1_V  0x00000001U
#define GDMA_OUTLINK_PARK_CH1_S  3

/** GDMA_OUT_STATE_CH1_REG register
 *  Transmit status of TX channel 0
 */
#define GDMA_OUT_STATE_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1a4)
/** GDMA_OUTLINK_DSCR_ADDR_CH1 : RO; bitpos: [17:0]; default: 0;
 *  Represents the lower 18 bits of the address of the next transmit descriptor to be
 *  processed.
 */
#define GDMA_OUTLINK_DSCR_ADDR_CH1    0x0003FFFFU
#define GDMA_OUTLINK_DSCR_ADDR_CH1_M  (GDMA_OUTLINK_DSCR_ADDR_CH1_V << GDMA_OUTLINK_DSCR_ADDR_CH1_S)
#define GDMA_OUTLINK_DSCR_ADDR_CH1_V  0x0003FFFFU
#define GDMA_OUTLINK_DSCR_ADDR_CH1_S  0
/** GDMA_OUT_DSCR_STATE_CH1 : RO; bitpos: [19:18]; default: 0;
 *  reserved
 */
#define GDMA_OUT_DSCR_STATE_CH1    0x00000003U
#define GDMA_OUT_DSCR_STATE_CH1_M  (GDMA_OUT_DSCR_STATE_CH1_V << GDMA_OUT_DSCR_STATE_CH1_S)
#define GDMA_OUT_DSCR_STATE_CH1_V  0x00000003U
#define GDMA_OUT_DSCR_STATE_CH1_S  18
/** GDMA_OUT_STATE_CH1 : RO; bitpos: [22:20]; default: 0;
 *  reserved
 */
#define GDMA_OUT_STATE_CH1    0x00000007U
#define GDMA_OUT_STATE_CH1_M  (GDMA_OUT_STATE_CH1_V << GDMA_OUT_STATE_CH1_S)
#define GDMA_OUT_STATE_CH1_V  0x00000007U
#define GDMA_OUT_STATE_CH1_S  20

/** GDMA_OUT_EOF_DES_ADDR_CH1_REG register
 *  Transmit descriptor address when EOF occurs on TX channel 0
 */
#define GDMA_OUT_EOF_DES_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1a8)
/** GDMA_OUT_EOF_DES_ADDR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the transmit descriptor when the EOF bit in this
 *  descriptor is 1.
 */
#define GDMA_OUT_EOF_DES_ADDR_CH1    0xFFFFFFFFU
#define GDMA_OUT_EOF_DES_ADDR_CH1_M  (GDMA_OUT_EOF_DES_ADDR_CH1_V << GDMA_OUT_EOF_DES_ADDR_CH1_S)
#define GDMA_OUT_EOF_DES_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_OUT_EOF_DES_ADDR_CH1_S  0

/** GDMA_OUT_EOF_BFR_DES_ADDR_CH1_REG register
 *  The last transmit descriptor address when EOF occurs on TX channel 0
 */
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1ac)
/** GDMA_OUT_EOF_BFR_DES_ADDR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the transmit descriptor before the last transmit
 *  descriptor.
 */
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH1    0xFFFFFFFFU
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH1_M  (GDMA_OUT_EOF_BFR_DES_ADDR_CH1_V << GDMA_OUT_EOF_BFR_DES_ADDR_CH1_S)
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_OUT_EOF_BFR_DES_ADDR_CH1_S  0

/** GDMA_OUT_DSCR_CH1_REG register
 *  Current transmit descriptor address of TX channel 0
 */
#define GDMA_OUT_DSCR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1b0)
/** GDMA_OUTLINK_DSCR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the next transmit descriptor y+1 pointed by the current
 *  transmit descriptor that has already been fetched.
 */
#define GDMA_OUTLINK_DSCR_CH1    0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_CH1_M  (GDMA_OUTLINK_DSCR_CH1_V << GDMA_OUTLINK_DSCR_CH1_S)
#define GDMA_OUTLINK_DSCR_CH1_V  0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_CH1_S  0

/** GDMA_OUT_DSCR_BF0_CH1_REG register
 *  The last transmit descriptor address of TX channel 0
 */
#define GDMA_OUT_DSCR_BF0_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1b4)
/** GDMA_OUTLINK_DSCR_BF0_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the current transmit descriptor y that has already been
 *  fetched.
 */
#define GDMA_OUTLINK_DSCR_BF0_CH1    0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF0_CH1_M  (GDMA_OUTLINK_DSCR_BF0_CH1_V << GDMA_OUTLINK_DSCR_BF0_CH1_S)
#define GDMA_OUTLINK_DSCR_BF0_CH1_V  0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF0_CH1_S  0

/** GDMA_OUT_DSCR_BF1_CH1_REG register
 *  The second-to-last transmit descriptor address of TX channel 0
 */
#define GDMA_OUT_DSCR_BF1_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1b8)
/** GDMA_OUTLINK_DSCR_BF1_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the previous transmit descriptor y-1 that has already
 *  been fetched.
 */
#define GDMA_OUTLINK_DSCR_BF1_CH1    0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF1_CH1_M  (GDMA_OUTLINK_DSCR_BF1_CH1_V << GDMA_OUTLINK_DSCR_BF1_CH1_S)
#define GDMA_OUTLINK_DSCR_BF1_CH1_V  0xFFFFFFFFU
#define GDMA_OUTLINK_DSCR_BF1_CH1_S  0

/** GDMA_OUT_PRI_CH1_REG register
 *  Priority register of TX channel 0
 */
#define GDMA_OUT_PRI_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1bc)
/** GDMA_TX_PRI_CH1 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the priority of TX channel 1.The larger of the value, the higher of the
 *  priority.
 */
#define GDMA_TX_PRI_CH1    0x0000000FU
#define GDMA_TX_PRI_CH1_M  (GDMA_TX_PRI_CH1_V << GDMA_TX_PRI_CH1_S)
#define GDMA_TX_PRI_CH1_V  0x0000000FU
#define GDMA_TX_PRI_CH1_S  0

/** GDMA_OUT_PERI_SEL_CH1_REG register
 *  Peripheral selection register of TX channel 0
 */
#define GDMA_OUT_PERI_SEL_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1c0)
/** GDMA_PERI_OUT_SEL_CH1 : R/W; bitpos: [5:0]; default: 63;
 *  Configures the peripheral connected to TX channel 1.\\ 0: Dummy\\ 1: SPI2\\ 2:
 *  UHCI0\\ 3: I2S0\\ 4: Dummy\\ 5: Dummy\\ 6: AES\\ 7: SHA\\ 8: ADC_DAC\\ 9: PARL_IO\\
 *  10: Dummy\\ 11~15: Dummy\\
 */
#define GDMA_PERI_OUT_SEL_CH1    0x0000003FU
#define GDMA_PERI_OUT_SEL_CH1_M  (GDMA_PERI_OUT_SEL_CH1_V << GDMA_PERI_OUT_SEL_CH1_S)
#define GDMA_PERI_OUT_SEL_CH1_V  0x0000003FU
#define GDMA_PERI_OUT_SEL_CH1_S  0

/** GDMA_OUT_DONE_DES_ADDR_CH1_REG register
 *  TX done outlink descriptor address of TX channel 0
 */
#define GDMA_OUT_DONE_DES_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x1d0)
/** GDMA_OUT_DONE_DES_ADDR_CH1 : RO; bitpos: [31:0]; default: 0;
 *  Represents the address of the outlink descriptor when this descriptor is completed.
 */
#define GDMA_OUT_DONE_DES_ADDR_CH1    0xFFFFFFFFU
#define GDMA_OUT_DONE_DES_ADDR_CH1_M  (GDMA_OUT_DONE_DES_ADDR_CH1_V << GDMA_OUT_DONE_DES_ADDR_CH1_S)
#define GDMA_OUT_DONE_DES_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_OUT_DONE_DES_ADDR_CH1_S  0

/** GDMA_TX_CH_ARB_WEIGH_CH0_REG register
 *  TX channel 0 arbitration weight configuration register
 */
#define GDMA_TX_CH_ARB_WEIGH_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x2dc)
/** GDMA_TX_CH_ARB_WEIGH_CH0 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the weight(i.e the number of tokens) of TX channel0
 */
#define GDMA_TX_CH_ARB_WEIGH_CH0    0x0000000FU
#define GDMA_TX_CH_ARB_WEIGH_CH0_M  (GDMA_TX_CH_ARB_WEIGH_CH0_V << GDMA_TX_CH_ARB_WEIGH_CH0_S)
#define GDMA_TX_CH_ARB_WEIGH_CH0_V  0x0000000FU
#define GDMA_TX_CH_ARB_WEIGH_CH0_S  0

/** GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_REG register
 *  TX channel 0 weight arbitration optimization enable register
 */
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x2e0)
/** GDMA_TX_ARB_WEIGH_OPT_DIR_CH0 : R/W; bitpos: [0]; default: 0;
 *  reserved
 */
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH0    (BIT(0))
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_M  (GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_V << GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_S)
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_V  0x00000001U
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH0_S  0

/** GDMA_TX_CH_ARB_WEIGH_CH1_REG register
 *  TX channel 0 arbitration weight configuration register
 */
#define GDMA_TX_CH_ARB_WEIGH_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x304)
/** GDMA_TX_CH_ARB_WEIGH_CH1 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the weight(i.e the number of tokens) of TX channel1
 */
#define GDMA_TX_CH_ARB_WEIGH_CH1    0x0000000FU
#define GDMA_TX_CH_ARB_WEIGH_CH1_M  (GDMA_TX_CH_ARB_WEIGH_CH1_V << GDMA_TX_CH_ARB_WEIGH_CH1_S)
#define GDMA_TX_CH_ARB_WEIGH_CH1_V  0x0000000FU
#define GDMA_TX_CH_ARB_WEIGH_CH1_S  0

/** GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_REG register
 *  TX channel 0 weight arbitration optimization enable register
 */
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x308)
/** GDMA_TX_ARB_WEIGH_OPT_DIR_CH1 : R/W; bitpos: [0]; default: 0;
 *  reserved
 */
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH1    (BIT(0))
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_M  (GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_V << GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_S)
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_V  0x00000001U
#define GDMA_TX_ARB_WEIGH_OPT_DIR_CH1_S  0

/** GDMA_RX_CH_ARB_WEIGH_CH0_REG register
 *  RX channel 0 arbitration weight configuration register
 */
#define GDMA_RX_CH_ARB_WEIGH_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x354)
/** GDMA_RX_CH_ARB_WEIGH_CH0 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the weight(i.e the number of tokens) of RX channel0
 */
#define GDMA_RX_CH_ARB_WEIGH_CH0    0x0000000FU
#define GDMA_RX_CH_ARB_WEIGH_CH0_M  (GDMA_RX_CH_ARB_WEIGH_CH0_V << GDMA_RX_CH_ARB_WEIGH_CH0_S)
#define GDMA_RX_CH_ARB_WEIGH_CH0_V  0x0000000FU
#define GDMA_RX_CH_ARB_WEIGH_CH0_S  0

/** GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_REG register
 *  RX channel 0 weight arbitration optimization enable register
 */
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x358)
/** GDMA_RX_ARB_WEIGH_OPT_DIR_CH0 : R/W; bitpos: [0]; default: 0;
 *  reserved
 */
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH0    (BIT(0))
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_M  (GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_V << GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_S)
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_V  0x00000001U
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH0_S  0

/** GDMA_RX_CH_ARB_WEIGH_CH1_REG register
 *  RX channel 0 arbitration weight configuration register
 */
#define GDMA_RX_CH_ARB_WEIGH_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x37c)
/** GDMA_RX_CH_ARB_WEIGH_CH1 : R/W; bitpos: [3:0]; default: 0;
 *  Configures the weight(i.e the number of tokens) of RX channel1
 */
#define GDMA_RX_CH_ARB_WEIGH_CH1    0x0000000FU
#define GDMA_RX_CH_ARB_WEIGH_CH1_M  (GDMA_RX_CH_ARB_WEIGH_CH1_V << GDMA_RX_CH_ARB_WEIGH_CH1_S)
#define GDMA_RX_CH_ARB_WEIGH_CH1_V  0x0000000FU
#define GDMA_RX_CH_ARB_WEIGH_CH1_S  0

/** GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_REG register
 *  RX channel 0 weight arbitration optimization enable register
 */
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x380)
/** GDMA_RX_ARB_WEIGH_OPT_DIR_CH1 : R/W; bitpos: [0]; default: 0;
 *  reserved
 */
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH1    (BIT(0))
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_M  (GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_V << GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_S)
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_V  0x00000001U
#define GDMA_RX_ARB_WEIGH_OPT_DIR_CH1_S  0

/** GDMA_IN_LINK_ADDR_CH0_REG register
 *  Link list descriptor address configuration of RX channel 0
 */
#define GDMA_IN_LINK_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x3ac)
/** GDMA_INLINK_ADDR_CH0 : R/W; bitpos: [31:0]; default: 0;
 *  Configures the 32 bits of the first receive descriptor's address.
 */
#define GDMA_INLINK_ADDR_CH0    0xFFFFFFFFU
#define GDMA_INLINK_ADDR_CH0_M  (GDMA_INLINK_ADDR_CH0_V << GDMA_INLINK_ADDR_CH0_S)
#define GDMA_INLINK_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_INLINK_ADDR_CH0_S  0

/** GDMA_IN_LINK_ADDR_CH1_REG register
 *  Link list descriptor address configuration of RX channel 0
 */
#define GDMA_IN_LINK_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x3b0)
/** GDMA_INLINK_ADDR_CH1 : R/W; bitpos: [31:0]; default: 0;
 *  Configures the 32 bits of the first receive descriptor's address.
 */
#define GDMA_INLINK_ADDR_CH1    0xFFFFFFFFU
#define GDMA_INLINK_ADDR_CH1_M  (GDMA_INLINK_ADDR_CH1_V << GDMA_INLINK_ADDR_CH1_S)
#define GDMA_INLINK_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_INLINK_ADDR_CH1_S  0

/** GDMA_OUT_LINK_ADDR_CH0_REG register
 *  Link list descriptor address configuration of TX channel 0
 */
#define GDMA_OUT_LINK_ADDR_CH0_REG (DR_REG_AHB_GDMA_BASE + 0x3b8)
/** GDMA_OUTLINK_ADDR_CH0 : R/W; bitpos: [31:0]; default: 0;
 *  Configures the 32 bits of the first receive descriptor's address.
 */
#define GDMA_OUTLINK_ADDR_CH0    0xFFFFFFFFU
#define GDMA_OUTLINK_ADDR_CH0_M  (GDMA_OUTLINK_ADDR_CH0_V << GDMA_OUTLINK_ADDR_CH0_S)
#define GDMA_OUTLINK_ADDR_CH0_V  0xFFFFFFFFU
#define GDMA_OUTLINK_ADDR_CH0_S  0

/** GDMA_OUT_LINK_ADDR_CH1_REG register
 *  Link list descriptor address configuration of TX channel 0
 */
#define GDMA_OUT_LINK_ADDR_CH1_REG (DR_REG_AHB_GDMA_BASE + 0x3bc)
/** GDMA_OUTLINK_ADDR_CH1 : R/W; bitpos: [31:0]; default: 0;
 *  Configures the 32 bits of the first receive descriptor's address.
 */
#define GDMA_OUTLINK_ADDR_CH1    0xFFFFFFFFU
#define GDMA_OUTLINK_ADDR_CH1_M  (GDMA_OUTLINK_ADDR_CH1_V << GDMA_OUTLINK_ADDR_CH1_S)
#define GDMA_OUTLINK_ADDR_CH1_V  0xFFFFFFFFU
#define GDMA_OUTLINK_ADDR_CH1_S  0

/** GDMA_INTR_MEM_START_ADDR_REG register
 *  Accessible address space start address configuration register
 */
#define GDMA_INTR_MEM_START_ADDR_REG (DR_REG_AHB_GDMA_BASE + 0x3c4)
/** GDMA_ACCESS_INTR_MEM_START_ADDR : R/W; bitpos: [31:0]; default: 0;
 *  Configures the start address of accessible address space.
 */
#define GDMA_ACCESS_INTR_MEM_START_ADDR    0xFFFFFFFFU
#define GDMA_ACCESS_INTR_MEM_START_ADDR_M  (GDMA_ACCESS_INTR_MEM_START_ADDR_V << GDMA_ACCESS_INTR_MEM_START_ADDR_S)
#define GDMA_ACCESS_INTR_MEM_START_ADDR_V  0xFFFFFFFFU
#define GDMA_ACCESS_INTR_MEM_START_ADDR_S  0

/** GDMA_INTR_MEM_END_ADDR_REG register
 *  Accessible address space end address configuration register
 */
#define GDMA_INTR_MEM_END_ADDR_REG (DR_REG_AHB_GDMA_BASE + 0x3c8)
/** GDMA_ACCESS_INTR_MEM_END_ADDR : R/W; bitpos: [31:0]; default: 4294967295;
 *  Configures the end address of accessible address space.
 */
#define GDMA_ACCESS_INTR_MEM_END_ADDR    0xFFFFFFFFU
#define GDMA_ACCESS_INTR_MEM_END_ADDR_M  (GDMA_ACCESS_INTR_MEM_END_ADDR_V << GDMA_ACCESS_INTR_MEM_END_ADDR_S)
#define GDMA_ACCESS_INTR_MEM_END_ADDR_V  0xFFFFFFFFU
#define GDMA_ACCESS_INTR_MEM_END_ADDR_S  0

/** GDMA_ARB_TIMEOUT_TX_REG register
 *  TX arbitration timeout configuration register
 */
#define GDMA_ARB_TIMEOUT_TX_REG (DR_REG_AHB_GDMA_BASE + 0x3cc)
/** GDMA_ARB_TIMEOUT_TX : R/W; bitpos: [15:0]; default: 0;
 *  Configures the time slot for TX. Measurement unit: AHB bus clock cycle.
 */
#define GDMA_ARB_TIMEOUT_TX    0x0000FFFFU
#define GDMA_ARB_TIMEOUT_TX_M  (GDMA_ARB_TIMEOUT_TX_V << GDMA_ARB_TIMEOUT_TX_S)
#define GDMA_ARB_TIMEOUT_TX_V  0x0000FFFFU
#define GDMA_ARB_TIMEOUT_TX_S  0

/** GDMA_ARB_TIMEOUT_RX_REG register
 *  RX arbitration timeout configuration register
 */
#define GDMA_ARB_TIMEOUT_RX_REG (DR_REG_AHB_GDMA_BASE + 0x3d0)
/** GDMA_ARB_TIMEOUT_RX : R/W; bitpos: [15:0]; default: 0;
 *  Configures the time slot for RX. Measurement unit: AHB bus clock cycle.
 */
#define GDMA_ARB_TIMEOUT_RX    0x0000FFFFU
#define GDMA_ARB_TIMEOUT_RX_M  (GDMA_ARB_TIMEOUT_RX_V << GDMA_ARB_TIMEOUT_RX_S)
#define GDMA_ARB_TIMEOUT_RX_V  0x0000FFFFU
#define GDMA_ARB_TIMEOUT_RX_S  0

/** GDMA_WEIGHT_EN_TX_REG register
 *  TX weight arbitration enable register
 */
#define GDMA_WEIGHT_EN_TX_REG (DR_REG_AHB_GDMA_BASE + 0x3d4)
/** GDMA_WEIGHT_EN_TX : R/W; bitpos: [0]; default: 0;
 *  Configures whether to enable weight arbitration for TX.\\0: Disable\\1: Enable\\
 */
#define GDMA_WEIGHT_EN_TX    (BIT(0))
#define GDMA_WEIGHT_EN_TX_M  (GDMA_WEIGHT_EN_TX_V << GDMA_WEIGHT_EN_TX_S)
#define GDMA_WEIGHT_EN_TX_V  0x00000001U
#define GDMA_WEIGHT_EN_TX_S  0

/** GDMA_WEIGHT_EN_RX_REG register
 *  RX weight arbitration enable register
 */
#define GDMA_WEIGHT_EN_RX_REG (DR_REG_AHB_GDMA_BASE + 0x3d8)
/** GDMA_WEIGHT_EN_RX : R/W; bitpos: [0]; default: 0;
 *  Configures whether to enable weight arbitration for RX.\\0: Disable\\1: Enable\\
 */
#define GDMA_WEIGHT_EN_RX    (BIT(0))
#define GDMA_WEIGHT_EN_RX_M  (GDMA_WEIGHT_EN_RX_V << GDMA_WEIGHT_EN_RX_S)
#define GDMA_WEIGHT_EN_RX_V  0x00000001U
#define GDMA_WEIGHT_EN_RX_S  0

#ifdef __cplusplus
}
#endif
