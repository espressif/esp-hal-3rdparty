/**
 * SPDX-FileCopyrightText: 2023 Espressif Systems (Shanghai) CO LTD
 *
 *  SPDX-License-Identifier: Apache-2.0
 */
#pragma once

#include <stdint.h>
#include "soc/soc.h"
#ifdef __cplusplus
extern "C" {
#endif

/** LPSYSREG_LP_SYS_VER_DATE_REG register
 *  need_des
 */
#define LPSYSREG_LP_SYS_VER_DATE_REG (DR_REG_LP_SYS_BASE + 0x0)
/** LPSYSREG_VER_DATE : R/W; bitpos: [31:0]; default: 539165961;
 *  need_des
 */
#define LPSYSREG_VER_DATE    0xFFFFFFFFU
#define LPSYSREG_VER_DATE_M  (LPSYSREG_VER_DATE_V << LPSYSREG_VER_DATE_S)
#define LPSYSREG_VER_DATE_V  0xFFFFFFFFU
#define LPSYSREG_VER_DATE_S  0

/** LPSYSREG_CLK_SEL_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_CLK_SEL_CTRL_REG (DR_REG_LP_SYS_BASE + 0x4)
/** LPSYSREG_ENA_SW_SEL_SYS_CLK : R/W; bitpos: [16]; default: 0;
 *  reserved
 */
#define LPSYSREG_ENA_SW_SEL_SYS_CLK    (BIT(16))
#define LPSYSREG_ENA_SW_SEL_SYS_CLK_M  (LPSYSREG_ENA_SW_SEL_SYS_CLK_V << LPSYSREG_ENA_SW_SEL_SYS_CLK_S)
#define LPSYSREG_ENA_SW_SEL_SYS_CLK_V  0x00000001U
#define LPSYSREG_ENA_SW_SEL_SYS_CLK_S  16
/** LPSYSREG_SW_SYS_CLK_SRC_SEL : R/W; bitpos: [17]; default: 0;
 *  reserved
 */
#define LPSYSREG_SW_SYS_CLK_SRC_SEL    (BIT(17))
#define LPSYSREG_SW_SYS_CLK_SRC_SEL_M  (LPSYSREG_SW_SYS_CLK_SRC_SEL_V << LPSYSREG_SW_SYS_CLK_SRC_SEL_S)
#define LPSYSREG_SW_SYS_CLK_SRC_SEL_V  0x00000001U
#define LPSYSREG_SW_SYS_CLK_SRC_SEL_S  17

/** LPSYSREG_SYS_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_SYS_CTRL_REG (DR_REG_LP_SYS_BASE + 0x8)
/** LPSYSREG_LP_CORE_DISABLE : R/W; bitpos: [0]; default: 0;
 *  lp cpu disable
 */
#define LPSYSREG_LP_CORE_DISABLE    (BIT(0))
#define LPSYSREG_LP_CORE_DISABLE_M  (LPSYSREG_LP_CORE_DISABLE_V << LPSYSREG_LP_CORE_DISABLE_S)
#define LPSYSREG_LP_CORE_DISABLE_V  0x00000001U
#define LPSYSREG_LP_CORE_DISABLE_S  0
/** LPSYSREG_SYS_SW_RST : WT; bitpos: [1]; default: 0;
 *  digital system software reset bit
 */
#define LPSYSREG_SYS_SW_RST    (BIT(1))
#define LPSYSREG_SYS_SW_RST_M  (LPSYSREG_SYS_SW_RST_V << LPSYSREG_SYS_SW_RST_S)
#define LPSYSREG_SYS_SW_RST_V  0x00000001U
#define LPSYSREG_SYS_SW_RST_S  1
/** LPSYSREG_FORCE_DOWNLOAD_BOOT : R/W; bitpos: [2]; default: 0;
 *  need_des
 */
#define LPSYSREG_FORCE_DOWNLOAD_BOOT    (BIT(2))
#define LPSYSREG_FORCE_DOWNLOAD_BOOT_M  (LPSYSREG_FORCE_DOWNLOAD_BOOT_V << LPSYSREG_FORCE_DOWNLOAD_BOOT_S)
#define LPSYSREG_FORCE_DOWNLOAD_BOOT_V  0x00000001U
#define LPSYSREG_FORCE_DOWNLOAD_BOOT_S  2
/** LPSYSREG_DIG_FIB : R/W; bitpos: [10:3]; default: 255;
 *  need_des
 */
#define LPSYSREG_DIG_FIB    0x000000FFU
#define LPSYSREG_DIG_FIB_M  (LPSYSREG_DIG_FIB_V << LPSYSREG_DIG_FIB_S)
#define LPSYSREG_DIG_FIB_V  0x000000FFU
#define LPSYSREG_DIG_FIB_S  3
/** LPSYSREG_IO_MUX_RESET_DISABLE : R/W; bitpos: [11]; default: 0;
 *  reset disable bit for LP IOMUX
 */
#define LPSYSREG_IO_MUX_RESET_DISABLE    (BIT(11))
#define LPSYSREG_IO_MUX_RESET_DISABLE_M  (LPSYSREG_IO_MUX_RESET_DISABLE_V << LPSYSREG_IO_MUX_RESET_DISABLE_S)
#define LPSYSREG_IO_MUX_RESET_DISABLE_V  0x00000001U
#define LPSYSREG_IO_MUX_RESET_DISABLE_S  11
/** LPSYSREG_ANA_FIB : RO; bitpos: [20:14]; default: 127;
 *  need_des
 */
#define LPSYSREG_ANA_FIB    0x0000007FU
#define LPSYSREG_ANA_FIB_M  (LPSYSREG_ANA_FIB_V << LPSYSREG_ANA_FIB_S)
#define LPSYSREG_ANA_FIB_V  0x0000007FU
#define LPSYSREG_ANA_FIB_S  14
/** LPSYSREG_LP_FIB_SEL : R/W; bitpos: [28:21]; default: 255;
 *  need_des
 */
#define LPSYSREG_LP_FIB_SEL    0x000000FFU
#define LPSYSREG_LP_FIB_SEL_M  (LPSYSREG_LP_FIB_SEL_V << LPSYSREG_LP_FIB_SEL_S)
#define LPSYSREG_LP_FIB_SEL_V  0x000000FFU
#define LPSYSREG_LP_FIB_SEL_S  21
/** LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR : WT; bitpos: [29]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR    (BIT(29))
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR_M  (LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR_V << LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR_S)
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR_V  0x00000001U
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_CLR_S  29
/** LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG : R/WTC/SS; bitpos: [30]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG    (BIT(30))
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_M  (LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_V << LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_S)
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_V  0x00000001U
#define LPSYSREG_LP_CORE_ETM_WAKEUP_FLAG_S  30
/** LPSYSREG_SYSTIMER_STALL_SEL : R/W; bitpos: [31]; default: 0;
 *  0: use systimer_stall signal from hp_core0, 1: use systimer_stall signal from
 *  hp_core1
 */
#define LPSYSREG_SYSTIMER_STALL_SEL    (BIT(31))
#define LPSYSREG_SYSTIMER_STALL_SEL_M  (LPSYSREG_SYSTIMER_STALL_SEL_V << LPSYSREG_SYSTIMER_STALL_SEL_S)
#define LPSYSREG_SYSTIMER_STALL_SEL_V  0x00000001U
#define LPSYSREG_SYSTIMER_STALL_SEL_S  31

/** LPSYSREG_LP_CLK_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_CLK_CTRL_REG (DR_REG_LP_SYS_BASE + 0xc)
/** LPSYSREG_CLK_EN : R/W; bitpos: [0]; default: 1;
 *  need_des
 */
#define LPSYSREG_CLK_EN    (BIT(0))
#define LPSYSREG_CLK_EN_M  (LPSYSREG_CLK_EN_V << LPSYSREG_CLK_EN_S)
#define LPSYSREG_CLK_EN_V  0x00000001U
#define LPSYSREG_CLK_EN_S  0
/** LPSYSREG_LP_FOSC_HP_CKEN : R/W; bitpos: [14]; default: 1;
 *  reserved
 */
#define LPSYSREG_LP_FOSC_HP_CKEN    (BIT(14))
#define LPSYSREG_LP_FOSC_HP_CKEN_M  (LPSYSREG_LP_FOSC_HP_CKEN_V << LPSYSREG_LP_FOSC_HP_CKEN_S)
#define LPSYSREG_LP_FOSC_HP_CKEN_V  0x00000001U
#define LPSYSREG_LP_FOSC_HP_CKEN_S  14

/** LPSYSREG_LP_RST_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_RST_CTRL_REG (DR_REG_LP_SYS_BASE + 0x10)
/** LPSYSREG_ANA_RST_BYPASS : R/W; bitpos: [0]; default: 1;
 *  analog source reset bypass : wdt,brown out,super wdt,glitch
 */
#define LPSYSREG_ANA_RST_BYPASS    (BIT(0))
#define LPSYSREG_ANA_RST_BYPASS_M  (LPSYSREG_ANA_RST_BYPASS_V << LPSYSREG_ANA_RST_BYPASS_S)
#define LPSYSREG_ANA_RST_BYPASS_V  0x00000001U
#define LPSYSREG_ANA_RST_BYPASS_S  0
/** LPSYSREG_SYS_RST_BYPASS : R/W; bitpos: [1]; default: 1;
 *  system source reset bypass : software reset,hp wdt,lp wdt,efuse
 */
#define LPSYSREG_SYS_RST_BYPASS    (BIT(1))
#define LPSYSREG_SYS_RST_BYPASS_M  (LPSYSREG_SYS_RST_BYPASS_V << LPSYSREG_SYS_RST_BYPASS_S)
#define LPSYSREG_SYS_RST_BYPASS_V  0x00000001U
#define LPSYSREG_SYS_RST_BYPASS_S  1
/** LPSYSREG_EFUSE_FORCE_NORST : R/W; bitpos: [2]; default: 0;
 *  efuse force no reset control
 */
#define LPSYSREG_EFUSE_FORCE_NORST    (BIT(2))
#define LPSYSREG_EFUSE_FORCE_NORST_M  (LPSYSREG_EFUSE_FORCE_NORST_V << LPSYSREG_EFUSE_FORCE_NORST_S)
#define LPSYSREG_EFUSE_FORCE_NORST_V  0x00000001U
#define LPSYSREG_EFUSE_FORCE_NORST_S  2

/** LPSYSREG_LP_CORE_BOOT_ADDR_REG register
 *  need_des
 */
#define LPSYSREG_LP_CORE_BOOT_ADDR_REG (DR_REG_LP_SYS_BASE + 0x18)
/** LPSYSREG_LP_CPU_BOOT_ADDR : R/W; bitpos: [31:0]; default: 1343225856;
 *  need_des
 */
#define LPSYSREG_LP_CPU_BOOT_ADDR    0xFFFFFFFFU
#define LPSYSREG_LP_CPU_BOOT_ADDR_M  (LPSYSREG_LP_CPU_BOOT_ADDR_V << LPSYSREG_LP_CPU_BOOT_ADDR_S)
#define LPSYSREG_LP_CPU_BOOT_ADDR_V  0xFFFFFFFFU
#define LPSYSREG_LP_CPU_BOOT_ADDR_S  0

/** LPSYSREG_EXT_WAKEUP1_REG register
 *  need_des
 */
#define LPSYSREG_EXT_WAKEUP1_REG (DR_REG_LP_SYS_BASE + 0x1c)
/** LPSYSREG_EXT_WAKEUP1_SEL : R/W; bitpos: [15:0]; default: 0;
 *  Bitmap to select RTC pads for ext wakeup1
 */
#define LPSYSREG_EXT_WAKEUP1_SEL    0x0000FFFFU
#define LPSYSREG_EXT_WAKEUP1_SEL_M  (LPSYSREG_EXT_WAKEUP1_SEL_V << LPSYSREG_EXT_WAKEUP1_SEL_S)
#define LPSYSREG_EXT_WAKEUP1_SEL_V  0x0000FFFFU
#define LPSYSREG_EXT_WAKEUP1_SEL_S  0
/** LPSYSREG_EXT_WAKEUP1_STATUS_CLR : WT; bitpos: [16]; default: 0;
 *  clear ext wakeup1 status
 */
#define LPSYSREG_EXT_WAKEUP1_STATUS_CLR    (BIT(16))
#define LPSYSREG_EXT_WAKEUP1_STATUS_CLR_M  (LPSYSREG_EXT_WAKEUP1_STATUS_CLR_V << LPSYSREG_EXT_WAKEUP1_STATUS_CLR_S)
#define LPSYSREG_EXT_WAKEUP1_STATUS_CLR_V  0x00000001U
#define LPSYSREG_EXT_WAKEUP1_STATUS_CLR_S  16

/** LPSYSREG_EXT_WAKEUP1_STATUS_REG register
 *  need_des
 */
#define LPSYSREG_EXT_WAKEUP1_STATUS_REG (DR_REG_LP_SYS_BASE + 0x20)
/** LPSYSREG_EXT_WAKEUP1_STATUS : RO; bitpos: [15:0]; default: 0;
 *  ext wakeup1 status
 */
#define LPSYSREG_EXT_WAKEUP1_STATUS    0x0000FFFFU
#define LPSYSREG_EXT_WAKEUP1_STATUS_M  (LPSYSREG_EXT_WAKEUP1_STATUS_V << LPSYSREG_EXT_WAKEUP1_STATUS_S)
#define LPSYSREG_EXT_WAKEUP1_STATUS_V  0x0000FFFFU
#define LPSYSREG_EXT_WAKEUP1_STATUS_S  0

/** LPSYSREG_LP_TCM_PWR_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_PWR_CTRL_REG (DR_REG_LP_SYS_BASE + 0x24)
/** LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON : R/W; bitpos: [5]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON    (BIT(5))
#define LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON_M  (LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON_V << LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON_S)
#define LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON_V  0x00000001U
#define LPSYSREG_LP_TCM_ROM_CLK_FORCE_ON_S  5
/** LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON : R/W; bitpos: [7]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON    (BIT(7))
#define LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON_M  (LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON_V << LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON_S)
#define LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON_V  0x00000001U
#define LPSYSREG_LP_TCM_RAM_CLK_FORCE_ON_S  7

/** LPSYSREG_BOOT_ADDR_HP_LP_REG_REG register
 *  need_des
 */
#define LPSYSREG_BOOT_ADDR_HP_LP_REG_REG (DR_REG_LP_SYS_BASE + 0x28)
/** LPSYSREG_BOOT_ADDR_HP_LP : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_BOOT_ADDR_HP_LP    0xFFFFFFFFU
#define LPSYSREG_BOOT_ADDR_HP_LP_M  (LPSYSREG_BOOT_ADDR_HP_LP_V << LPSYSREG_BOOT_ADDR_HP_LP_S)
#define LPSYSREG_BOOT_ADDR_HP_LP_V  0xFFFFFFFFU
#define LPSYSREG_BOOT_ADDR_HP_LP_S  0

/** LPSYSREG_LP_STORE0_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE0_REG (DR_REG_LP_SYS_BASE + 0x2c)
/** LPSYSREG_LP_SCRATCH0 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH0    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH0_M  (LPSYSREG_LP_SCRATCH0_V << LPSYSREG_LP_SCRATCH0_S)
#define LPSYSREG_LP_SCRATCH0_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH0_S  0

/** LPSYSREG_LP_STORE1_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE1_REG (DR_REG_LP_SYS_BASE + 0x30)
/** LPSYSREG_LP_SCRATCH1 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH1    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH1_M  (LPSYSREG_LP_SCRATCH1_V << LPSYSREG_LP_SCRATCH1_S)
#define LPSYSREG_LP_SCRATCH1_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH1_S  0

/** LPSYSREG_LP_STORE2_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE2_REG (DR_REG_LP_SYS_BASE + 0x34)
/** LPSYSREG_LP_SCRATCH2 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH2    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH2_M  (LPSYSREG_LP_SCRATCH2_V << LPSYSREG_LP_SCRATCH2_S)
#define LPSYSREG_LP_SCRATCH2_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH2_S  0

/** LPSYSREG_LP_STORE3_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE3_REG (DR_REG_LP_SYS_BASE + 0x38)
/** LPSYSREG_LP_SCRATCH3 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH3    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH3_M  (LPSYSREG_LP_SCRATCH3_V << LPSYSREG_LP_SCRATCH3_S)
#define LPSYSREG_LP_SCRATCH3_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH3_S  0

/** LPSYSREG_LP_STORE4_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE4_REG (DR_REG_LP_SYS_BASE + 0x3c)
/** LPSYSREG_LP_SCRATCH4 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH4    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH4_M  (LPSYSREG_LP_SCRATCH4_V << LPSYSREG_LP_SCRATCH4_S)
#define LPSYSREG_LP_SCRATCH4_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH4_S  0

/** LPSYSREG_LP_STORE5_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE5_REG (DR_REG_LP_SYS_BASE + 0x40)
/** LPSYSREG_LP_SCRATCH5 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH5    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH5_M  (LPSYSREG_LP_SCRATCH5_V << LPSYSREG_LP_SCRATCH5_S)
#define LPSYSREG_LP_SCRATCH5_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH5_S  0

/** LPSYSREG_LP_STORE6_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE6_REG (DR_REG_LP_SYS_BASE + 0x44)
/** LPSYSREG_LP_SCRATCH6 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH6    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH6_M  (LPSYSREG_LP_SCRATCH6_V << LPSYSREG_LP_SCRATCH6_S)
#define LPSYSREG_LP_SCRATCH6_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH6_S  0

/** LPSYSREG_LP_STORE7_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE7_REG (DR_REG_LP_SYS_BASE + 0x48)
/** LPSYSREG_LP_SCRATCH7 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH7    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH7_M  (LPSYSREG_LP_SCRATCH7_V << LPSYSREG_LP_SCRATCH7_S)
#define LPSYSREG_LP_SCRATCH7_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH7_S  0

/** LPSYSREG_LP_STORE8_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE8_REG (DR_REG_LP_SYS_BASE + 0x4c)
/** LPSYSREG_LP_SCRATCH8 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH8    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH8_M  (LPSYSREG_LP_SCRATCH8_V << LPSYSREG_LP_SCRATCH8_S)
#define LPSYSREG_LP_SCRATCH8_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH8_S  0

/** LPSYSREG_LP_STORE9_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE9_REG (DR_REG_LP_SYS_BASE + 0x50)
/** LPSYSREG_LP_SCRATCH9 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH9    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH9_M  (LPSYSREG_LP_SCRATCH9_V << LPSYSREG_LP_SCRATCH9_S)
#define LPSYSREG_LP_SCRATCH9_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH9_S  0

/** LPSYSREG_LP_STORE10_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE10_REG (DR_REG_LP_SYS_BASE + 0x54)
/** LPSYSREG_LP_SCRATCH10 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH10    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH10_M  (LPSYSREG_LP_SCRATCH10_V << LPSYSREG_LP_SCRATCH10_S)
#define LPSYSREG_LP_SCRATCH10_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH10_S  0

/** LPSYSREG_LP_STORE11_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE11_REG (DR_REG_LP_SYS_BASE + 0x58)
/** LPSYSREG_LP_SCRATCH11 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH11    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH11_M  (LPSYSREG_LP_SCRATCH11_V << LPSYSREG_LP_SCRATCH11_S)
#define LPSYSREG_LP_SCRATCH11_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH11_S  0

/** LPSYSREG_LP_STORE12_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE12_REG (DR_REG_LP_SYS_BASE + 0x5c)
/** LPSYSREG_LP_SCRATCH12 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH12    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH12_M  (LPSYSREG_LP_SCRATCH12_V << LPSYSREG_LP_SCRATCH12_S)
#define LPSYSREG_LP_SCRATCH12_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH12_S  0

/** LPSYSREG_LP_STORE13_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE13_REG (DR_REG_LP_SYS_BASE + 0x60)
/** LPSYSREG_LP_SCRATCH13 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH13    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH13_M  (LPSYSREG_LP_SCRATCH13_V << LPSYSREG_LP_SCRATCH13_S)
#define LPSYSREG_LP_SCRATCH13_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH13_S  0

/** LPSYSREG_LP_STORE14_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE14_REG (DR_REG_LP_SYS_BASE + 0x64)
/** LPSYSREG_LP_SCRATCH14 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH14    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH14_M  (LPSYSREG_LP_SCRATCH14_V << LPSYSREG_LP_SCRATCH14_S)
#define LPSYSREG_LP_SCRATCH14_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH14_S  0

/** LPSYSREG_LP_STORE15_REG register
 *  need_des
 */
#define LPSYSREG_LP_STORE15_REG (DR_REG_LP_SYS_BASE + 0x68)
/** LPSYSREG_LP_SCRATCH15 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_SCRATCH15    0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH15_M  (LPSYSREG_LP_SCRATCH15_V << LPSYSREG_LP_SCRATCH15_S)
#define LPSYSREG_LP_SCRATCH15_V  0xFFFFFFFFU
#define LPSYSREG_LP_SCRATCH15_S  0

/** LPSYSREG_LP_PROBEA_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_PROBEA_CTRL_REG (DR_REG_LP_SYS_BASE + 0x6c)
/** LPSYSREG_PROBE_A_MOD_SEL : R/W; bitpos: [15:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_A_MOD_SEL    0x0000FFFFU
#define LPSYSREG_PROBE_A_MOD_SEL_M  (LPSYSREG_PROBE_A_MOD_SEL_V << LPSYSREG_PROBE_A_MOD_SEL_S)
#define LPSYSREG_PROBE_A_MOD_SEL_V  0x0000FFFFU
#define LPSYSREG_PROBE_A_MOD_SEL_S  0
/** LPSYSREG_PROBE_A_TOP_SEL : R/W; bitpos: [23:16]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_A_TOP_SEL    0x000000FFU
#define LPSYSREG_PROBE_A_TOP_SEL_M  (LPSYSREG_PROBE_A_TOP_SEL_V << LPSYSREG_PROBE_A_TOP_SEL_S)
#define LPSYSREG_PROBE_A_TOP_SEL_V  0x000000FFU
#define LPSYSREG_PROBE_A_TOP_SEL_S  16
/** LPSYSREG_PROBE_L_SEL : R/W; bitpos: [25:24]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_L_SEL    0x00000003U
#define LPSYSREG_PROBE_L_SEL_M  (LPSYSREG_PROBE_L_SEL_V << LPSYSREG_PROBE_L_SEL_S)
#define LPSYSREG_PROBE_L_SEL_V  0x00000003U
#define LPSYSREG_PROBE_L_SEL_S  24
/** LPSYSREG_PROBE_H_SEL : R/W; bitpos: [27:26]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_H_SEL    0x00000003U
#define LPSYSREG_PROBE_H_SEL_M  (LPSYSREG_PROBE_H_SEL_V << LPSYSREG_PROBE_H_SEL_S)
#define LPSYSREG_PROBE_H_SEL_V  0x00000003U
#define LPSYSREG_PROBE_H_SEL_S  26
/** LPSYSREG_PROBE_GLOBAL_EN : R/W; bitpos: [28]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_GLOBAL_EN    (BIT(28))
#define LPSYSREG_PROBE_GLOBAL_EN_M  (LPSYSREG_PROBE_GLOBAL_EN_V << LPSYSREG_PROBE_GLOBAL_EN_S)
#define LPSYSREG_PROBE_GLOBAL_EN_V  0x00000001U
#define LPSYSREG_PROBE_GLOBAL_EN_S  28

/** LPSYSREG_LP_PROBEB_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_PROBEB_CTRL_REG (DR_REG_LP_SYS_BASE + 0x70)
/** LPSYSREG_PROBE_B_MOD_SEL : R/W; bitpos: [15:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_B_MOD_SEL    0x0000FFFFU
#define LPSYSREG_PROBE_B_MOD_SEL_M  (LPSYSREG_PROBE_B_MOD_SEL_V << LPSYSREG_PROBE_B_MOD_SEL_S)
#define LPSYSREG_PROBE_B_MOD_SEL_V  0x0000FFFFU
#define LPSYSREG_PROBE_B_MOD_SEL_S  0
/** LPSYSREG_PROBE_B_TOP_SEL : R/W; bitpos: [23:16]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_B_TOP_SEL    0x000000FFU
#define LPSYSREG_PROBE_B_TOP_SEL_M  (LPSYSREG_PROBE_B_TOP_SEL_V << LPSYSREG_PROBE_B_TOP_SEL_S)
#define LPSYSREG_PROBE_B_TOP_SEL_V  0x000000FFU
#define LPSYSREG_PROBE_B_TOP_SEL_S  16
/** LPSYSREG_PROBE_B_EN : R/W; bitpos: [24]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_B_EN    (BIT(24))
#define LPSYSREG_PROBE_B_EN_M  (LPSYSREG_PROBE_B_EN_V << LPSYSREG_PROBE_B_EN_S)
#define LPSYSREG_PROBE_B_EN_V  0x00000001U
#define LPSYSREG_PROBE_B_EN_S  24

/** LPSYSREG_LP_PROBE_OUT_REG register
 *  need_des
 */
#define LPSYSREG_LP_PROBE_OUT_REG (DR_REG_LP_SYS_BASE + 0x74)
/** LPSYSREG_PROBE_TOP_OUT : RO; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_PROBE_TOP_OUT    0xFFFFFFFFU
#define LPSYSREG_PROBE_TOP_OUT_M  (LPSYSREG_PROBE_TOP_OUT_V << LPSYSREG_PROBE_TOP_OUT_S)
#define LPSYSREG_PROBE_TOP_OUT_V  0xFFFFFFFFU
#define LPSYSREG_PROBE_TOP_OUT_S  0

/** LPSYSREG_F2S_APB_BRG_CNTL_REG register
 *  need_des
 */
#define LPSYSREG_F2S_APB_BRG_CNTL_REG (DR_REG_LP_SYS_BASE + 0x9c)
/** LPSYSREG_F2S_APB_POSTW_EN : R/W; bitpos: [0]; default: 0;
 *  reserved
 */
#define LPSYSREG_F2S_APB_POSTW_EN    (BIT(0))
#define LPSYSREG_F2S_APB_POSTW_EN_M  (LPSYSREG_F2S_APB_POSTW_EN_V << LPSYSREG_F2S_APB_POSTW_EN_S)
#define LPSYSREG_F2S_APB_POSTW_EN_V  0x00000001U
#define LPSYSREG_F2S_APB_POSTW_EN_S  0

/** LPSYSREG_USB_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_USB_CTRL_REG (DR_REG_LP_SYS_BASE + 0x100)
/** LPSYSREG_SW_HW_USB_PHY_SEL : R/W; bitpos: [0]; default: 0;
 *  need_des
 */
#define LPSYSREG_SW_HW_USB_PHY_SEL    (BIT(0))
#define LPSYSREG_SW_HW_USB_PHY_SEL_M  (LPSYSREG_SW_HW_USB_PHY_SEL_V << LPSYSREG_SW_HW_USB_PHY_SEL_S)
#define LPSYSREG_SW_HW_USB_PHY_SEL_V  0x00000001U
#define LPSYSREG_SW_HW_USB_PHY_SEL_S  0
/** LPSYSREG_SW_USB_PHY_SEL : R/W; bitpos: [1]; default: 0;
 *  need_des
 */
#define LPSYSREG_SW_USB_PHY_SEL    (BIT(1))
#define LPSYSREG_SW_USB_PHY_SEL_M  (LPSYSREG_SW_USB_PHY_SEL_V << LPSYSREG_SW_USB_PHY_SEL_S)
#define LPSYSREG_SW_USB_PHY_SEL_V  0x00000001U
#define LPSYSREG_SW_USB_PHY_SEL_S  1
/** LPSYSREG_USBOTG20_WAKEUP_CLR : WT; bitpos: [2]; default: 0;
 *  clear usb wakeup to PMU.
 */
#define LPSYSREG_USBOTG20_WAKEUP_CLR    (BIT(2))
#define LPSYSREG_USBOTG20_WAKEUP_CLR_M  (LPSYSREG_USBOTG20_WAKEUP_CLR_V << LPSYSREG_USBOTG20_WAKEUP_CLR_S)
#define LPSYSREG_USBOTG20_WAKEUP_CLR_V  0x00000001U
#define LPSYSREG_USBOTG20_WAKEUP_CLR_S  2
/** LPSYSREG_USBOTG20_IN_SUSPEND : R/W; bitpos: [3]; default: 0;
 *  indicate usb otg2.0 is in suspend state.
 */
#define LPSYSREG_USBOTG20_IN_SUSPEND    (BIT(3))
#define LPSYSREG_USBOTG20_IN_SUSPEND_M  (LPSYSREG_USBOTG20_IN_SUSPEND_V << LPSYSREG_USBOTG20_IN_SUSPEND_S)
#define LPSYSREG_USBOTG20_IN_SUSPEND_V  0x00000001U
#define LPSYSREG_USBOTG20_IN_SUSPEND_S  3

/** LPSYSREG_ANA_XPD_PAD_GROUP_REG register
 *  need_des
 */
#define LPSYSREG_ANA_XPD_PAD_GROUP_REG (DR_REG_LP_SYS_BASE + 0x10c)
/** LPSYSREG_ANA_REG_XPD_PAD_GROUP : R/W; bitpos: [7:0]; default: 255;
 *  Set 1 to power up pad group
 */
#define LPSYSREG_ANA_REG_XPD_PAD_GROUP    0x000000FFU
#define LPSYSREG_ANA_REG_XPD_PAD_GROUP_M  (LPSYSREG_ANA_REG_XPD_PAD_GROUP_V << LPSYSREG_ANA_REG_XPD_PAD_GROUP_S)
#define LPSYSREG_ANA_REG_XPD_PAD_GROUP_V  0x000000FFU
#define LPSYSREG_ANA_REG_XPD_PAD_GROUP_S  0

/** LPSYSREG_LP_TCM_RAM_RDN_ECO_CS_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_CS_REG (DR_REG_LP_SYS_BASE + 0x110)
/** LPSYSREG_LP_TCM_RAM_RDN_ECO_EN : R/W; bitpos: [0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_EN    (BIT(0))
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_EN_M  (LPSYSREG_LP_TCM_RAM_RDN_ECO_EN_V << LPSYSREG_LP_TCM_RAM_RDN_ECO_EN_S)
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_EN_V  0x00000001U
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_EN_S  0
/** LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT : RO; bitpos: [1]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT    (BIT(1))
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT_M  (LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT_V << LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT_S)
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT_V  0x00000001U
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_RESULT_S  1

/** LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_REG (DR_REG_LP_SYS_BASE + 0x114)
/** LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW    0xFFFFFFFFU
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_M  (LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_V << LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_S)
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_V  0xFFFFFFFFU
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_LOW_S  0

/** LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_REG (DR_REG_LP_SYS_BASE + 0x118)
/** LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH : R/W; bitpos: [31:0]; default: 4294967295;
 *  need_des
 */
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH    0xFFFFFFFFU
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_M  (LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_V << LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_S)
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_V  0xFFFFFFFFU
#define LPSYSREG_LP_TCM_RAM_RDN_ECO_HIGH_S  0

/** LPSYSREG_LP_TCM_ROM_RDN_ECO_CS_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_CS_REG (DR_REG_LP_SYS_BASE + 0x11c)
/** LPSYSREG_LP_TCM_ROM_RDN_ECO_EN : R/W; bitpos: [0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_EN    (BIT(0))
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_EN_M  (LPSYSREG_LP_TCM_ROM_RDN_ECO_EN_V << LPSYSREG_LP_TCM_ROM_RDN_ECO_EN_S)
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_EN_V  0x00000001U
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_EN_S  0
/** LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT : RO; bitpos: [1]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT    (BIT(1))
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT_M  (LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT_V << LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT_S)
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT_V  0x00000001U
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_RESULT_S  1

/** LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_REG (DR_REG_LP_SYS_BASE + 0x120)
/** LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW    0xFFFFFFFFU
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_M  (LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_V << LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_S)
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_V  0xFFFFFFFFU
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_LOW_S  0

/** LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_REG register
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_REG (DR_REG_LP_SYS_BASE + 0x124)
/** LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH : R/W; bitpos: [31:0]; default: 4294967295;
 *  need_des
 */
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH    0xFFFFFFFFU
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_M  (LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_V << LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_S)
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_V  0xFFFFFFFFU
#define LPSYSREG_LP_TCM_ROM_RDN_ECO_HIGH_S  0

/** LPSYSREG_HP_ROOT_CLK_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_HP_ROOT_CLK_CTRL_REG (DR_REG_LP_SYS_BASE + 0x130)
/** LPSYSREG_CPU_CLK_EN : R/W; bitpos: [0]; default: 1;
 *  clock gate enable for hp cpu root 400M clk
 */
#define LPSYSREG_CPU_CLK_EN    (BIT(0))
#define LPSYSREG_CPU_CLK_EN_M  (LPSYSREG_CPU_CLK_EN_V << LPSYSREG_CPU_CLK_EN_S)
#define LPSYSREG_CPU_CLK_EN_V  0x00000001U
#define LPSYSREG_CPU_CLK_EN_S  0
/** LPSYSREG_SYS_CLK_EN : R/W; bitpos: [1]; default: 1;
 *  clock gate enable for hp sys root 480M clk
 */
#define LPSYSREG_SYS_CLK_EN    (BIT(1))
#define LPSYSREG_SYS_CLK_EN_M  (LPSYSREG_SYS_CLK_EN_V << LPSYSREG_SYS_CLK_EN_S)
#define LPSYSREG_SYS_CLK_EN_V  0x00000001U
#define LPSYSREG_SYS_CLK_EN_S  1

/** LPSYSREG_LP_PMU_RDN_ECO_LOW_REG register
 *  need_des
 */
#define LPSYSREG_LP_PMU_RDN_ECO_LOW_REG (DR_REG_LP_SYS_BASE + 0x138)
/** LPSYSREG_PMU_RDN_ECO_LOW : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_PMU_RDN_ECO_LOW    0xFFFFFFFFU
#define LPSYSREG_PMU_RDN_ECO_LOW_M  (LPSYSREG_PMU_RDN_ECO_LOW_V << LPSYSREG_PMU_RDN_ECO_LOW_S)
#define LPSYSREG_PMU_RDN_ECO_LOW_V  0xFFFFFFFFU
#define LPSYSREG_PMU_RDN_ECO_LOW_S  0

/** LPSYSREG_LP_PMU_RDN_ECO_HIGH_REG register
 *  need_des
 */
#define LPSYSREG_LP_PMU_RDN_ECO_HIGH_REG (DR_REG_LP_SYS_BASE + 0x13c)
/** LPSYSREG_PMU_RDN_ECO_HIGH : R/W; bitpos: [31:0]; default: 4294967295;
 *  need_des
 */
#define LPSYSREG_PMU_RDN_ECO_HIGH    0xFFFFFFFFU
#define LPSYSREG_PMU_RDN_ECO_HIGH_M  (LPSYSREG_PMU_RDN_ECO_HIGH_V << LPSYSREG_PMU_RDN_ECO_HIGH_S)
#define LPSYSREG_PMU_RDN_ECO_HIGH_V  0xFFFFFFFFU
#define LPSYSREG_PMU_RDN_ECO_HIGH_S  0

/** LPSYSREG_PAD_COMP0_REG register
 *  need_des
 */
#define LPSYSREG_PAD_COMP0_REG (DR_REG_LP_SYS_BASE + 0x148)
/** LPSYSREG_DREF_COMP0 : R/W; bitpos: [2:0]; default: 0;
 *  pad comp dref
 */
#define LPSYSREG_DREF_COMP0    0x00000007U
#define LPSYSREG_DREF_COMP0_M  (LPSYSREG_DREF_COMP0_V << LPSYSREG_DREF_COMP0_S)
#define LPSYSREG_DREF_COMP0_V  0x00000007U
#define LPSYSREG_DREF_COMP0_S  0
/** LPSYSREG_MODE_COMP0 : R/W; bitpos: [3]; default: 0;
 *  pad comp mode
 */
#define LPSYSREG_MODE_COMP0    (BIT(3))
#define LPSYSREG_MODE_COMP0_M  (LPSYSREG_MODE_COMP0_V << LPSYSREG_MODE_COMP0_S)
#define LPSYSREG_MODE_COMP0_V  0x00000001U
#define LPSYSREG_MODE_COMP0_S  3
/** LPSYSREG_XPD_COMP0 : R/W; bitpos: [4]; default: 0;
 *  pad comp xpd
 */
#define LPSYSREG_XPD_COMP0    (BIT(4))
#define LPSYSREG_XPD_COMP0_M  (LPSYSREG_XPD_COMP0_V << LPSYSREG_XPD_COMP0_S)
#define LPSYSREG_XPD_COMP0_V  0x00000001U
#define LPSYSREG_XPD_COMP0_S  4

/** LPSYSREG_PAD_COMP1_REG register
 *  need_des
 */
#define LPSYSREG_PAD_COMP1_REG (DR_REG_LP_SYS_BASE + 0x14c)
/** LPSYSREG_DREF_COMP1 : R/W; bitpos: [2:0]; default: 0;
 *  pad comp dref
 */
#define LPSYSREG_DREF_COMP1    0x00000007U
#define LPSYSREG_DREF_COMP1_M  (LPSYSREG_DREF_COMP1_V << LPSYSREG_DREF_COMP1_S)
#define LPSYSREG_DREF_COMP1_V  0x00000007U
#define LPSYSREG_DREF_COMP1_S  0
/** LPSYSREG_MODE_COMP1 : R/W; bitpos: [3]; default: 0;
 *  pad comp mode
 */
#define LPSYSREG_MODE_COMP1    (BIT(3))
#define LPSYSREG_MODE_COMP1_M  (LPSYSREG_MODE_COMP1_V << LPSYSREG_MODE_COMP1_S)
#define LPSYSREG_MODE_COMP1_V  0x00000001U
#define LPSYSREG_MODE_COMP1_S  3
/** LPSYSREG_XPD_COMP1 : R/W; bitpos: [4]; default: 0;
 *  pad comp xpd
 */
#define LPSYSREG_XPD_COMP1    (BIT(4))
#define LPSYSREG_XPD_COMP1_M  (LPSYSREG_XPD_COMP1_V << LPSYSREG_XPD_COMP1_S)
#define LPSYSREG_XPD_COMP1_V  0x00000001U
#define LPSYSREG_XPD_COMP1_S  4

/** LPSYSREG_BACKUP_DMA_CFG0_REG register
 *  need_des
 */
#define LPSYSREG_BACKUP_DMA_CFG0_REG (DR_REG_LP_SYS_BASE + 0x154)
/** LPSYSREG_BURST_LIMIT_AON : R/W; bitpos: [4:0]; default: 10;
 *  need_des
 */
#define LPSYSREG_BURST_LIMIT_AON    0x0000001FU
#define LPSYSREG_BURST_LIMIT_AON_M  (LPSYSREG_BURST_LIMIT_AON_V << LPSYSREG_BURST_LIMIT_AON_S)
#define LPSYSREG_BURST_LIMIT_AON_V  0x0000001FU
#define LPSYSREG_BURST_LIMIT_AON_S  0
/** LPSYSREG_READ_INTERVAL_AON : R/W; bitpos: [11:5]; default: 10;
 *  need_des
 */
#define LPSYSREG_READ_INTERVAL_AON    0x0000007FU
#define LPSYSREG_READ_INTERVAL_AON_M  (LPSYSREG_READ_INTERVAL_AON_V << LPSYSREG_READ_INTERVAL_AON_S)
#define LPSYSREG_READ_INTERVAL_AON_V  0x0000007FU
#define LPSYSREG_READ_INTERVAL_AON_S  5
/** LPSYSREG_LINK_BACKUP_TOUT_THRES_AON : R/W; bitpos: [21:12]; default: 100;
 *  need_des
 */
#define LPSYSREG_LINK_BACKUP_TOUT_THRES_AON    0x000003FFU
#define LPSYSREG_LINK_BACKUP_TOUT_THRES_AON_M  (LPSYSREG_LINK_BACKUP_TOUT_THRES_AON_V << LPSYSREG_LINK_BACKUP_TOUT_THRES_AON_S)
#define LPSYSREG_LINK_BACKUP_TOUT_THRES_AON_V  0x000003FFU
#define LPSYSREG_LINK_BACKUP_TOUT_THRES_AON_S  12
/** LPSYSREG_LINK_TOUT_THRES_AON : R/W; bitpos: [31:22]; default: 100;
 *  need_des
 */
#define LPSYSREG_LINK_TOUT_THRES_AON    0x000003FFU
#define LPSYSREG_LINK_TOUT_THRES_AON_M  (LPSYSREG_LINK_TOUT_THRES_AON_V << LPSYSREG_LINK_TOUT_THRES_AON_S)
#define LPSYSREG_LINK_TOUT_THRES_AON_V  0x000003FFU
#define LPSYSREG_LINK_TOUT_THRES_AON_S  22

/** LPSYSREG_BACKUP_DMA_CFG1_REG register
 *  need_des
 */
#define LPSYSREG_BACKUP_DMA_CFG1_REG (DR_REG_LP_SYS_BASE + 0x158)
/** LPSYSREG_AON_BYPASS : R/W; bitpos: [31]; default: 0;
 *  need_des
 */
#define LPSYSREG_AON_BYPASS    (BIT(31))
#define LPSYSREG_AON_BYPASS_M  (LPSYSREG_AON_BYPASS_V << LPSYSREG_AON_BYPASS_S)
#define LPSYSREG_AON_BYPASS_V  0x00000001U
#define LPSYSREG_AON_BYPASS_S  31

/** LPSYSREG_BACKUP_DMA_CFG2_REG register
 *  need_des
 */
#define LPSYSREG_BACKUP_DMA_CFG2_REG (DR_REG_LP_SYS_BASE + 0x15c)
/** LPSYSREG_LINK_ADDR_AON : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LINK_ADDR_AON    0xFFFFFFFFU
#define LPSYSREG_LINK_ADDR_AON_M  (LPSYSREG_LINK_ADDR_AON_V << LPSYSREG_LINK_ADDR_AON_S)
#define LPSYSREG_LINK_ADDR_AON_V  0xFFFFFFFFU
#define LPSYSREG_LINK_ADDR_AON_S  0

/** LPSYSREG_BOOT_ADDR_HP_CORE1_REG register
 *  need_des
 */
#define LPSYSREG_BOOT_ADDR_HP_CORE1_REG (DR_REG_LP_SYS_BASE + 0x164)
/** LPSYSREG_BOOT_ADDR_HP_CORE1 : R/W; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_BOOT_ADDR_HP_CORE1    0xFFFFFFFFU
#define LPSYSREG_BOOT_ADDR_HP_CORE1_M  (LPSYSREG_BOOT_ADDR_HP_CORE1_V << LPSYSREG_BOOT_ADDR_HP_CORE1_S)
#define LPSYSREG_BOOT_ADDR_HP_CORE1_V  0xFFFFFFFFU
#define LPSYSREG_BOOT_ADDR_HP_CORE1_S  0

/** LPSYSREG_LP_ADDRHOLE_ADDR_REG register
 *  need_des
 */
#define LPSYSREG_LP_ADDRHOLE_ADDR_REG (DR_REG_LP_SYS_BASE + 0x168)
/** LPSYSREG_LP_ADDRHOLE_ADDR : RO; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_ADDRHOLE_ADDR    0xFFFFFFFFU
#define LPSYSREG_LP_ADDRHOLE_ADDR_M  (LPSYSREG_LP_ADDRHOLE_ADDR_V << LPSYSREG_LP_ADDRHOLE_ADDR_S)
#define LPSYSREG_LP_ADDRHOLE_ADDR_V  0xFFFFFFFFU
#define LPSYSREG_LP_ADDRHOLE_ADDR_S  0

/** LPSYSREG_LP_ADDRHOLE_INFO_REG register
 *  need_des
 */
#define LPSYSREG_LP_ADDRHOLE_INFO_REG (DR_REG_LP_SYS_BASE + 0x16c)
/** LPSYSREG_LP_ADDRHOLE_ID : RO; bitpos: [4:0]; default: 0;
 *  master id: 5'h0: hp core0, 5'h1:hp core1, 5'h2:lp core, 5'h3:usb otg11, 5'h4:
 *  regdma, 5'h5: gmac, 5'h5 sdmmc, 5'h7: usbotg20, 5'h8: trace0, 5'h9: trace1, 5'ha
 *  tcm monitor, 5'hb: l2mem monitor. 5'h10~5'h1f: ahb pdma.
 */
#define LPSYSREG_LP_ADDRHOLE_ID    0x0000001FU
#define LPSYSREG_LP_ADDRHOLE_ID_M  (LPSYSREG_LP_ADDRHOLE_ID_V << LPSYSREG_LP_ADDRHOLE_ID_S)
#define LPSYSREG_LP_ADDRHOLE_ID_V  0x0000001FU
#define LPSYSREG_LP_ADDRHOLE_ID_S  0
/** LPSYSREG_LP_ADDRHOLE_WR : RO; bitpos: [5]; default: 0;
 *  1:write trans, 0: read trans.
 */
#define LPSYSREG_LP_ADDRHOLE_WR    (BIT(5))
#define LPSYSREG_LP_ADDRHOLE_WR_M  (LPSYSREG_LP_ADDRHOLE_WR_V << LPSYSREG_LP_ADDRHOLE_WR_S)
#define LPSYSREG_LP_ADDRHOLE_WR_V  0x00000001U
#define LPSYSREG_LP_ADDRHOLE_WR_S  5
/** LPSYSREG_LP_ADDRHOLE_SECURE : RO; bitpos: [6]; default: 0;
 *  1: illegal address access, 0: access without permission
 */
#define LPSYSREG_LP_ADDRHOLE_SECURE    (BIT(6))
#define LPSYSREG_LP_ADDRHOLE_SECURE_M  (LPSYSREG_LP_ADDRHOLE_SECURE_V << LPSYSREG_LP_ADDRHOLE_SECURE_S)
#define LPSYSREG_LP_ADDRHOLE_SECURE_V  0x00000001U
#define LPSYSREG_LP_ADDRHOLE_SECURE_S  6

/** LPSYSREG_INT_RAW_REG register
 *  raw interrupt register
 */
#define LPSYSREG_INT_RAW_REG (DR_REG_LP_SYS_BASE + 0x170)
/** LPSYSREG_LP_ADDRHOLE_INT_RAW : R/SS/WTC; bitpos: [0]; default: 0;
 *  the raw interrupt status of lp addrhole(for lp peri  and lp ram tee apm, and lp
 *  matrix default slave)
 */
#define LPSYSREG_LP_ADDRHOLE_INT_RAW    (BIT(0))
#define LPSYSREG_LP_ADDRHOLE_INT_RAW_M  (LPSYSREG_LP_ADDRHOLE_INT_RAW_V << LPSYSREG_LP_ADDRHOLE_INT_RAW_S)
#define LPSYSREG_LP_ADDRHOLE_INT_RAW_V  0x00000001U
#define LPSYSREG_LP_ADDRHOLE_INT_RAW_S  0
/** LPSYSREG_IDBUS_ADDRHOLE_INT_RAW : R/SS/WTC; bitpos: [1]; default: 0;
 *  the raw interrupt status of idbus addrhole(only for lp cpu ibus and dbus)
 */
#define LPSYSREG_IDBUS_ADDRHOLE_INT_RAW    (BIT(1))
#define LPSYSREG_IDBUS_ADDRHOLE_INT_RAW_M  (LPSYSREG_IDBUS_ADDRHOLE_INT_RAW_V << LPSYSREG_IDBUS_ADDRHOLE_INT_RAW_S)
#define LPSYSREG_IDBUS_ADDRHOLE_INT_RAW_V  0x00000001U
#define LPSYSREG_IDBUS_ADDRHOLE_INT_RAW_S  1
/** LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW : R/SS/WTC; bitpos: [2]; default: 0;
 *  the raw interrupt status of lp core ahb bus timeout
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW    (BIT(2))
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW_M  (LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW_V << LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW_S)
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW_V  0x00000001U
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_RAW_S  2
/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW : R/SS/WTC; bitpos: [3]; default: 0;
 *  the raw interrupt status of lp core  ibus timeout
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW    (BIT(3))
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW_M  (LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW_V << LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW_S)
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW_V  0x00000001U
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_RAW_S  3
/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW : R/SS/WTC; bitpos: [4]; default: 0;
 *  the raw interrupt status of lp core  dbus timeout
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW    (BIT(4))
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW_M  (LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW_V << LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW_S)
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW_V  0x00000001U
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_RAW_S  4
/** LPSYSREG_ETM_TASK_ULP_INT_RAW : R/SS/WTC; bitpos: [5]; default: 0;
 *  the raw interrupt status of etm task ulp
 */
#define LPSYSREG_ETM_TASK_ULP_INT_RAW    (BIT(5))
#define LPSYSREG_ETM_TASK_ULP_INT_RAW_M  (LPSYSREG_ETM_TASK_ULP_INT_RAW_V << LPSYSREG_ETM_TASK_ULP_INT_RAW_S)
#define LPSYSREG_ETM_TASK_ULP_INT_RAW_V  0x00000001U
#define LPSYSREG_ETM_TASK_ULP_INT_RAW_S  5
/** LPSYSREG_SLOW_CLK_TICK_INT_RAW : R/SS/WTC; bitpos: [6]; default: 0;
 *  the raw interrupt status of slow_clk_tick
 */
#define LPSYSREG_SLOW_CLK_TICK_INT_RAW    (BIT(6))
#define LPSYSREG_SLOW_CLK_TICK_INT_RAW_M  (LPSYSREG_SLOW_CLK_TICK_INT_RAW_V << LPSYSREG_SLOW_CLK_TICK_INT_RAW_S)
#define LPSYSREG_SLOW_CLK_TICK_INT_RAW_V  0x00000001U
#define LPSYSREG_SLOW_CLK_TICK_INT_RAW_S  6

/** LPSYSREG_INT_ST_REG register
 *  masked interrupt register
 */
#define LPSYSREG_INT_ST_REG (DR_REG_LP_SYS_BASE + 0x174)
/** LPSYSREG_LP_ADDRHOLE_INT_ST : RO; bitpos: [0]; default: 0;
 *  the masked interrupt status of lp addrhole (for lp peri  and lp ram tee apm, and lp
 *  matrix default slave)
 */
#define LPSYSREG_LP_ADDRHOLE_INT_ST    (BIT(0))
#define LPSYSREG_LP_ADDRHOLE_INT_ST_M  (LPSYSREG_LP_ADDRHOLE_INT_ST_V << LPSYSREG_LP_ADDRHOLE_INT_ST_S)
#define LPSYSREG_LP_ADDRHOLE_INT_ST_V  0x00000001U
#define LPSYSREG_LP_ADDRHOLE_INT_ST_S  0
/** LPSYSREG_IDBUS_ADDRHOLE_INT_ST : RO; bitpos: [1]; default: 0;
 *  the masked interrupt status of idbus addrhole(only for lp cpu ibus and dbus)
 */
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ST    (BIT(1))
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ST_M  (LPSYSREG_IDBUS_ADDRHOLE_INT_ST_V << LPSYSREG_IDBUS_ADDRHOLE_INT_ST_S)
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ST_V  0x00000001U
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ST_S  1
/** LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST : RO; bitpos: [2]; default: 0;
 *  the masked interrupt status of lp core ahb bus timeout
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST    (BIT(2))
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST_M  (LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST_V << LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST_S)
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST_V  0x00000001U
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ST_S  2
/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST : RO; bitpos: [3]; default: 0;
 *  the masked interrupt status of lp core  ibus timeout
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST    (BIT(3))
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST_M  (LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST_V << LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST_S)
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST_V  0x00000001U
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ST_S  3
/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST : RO; bitpos: [4]; default: 0;
 *  the masked interrupt status of lp core  dbus timeout
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST    (BIT(4))
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST_M  (LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST_V << LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST_S)
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST_V  0x00000001U
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ST_S  4
/** LPSYSREG_ETM_TASK_ULP_INT_ST : RO; bitpos: [5]; default: 0;
 *  the masked interrupt status of etm task ulp
 */
#define LPSYSREG_ETM_TASK_ULP_INT_ST    (BIT(5))
#define LPSYSREG_ETM_TASK_ULP_INT_ST_M  (LPSYSREG_ETM_TASK_ULP_INT_ST_V << LPSYSREG_ETM_TASK_ULP_INT_ST_S)
#define LPSYSREG_ETM_TASK_ULP_INT_ST_V  0x00000001U
#define LPSYSREG_ETM_TASK_ULP_INT_ST_S  5
/** LPSYSREG_SLOW_CLK_TICK_INT_ST : RO; bitpos: [6]; default: 0;
 *  the masked interrupt status of slow_clk_tick
 */
#define LPSYSREG_SLOW_CLK_TICK_INT_ST    (BIT(6))
#define LPSYSREG_SLOW_CLK_TICK_INT_ST_M  (LPSYSREG_SLOW_CLK_TICK_INT_ST_V << LPSYSREG_SLOW_CLK_TICK_INT_ST_S)
#define LPSYSREG_SLOW_CLK_TICK_INT_ST_V  0x00000001U
#define LPSYSREG_SLOW_CLK_TICK_INT_ST_S  6

/** LPSYSREG_INT_ENA_REG register
 *  masked interrupt register
 */
#define LPSYSREG_INT_ENA_REG (DR_REG_LP_SYS_BASE + 0x178)
/** LPSYSREG_LP_ADDRHOLE_INT_ENA : R/W; bitpos: [0]; default: 0;
 *  Write 1 to enable lp addrhole int
 */
#define LPSYSREG_LP_ADDRHOLE_INT_ENA    (BIT(0))
#define LPSYSREG_LP_ADDRHOLE_INT_ENA_M  (LPSYSREG_LP_ADDRHOLE_INT_ENA_V << LPSYSREG_LP_ADDRHOLE_INT_ENA_S)
#define LPSYSREG_LP_ADDRHOLE_INT_ENA_V  0x00000001U
#define LPSYSREG_LP_ADDRHOLE_INT_ENA_S  0
/** LPSYSREG_IDBUS_ADDRHOLE_INT_ENA : R/W; bitpos: [1]; default: 0;
 *  Write 1 to enable idbus addrhole int
 */
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ENA    (BIT(1))
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ENA_M  (LPSYSREG_IDBUS_ADDRHOLE_INT_ENA_V << LPSYSREG_IDBUS_ADDRHOLE_INT_ENA_S)
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ENA_V  0x00000001U
#define LPSYSREG_IDBUS_ADDRHOLE_INT_ENA_S  1
/** LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA : R/W; bitpos: [2]; default: 0;
 *  Write 1 to enable lp_core_ahb_timeout int
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA    (BIT(2))
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA_M  (LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA_V << LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA_S)
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA_V  0x00000001U
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_ENA_S  2
/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA : R/W; bitpos: [3]; default: 0;
 *  Write 1 to enable lp_core_ibus_timeout int
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA    (BIT(3))
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA_M  (LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA_V << LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA_S)
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA_V  0x00000001U
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_ENA_S  3
/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA : R/W; bitpos: [4]; default: 0;
 *  Write 1 to enable lp_core_dbus_timeout int
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA    (BIT(4))
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA_M  (LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA_V << LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA_S)
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA_V  0x00000001U
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_ENA_S  4
/** LPSYSREG_ETM_TASK_ULP_INT_ENA : R/W; bitpos: [5]; default: 0;
 *  Write 1 to enable etm task ulp int
 */
#define LPSYSREG_ETM_TASK_ULP_INT_ENA    (BIT(5))
#define LPSYSREG_ETM_TASK_ULP_INT_ENA_M  (LPSYSREG_ETM_TASK_ULP_INT_ENA_V << LPSYSREG_ETM_TASK_ULP_INT_ENA_S)
#define LPSYSREG_ETM_TASK_ULP_INT_ENA_V  0x00000001U
#define LPSYSREG_ETM_TASK_ULP_INT_ENA_S  5
/** LPSYSREG_SLOW_CLK_TICK_INT_ENA : R/W; bitpos: [6]; default: 0;
 *  Write 1 to enable slow_clk_tick int
 */
#define LPSYSREG_SLOW_CLK_TICK_INT_ENA    (BIT(6))
#define LPSYSREG_SLOW_CLK_TICK_INT_ENA_M  (LPSYSREG_SLOW_CLK_TICK_INT_ENA_V << LPSYSREG_SLOW_CLK_TICK_INT_ENA_S)
#define LPSYSREG_SLOW_CLK_TICK_INT_ENA_V  0x00000001U
#define LPSYSREG_SLOW_CLK_TICK_INT_ENA_S  6

/** LPSYSREG_INT_CLR_REG register
 *  interrupt clear register
 */
#define LPSYSREG_INT_CLR_REG (DR_REG_LP_SYS_BASE + 0x17c)
/** LPSYSREG_LP_ADDRHOLE_INT_CLR : WT; bitpos: [0]; default: 0;
 *  write 1 to clear lp addrhole int
 */
#define LPSYSREG_LP_ADDRHOLE_INT_CLR    (BIT(0))
#define LPSYSREG_LP_ADDRHOLE_INT_CLR_M  (LPSYSREG_LP_ADDRHOLE_INT_CLR_V << LPSYSREG_LP_ADDRHOLE_INT_CLR_S)
#define LPSYSREG_LP_ADDRHOLE_INT_CLR_V  0x00000001U
#define LPSYSREG_LP_ADDRHOLE_INT_CLR_S  0
/** LPSYSREG_IDBUS_ADDRHOLE_INT_CLR : WT; bitpos: [1]; default: 0;
 *  write 1 to clear idbus addrhole int
 */
#define LPSYSREG_IDBUS_ADDRHOLE_INT_CLR    (BIT(1))
#define LPSYSREG_IDBUS_ADDRHOLE_INT_CLR_M  (LPSYSREG_IDBUS_ADDRHOLE_INT_CLR_V << LPSYSREG_IDBUS_ADDRHOLE_INT_CLR_S)
#define LPSYSREG_IDBUS_ADDRHOLE_INT_CLR_V  0x00000001U
#define LPSYSREG_IDBUS_ADDRHOLE_INT_CLR_S  1
/** LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR : WT; bitpos: [2]; default: 0;
 *  Write 1 to clear lp_core_ahb_timeout int
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR    (BIT(2))
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR_M  (LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR_V << LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR_S)
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR_V  0x00000001U
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_INT_CLR_S  2
/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR : WT; bitpos: [3]; default: 0;
 *  Write 1 to clear lp_core_ibus_timeout int
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR    (BIT(3))
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR_M  (LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR_V << LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR_S)
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR_V  0x00000001U
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_INT_CLR_S  3
/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR : WT; bitpos: [4]; default: 0;
 *  Write 1 to clear lp_core_dbus_timeout int
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR    (BIT(4))
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR_M  (LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR_V << LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR_S)
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR_V  0x00000001U
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_INT_CLR_S  4
/** LPSYSREG_ETM_TASK_ULP_INT_CLR : WT; bitpos: [5]; default: 0;
 *  Write 1 to clear etm tasl ulp int
 */
#define LPSYSREG_ETM_TASK_ULP_INT_CLR    (BIT(5))
#define LPSYSREG_ETM_TASK_ULP_INT_CLR_M  (LPSYSREG_ETM_TASK_ULP_INT_CLR_V << LPSYSREG_ETM_TASK_ULP_INT_CLR_S)
#define LPSYSREG_ETM_TASK_ULP_INT_CLR_V  0x00000001U
#define LPSYSREG_ETM_TASK_ULP_INT_CLR_S  5
/** LPSYSREG_SLOW_CLK_TICK_INT_CLR : WT; bitpos: [6]; default: 0;
 *  Write 1 to clear slow_clk_tick int
 */
#define LPSYSREG_SLOW_CLK_TICK_INT_CLR    (BIT(6))
#define LPSYSREG_SLOW_CLK_TICK_INT_CLR_M  (LPSYSREG_SLOW_CLK_TICK_INT_CLR_V << LPSYSREG_SLOW_CLK_TICK_INT_CLR_S)
#define LPSYSREG_SLOW_CLK_TICK_INT_CLR_V  0x00000001U
#define LPSYSREG_SLOW_CLK_TICK_INT_CLR_S  6

/** LPSYSREG_HP_MEM_AUX_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_HP_MEM_AUX_CTRL_REG (DR_REG_LP_SYS_BASE + 0x180)
/** LPSYSREG_HP_MEM_AUX_CTRL : R/W; bitpos: [31:0]; default: 8304;
 *  need_des
 */
#define LPSYSREG_HP_MEM_AUX_CTRL    0xFFFFFFFFU
#define LPSYSREG_HP_MEM_AUX_CTRL_M  (LPSYSREG_HP_MEM_AUX_CTRL_V << LPSYSREG_HP_MEM_AUX_CTRL_S)
#define LPSYSREG_HP_MEM_AUX_CTRL_V  0xFFFFFFFFU
#define LPSYSREG_HP_MEM_AUX_CTRL_S  0

/** LPSYSREG_LP_MEM_AUX_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_MEM_AUX_CTRL_REG (DR_REG_LP_SYS_BASE + 0x184)
/** LPSYSREG_LP_MEM_AUX_CTRL : R/W; bitpos: [31:0]; default: 8304;
 *  need_des
 */
#define LPSYSREG_LP_MEM_AUX_CTRL    0xFFFFFFFFU
#define LPSYSREG_LP_MEM_AUX_CTRL_M  (LPSYSREG_LP_MEM_AUX_CTRL_V << LPSYSREG_LP_MEM_AUX_CTRL_S)
#define LPSYSREG_LP_MEM_AUX_CTRL_V  0xFFFFFFFFU
#define LPSYSREG_LP_MEM_AUX_CTRL_S  0

/** LPSYSREG_HP_ROM_AUX_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_HP_ROM_AUX_CTRL_REG (DR_REG_LP_SYS_BASE + 0x188)
/** LPSYSREG_HP_ROM_AUX_CTRL : R/W; bitpos: [31:0]; default: 112;
 *  need_des
 */
#define LPSYSREG_HP_ROM_AUX_CTRL    0xFFFFFFFFU
#define LPSYSREG_HP_ROM_AUX_CTRL_M  (LPSYSREG_HP_ROM_AUX_CTRL_V << LPSYSREG_HP_ROM_AUX_CTRL_S)
#define LPSYSREG_HP_ROM_AUX_CTRL_V  0xFFFFFFFFU
#define LPSYSREG_HP_ROM_AUX_CTRL_S  0

/** LPSYSREG_LP_ROM_AUX_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_LP_ROM_AUX_CTRL_REG (DR_REG_LP_SYS_BASE + 0x18c)
/** LPSYSREG_LP_ROM_AUX_CTRL : R/W; bitpos: [31:0]; default: 112;
 *  need_des
 */
#define LPSYSREG_LP_ROM_AUX_CTRL    0xFFFFFFFFU
#define LPSYSREG_LP_ROM_AUX_CTRL_M  (LPSYSREG_LP_ROM_AUX_CTRL_V << LPSYSREG_LP_ROM_AUX_CTRL_S)
#define LPSYSREG_LP_ROM_AUX_CTRL_V  0xFFFFFFFFU
#define LPSYSREG_LP_ROM_AUX_CTRL_S  0

/** LPSYSREG_LP_CPU_DBG_PC_REG register
 *  need_des
 */
#define LPSYSREG_LP_CPU_DBG_PC_REG (DR_REG_LP_SYS_BASE + 0x190)
/** LPSYSREG_LP_CPU_DBG_PC : RO; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_CPU_DBG_PC    0xFFFFFFFFU
#define LPSYSREG_LP_CPU_DBG_PC_M  (LPSYSREG_LP_CPU_DBG_PC_V << LPSYSREG_LP_CPU_DBG_PC_S)
#define LPSYSREG_LP_CPU_DBG_PC_V  0xFFFFFFFFU
#define LPSYSREG_LP_CPU_DBG_PC_S  0

/** LPSYSREG_LP_CPU_EXC_PC_REG register
 *  need_des
 */
#define LPSYSREG_LP_CPU_EXC_PC_REG (DR_REG_LP_SYS_BASE + 0x194)
/** LPSYSREG_LP_CPU_EXC_PC : RO; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_LP_CPU_EXC_PC    0xFFFFFFFFU
#define LPSYSREG_LP_CPU_EXC_PC_M  (LPSYSREG_LP_CPU_EXC_PC_V << LPSYSREG_LP_CPU_EXC_PC_S)
#define LPSYSREG_LP_CPU_EXC_PC_V  0xFFFFFFFFU
#define LPSYSREG_LP_CPU_EXC_PC_S  0

/** LPSYSREG_IDBUS_ADDRHOLE_ADDR_REG register
 *  need_des
 */
#define LPSYSREG_IDBUS_ADDRHOLE_ADDR_REG (DR_REG_LP_SYS_BASE + 0x198)
/** LPSYSREG_IDBUS_ADDRHOLE_ADDR : RO; bitpos: [31:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_IDBUS_ADDRHOLE_ADDR    0xFFFFFFFFU
#define LPSYSREG_IDBUS_ADDRHOLE_ADDR_M  (LPSYSREG_IDBUS_ADDRHOLE_ADDR_V << LPSYSREG_IDBUS_ADDRHOLE_ADDR_S)
#define LPSYSREG_IDBUS_ADDRHOLE_ADDR_V  0xFFFFFFFFU
#define LPSYSREG_IDBUS_ADDRHOLE_ADDR_S  0

/** LPSYSREG_IDBUS_ADDRHOLE_INFO_REG register
 *  need_des
 */
#define LPSYSREG_IDBUS_ADDRHOLE_INFO_REG (DR_REG_LP_SYS_BASE + 0x19c)
/** LPSYSREG_IDBUS_ADDRHOLE_ID : RO; bitpos: [4:0]; default: 0;
 *  need_des
 */
#define LPSYSREG_IDBUS_ADDRHOLE_ID    0x0000001FU
#define LPSYSREG_IDBUS_ADDRHOLE_ID_M  (LPSYSREG_IDBUS_ADDRHOLE_ID_V << LPSYSREG_IDBUS_ADDRHOLE_ID_S)
#define LPSYSREG_IDBUS_ADDRHOLE_ID_V  0x0000001FU
#define LPSYSREG_IDBUS_ADDRHOLE_ID_S  0
/** LPSYSREG_IDBUS_ADDRHOLE_WR : RO; bitpos: [5]; default: 0;
 *  need_des
 */
#define LPSYSREG_IDBUS_ADDRHOLE_WR    (BIT(5))
#define LPSYSREG_IDBUS_ADDRHOLE_WR_M  (LPSYSREG_IDBUS_ADDRHOLE_WR_V << LPSYSREG_IDBUS_ADDRHOLE_WR_S)
#define LPSYSREG_IDBUS_ADDRHOLE_WR_V  0x00000001U
#define LPSYSREG_IDBUS_ADDRHOLE_WR_S  5
/** LPSYSREG_IDBUS_ADDRHOLE_SECURE : RO; bitpos: [6]; default: 0;
 *  need_des
 */
#define LPSYSREG_IDBUS_ADDRHOLE_SECURE    (BIT(6))
#define LPSYSREG_IDBUS_ADDRHOLE_SECURE_M  (LPSYSREG_IDBUS_ADDRHOLE_SECURE_V << LPSYSREG_IDBUS_ADDRHOLE_SECURE_S)
#define LPSYSREG_IDBUS_ADDRHOLE_SECURE_V  0x00000001U
#define LPSYSREG_IDBUS_ADDRHOLE_SECURE_S  6

/** LPSYSREG_HP_POR_RST_BYPASS_CTRL_REG register
 *  need_des
 */
#define LPSYSREG_HP_POR_RST_BYPASS_CTRL_REG (DR_REG_LP_SYS_BASE + 0x1a0)
/** LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL : R/W; bitpos: [15:8]; default: 255;
 *  [15] 1'b1: po_cnnt_rstn bypass sys_sw_rstn
 *  [14] 1'b1: po_cnnt_rstn bypass hp_wdt_sys_rstn
 *  [13] 1'b1: po_cnnt_rstn bypass hp_cpu_intrusion_rstn
 *  [12] 1'b1: po_cnnt_rstn bypass hp_sdio_sys_rstn
 *  [11] 1'b1: po_cnnt_rstn bypass usb_jtag_chip_rst
 *  [10] 1'b1: po_cnnt_rstn bypass usb_uart_chip_rst
 *  [9] 1'b1: po_cnnt_rstn bypass lp_wdt_hp_sys_rstn
 *  [8] 1'b1: po_cnnt_rstn bypass efuse_err_rstn
 */
#define LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL    0x000000FFU
#define LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL_M  (LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL_V << LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL_S)
#define LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL_V  0x000000FFU
#define LPSYSREG_HP_PO_CNNT_RSTN_BYPASS_CTRL_S  8
/** LPSYSREG_HP_PO_RSTN_BYPASS_CTRL : R/W; bitpos: [31:24]; default: 255;
 *  [31] 1'b1: po_rstn bypass sys_sw_rstn
 *  [30] 1'b1: po_rstn bypass hp_wdt_sys_rstn
 *  [29] 1'b1: po_rstn bypass hp_cpu_intrusion_rstn
 *  [28] 1'b1: po_rstn bypass hp_sdio_sys_rstn
 *  [27] 1'b1: po_rstn bypass usb_jtag_chip_rst
 *  [26] 1'b1: po_rstn bypass usb_uart_chip_rst
 *  [25] 1'b1: po_rstn bypass lp_wdt_hp_sys_rstn
 *  [24] 1'b1: po_rstn bypass efuse_err_rstn
 */
#define LPSYSREG_HP_PO_RSTN_BYPASS_CTRL    0x000000FFU
#define LPSYSREG_HP_PO_RSTN_BYPASS_CTRL_M  (LPSYSREG_HP_PO_RSTN_BYPASS_CTRL_V << LPSYSREG_HP_PO_RSTN_BYPASS_CTRL_S)
#define LPSYSREG_HP_PO_RSTN_BYPASS_CTRL_V  0x000000FFU
#define LPSYSREG_HP_PO_RSTN_BYPASS_CTRL_S  24

/** LPSYSREG_RNG_DATA_REG register
 *  rng data register
 */
#define LPSYSREG_RNG_DATA_REG (DR_REG_LP_SYS_BASE + 0x1a4)
/** LPSYSREG_RND_DATA : RO; bitpos: [31:0]; default: 0;
 *  result of rng output
 */
#define LPSYSREG_RND_DATA    0xFFFFFFFFU
#define LPSYSREG_RND_DATA_M  (LPSYSREG_RND_DATA_V << LPSYSREG_RND_DATA_S)
#define LPSYSREG_RND_DATA_V  0xFFFFFFFFU
#define LPSYSREG_RND_DATA_S  0

/** LPSYSREG_LP_CORE_AHB_TIMEOUT_REG register
 *  need_des
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_REG (DR_REG_LP_SYS_BASE + 0x1b0)
/** LPSYSREG_LP_CORE_AHB_TIMEOUT_EN : R/W; bitpos: [0]; default: 1;
 *  set this field to 1 to enable lp core ahb timeout handle
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_EN    (BIT(0))
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_EN_M  (LPSYSREG_LP_CORE_AHB_TIMEOUT_EN_V << LPSYSREG_LP_CORE_AHB_TIMEOUT_EN_S)
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_EN_V  0x00000001U
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_EN_S  0
/** LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES : R/W; bitpos: [16:1]; default: 65535;
 *  This field used to set lp core ahb bus timeout  threshold
 */
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES    0x0000FFFFU
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES_M  (LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES_V << LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES_S)
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES_V  0x0000FFFFU
#define LPSYSREG_LP_CORE_AHB_TIMEOUT_THRES_S  1
/** LPSYSREG_LP2HP_AHB_TIMEOUT_EN : R/W; bitpos: [17]; default: 1;
 *  set this field to 1 to enable lp2hp ahb timeout handle
 */
#define LPSYSREG_LP2HP_AHB_TIMEOUT_EN    (BIT(17))
#define LPSYSREG_LP2HP_AHB_TIMEOUT_EN_M  (LPSYSREG_LP2HP_AHB_TIMEOUT_EN_V << LPSYSREG_LP2HP_AHB_TIMEOUT_EN_S)
#define LPSYSREG_LP2HP_AHB_TIMEOUT_EN_V  0x00000001U
#define LPSYSREG_LP2HP_AHB_TIMEOUT_EN_S  17
/** LPSYSREG_LP2HP_AHB_TIMEOUT_THRES : R/W; bitpos: [22:18]; default: 31;
 *  This field used to set lp2hp ahb bus timeout  threshold
 */
#define LPSYSREG_LP2HP_AHB_TIMEOUT_THRES    0x0000001FU
#define LPSYSREG_LP2HP_AHB_TIMEOUT_THRES_M  (LPSYSREG_LP2HP_AHB_TIMEOUT_THRES_V << LPSYSREG_LP2HP_AHB_TIMEOUT_THRES_S)
#define LPSYSREG_LP2HP_AHB_TIMEOUT_THRES_V  0x0000001FU
#define LPSYSREG_LP2HP_AHB_TIMEOUT_THRES_S  18

/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_REG register
 *  need_des
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_REG (DR_REG_LP_SYS_BASE + 0x1b4)
/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN : R/W; bitpos: [0]; default: 1;
 *  set this field to 1 to enable lp core ibus timeout handle
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN    (BIT(0))
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN_M  (LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN_V << LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN_S)
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN_V  0x00000001U
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_EN_S  0
/** LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES : R/W; bitpos: [16:1]; default: 65535;
 *  This field used to set lp core ibus timeout  threshold
 */
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES    0x0000FFFFU
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES_M  (LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES_V << LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES_S)
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES_V  0x0000FFFFU
#define LPSYSREG_LP_CORE_IBUS_TIMEOUT_THRES_S  1

/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_REG register
 *  need_des
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_REG (DR_REG_LP_SYS_BASE + 0x1b8)
/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN : R/W; bitpos: [0]; default: 1;
 *  set this field to 1 to enable lp core dbus timeout handle
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN    (BIT(0))
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN_M  (LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN_V << LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN_S)
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN_V  0x00000001U
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_EN_S  0
/** LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES : R/W; bitpos: [16:1]; default: 65535;
 *  This field used to set lp core dbus timeout  threshold
 */
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES    0x0000FFFFU
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES_M  (LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES_V << LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES_S)
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES_V  0x0000FFFFU
#define LPSYSREG_LP_CORE_DBUS_TIMEOUT_THRES_S  1

/** LPSYSREG_LP_CORE_ERR_RESP_DIS_REG register
 *  need_des
 */
#define LPSYSREG_LP_CORE_ERR_RESP_DIS_REG (DR_REG_LP_SYS_BASE + 0x1bc)
/** LPSYSREG_LP_CORE_ERR_RESP_DIS : R/W; bitpos: [2:0]; default: 0;
 *  Set bit0 to disable ibus err resp;Set bit1 to disable dbus err resp; Set bit 2 to
 *  disable ahb err resp.
 */
#define LPSYSREG_LP_CORE_ERR_RESP_DIS    0x00000007U
#define LPSYSREG_LP_CORE_ERR_RESP_DIS_M  (LPSYSREG_LP_CORE_ERR_RESP_DIS_V << LPSYSREG_LP_CORE_ERR_RESP_DIS_S)
#define LPSYSREG_LP_CORE_ERR_RESP_DIS_V  0x00000007U
#define LPSYSREG_LP_CORE_ERR_RESP_DIS_S  0

/** LPSYSREG_RNG_CFG_REG register
 *  rng cfg register
 */
#define LPSYSREG_RNG_CFG_REG (DR_REG_LP_SYS_BASE + 0x1c0)
/** LPSYSREG_RNG_TIMER_EN : R/W; bitpos: [0]; default: 1;
 *  enable rng timer
 */
#define LPSYSREG_RNG_TIMER_EN    (BIT(0))
#define LPSYSREG_RNG_TIMER_EN_M  (LPSYSREG_RNG_TIMER_EN_V << LPSYSREG_RNG_TIMER_EN_S)
#define LPSYSREG_RNG_TIMER_EN_V  0x00000001U
#define LPSYSREG_RNG_TIMER_EN_S  0
/** LPSYSREG_RNG_TIMER_PSCALE : R/W; bitpos: [8:1]; default: 1;
 *  configure ng timer pscale
 */
#define LPSYSREG_RNG_TIMER_PSCALE    0x000000FFU
#define LPSYSREG_RNG_TIMER_PSCALE_M  (LPSYSREG_RNG_TIMER_PSCALE_V << LPSYSREG_RNG_TIMER_PSCALE_S)
#define LPSYSREG_RNG_TIMER_PSCALE_V  0x000000FFU
#define LPSYSREG_RNG_TIMER_PSCALE_S  1
/** LPSYSREG_RNG_SAR_ENABLE : R/W; bitpos: [9]; default: 0;
 *  enable rng_saradc
 */
#define LPSYSREG_RNG_SAR_ENABLE    (BIT(9))
#define LPSYSREG_RNG_SAR_ENABLE_M  (LPSYSREG_RNG_SAR_ENABLE_V << LPSYSREG_RNG_SAR_ENABLE_S)
#define LPSYSREG_RNG_SAR_ENABLE_V  0x00000001U
#define LPSYSREG_RNG_SAR_ENABLE_S  9
/** LPSYSREG_RNG_SAR_DATA : RO; bitpos: [28:16]; default: 0;
 *  debug rng sar sample cnt
 */
#define LPSYSREG_RNG_SAR_DATA    0x00001FFFU
#define LPSYSREG_RNG_SAR_DATA_M  (LPSYSREG_RNG_SAR_DATA_V << LPSYSREG_RNG_SAR_DATA_S)
#define LPSYSREG_RNG_SAR_DATA_V  0x00001FFFU
#define LPSYSREG_RNG_SAR_DATA_S  16

#ifdef __cplusplus
}
#endif
